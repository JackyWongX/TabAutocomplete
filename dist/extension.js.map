{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v3.js","webpack://tab-auto-complete/./src/utils/utils.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/native.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v35.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/stringify.js","webpack://tab-auto-complete/./node_modules/yallist/iterator.js","webpack://tab-auto-complete/./src/extension.ts","webpack://tab-auto-complete/./src/config/configManager.ts","webpack://tab-auto-complete/./src/providers/completionProvider.ts","webpack://tab-auto-complete/./src/cache/cacheManager.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/md5.js","webpack://tab-auto-complete/external commonjs \"vscode\"","webpack://tab-auto-complete/./src/ui/statusBar.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v1.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v5.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v7.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/parse.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/version.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/nil.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/regex.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v4.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/max.js","webpack://tab-auto-complete/./src/utils/logger.ts","webpack://tab-auto-complete/./node_modules/lru-cache/index.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/sha1.js","webpack://tab-auto-complete/./node_modules/yallist/yallist.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/index.js","webpack://tab-auto-complete/./src/api/ollamaClient.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/validate.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v1ToV6.js","webpack://tab-auto-complete/./src/ui/commands.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/rng.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v6ToV1.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v6.js","webpack://tab-auto-complete/external node-commonjs \"crypto\"","webpack://tab-auto-complete/webpack/bootstrap","webpack://tab-auto-complete/webpack/startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.URL = exports.DNS = void 0;\nconst md5_js_1 = require(\"./md5.js\");\nconst v35_js_1 = require(\"./v35.js\");\nvar v35_js_2 = require(\"./v35.js\");\nObject.defineProperty(exports, \"DNS\", { enumerable: true, get: function () { return v35_js_2.DNS; } });\nObject.defineProperty(exports, \"URL\", { enumerable: true, get: function () { return v35_js_2.URL; } });\nfunction v3(value, namespace, buf, offset) {\n    return (0, v35_js_1.default)(0x30, md5_js_1.default, value, namespace, buf, offset);\n}\nv3.DNS = v35_js_1.DNS;\nv3.URL = v35_js_1.URL;\nexports.default = v3;\n","/**\r\n * utils.ts - 工具函数集合\r\n */\r\n\r\n/**\r\n * 防抖函数\r\n * 延迟执行函数，避免频繁调用\r\n * @param fn 要执行的函数\r\n * @param delay 延迟时间（毫秒）\r\n */\r\nexport function debounce<T extends (...args: any[]) => Promise<any>>(fn: T, delay: number): (...args: any[]) => Promise<any> {\r\n    let timer: NodeJS.Timeout | null = null;\r\n    \r\n    return function(...args: any[]): Promise<any> {\r\n        return new Promise((resolve) => {\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n            \r\n            timer = setTimeout(async () => {\r\n                const result = await fn(...args);\r\n                resolve(result);\r\n            }, delay);\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * 节流函数\r\n * 限制函数执行频率\r\n * @param fn 要执行的函数\r\n * @param limit 限制时间（毫秒）\r\n */\r\nexport function throttle<T extends (...args: any[]) => any>(fn: T, limit: number): (...args: Parameters<T>) => ReturnType<T> | undefined {\r\n    let lastCall = 0;\r\n    let lastResult: ReturnType<T>;\r\n    \r\n    return function(this: any, ...args: Parameters<T>): ReturnType<T> | undefined {\r\n        const now = Date.now();\r\n        if (now - lastCall >= limit) {\r\n            lastCall = now;\r\n            lastResult = fn.apply(this, args);\r\n            return lastResult;\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\n\r\n/**\r\n * 格式化代码\r\n * 美化代码显示\r\n * @param code 代码文本\r\n * @param _language 编程语言(重命名为_language表示不使用)\r\n */\r\nexport function formatCode(code: string, _language: string): string {\r\n    // 简单的代码格式化，真实场景可能需要使用专门的格式化库\r\n    return code.trim();\r\n}\r\n\r\n/**\r\n * 计算文本的相似度\r\n * 使用Levenshtein距离算法\r\n * @param str1 第一个字符串\r\n * @param str2 第二个字符串\r\n */\r\nexport function calculateLevenshteinDistance(str1: string, str2: string): number {\r\n    const m = str1.length;\r\n    const n = str2.length;\r\n    \r\n    // 创建距离矩阵\r\n    const dist: number[][] = [];\r\n    for (let i = 0; i <= m; i++) {\r\n        dist[i] = [];\r\n        dist[i][0] = i;\r\n    }\r\n    \r\n    for (let j = 0; j <= n; j++) {\r\n        dist[0][j] = j;\r\n    }\r\n    \r\n    // 计算距离\r\n    for (let i = 1; i <= m; i++) {\r\n        for (let j = 1; j <= n; j++) {\r\n            const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n            dist[i][j] = Math.min(\r\n                dist[i - 1][j] + 1,      // 删除\r\n                dist[i][j - 1] + 1,      // 插入\r\n                dist[i - 1][j - 1] + cost // 替换或匹配\r\n            );\r\n        }\r\n    }\r\n    \r\n    return dist[m][n];\r\n}\r\n\r\n/**\r\n * 生成唯一ID\r\n */\r\nexport function generateUniqueId(): string {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2, 5);\r\n}\r\n\r\n/**\r\n * 安全解析JSON\r\n * @param text JSON字符串\r\n * @param defaultValue 解析失败时的默认值\r\n */\r\nexport function safeParseJSON<T>(text: string, defaultValue: T): T {\r\n    try {\r\n        return JSON.parse(text) as T;\r\n    } catch (e) {\r\n        return defaultValue;\r\n    }\r\n}\r\n\r\n/**\r\n * 从路径中提取文件扩展名\r\n * @param filePath 文件路径\r\n */\r\nexport function getFileExtension(filePath: string): string {\r\n    const match = filePath.match(/\\.([^.]+)$/);\r\n    return match ? match[1] : '';\r\n}\r\n\r\n/**\r\n * 从路径中提取文件名\r\n * @param filePath 文件路径\r\n */\r\nexport function getFileName(filePath: string): string {\r\n    const match = filePath.match(/([^/\\\\]+)$/);\r\n    return match ? match[1] : '';\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nexports.default = { randomUUID: crypto_1.randomUUID };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.URL = exports.DNS = exports.stringToBytes = void 0;\nconst parse_js_1 = require(\"./parse.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nfunction stringToBytes(str) {\n    str = unescape(encodeURIComponent(str));\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n}\nexports.stringToBytes = stringToBytes;\nexports.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nfunction v35(version, hash, value, namespace, buf, offset) {\n    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;\n    const namespaceBytes = typeof namespace === 'string' ? (0, parse_js_1.default)(namespace) : namespace;\n    if (typeof namespace === 'string') {\n        namespace = (0, parse_js_1.default)(namespace);\n    }\n    if (namespace?.length !== 16) {\n        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n    let bytes = new Uint8Array(16 + valueBytes.length);\n    bytes.set(namespaceBytes);\n    bytes.set(valueBytes, namespaceBytes.length);\n    bytes = hash(bytes);\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(bytes);\n}\nexports.default = v35;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unsafeStringify = void 0;\nconst validate_js_1 = require(\"./validate.js\");\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nexports.unsafeStringify = unsafeStringify;\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexports.default = stringify;\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","import * as vscode from 'vscode';\r\nimport { CompletionProvider } from './providers/completionProvider';\r\nimport { OllamaClient } from './api/ollamaClient';\r\nimport { ConfigManager } from './config/configManager';\r\nimport { CacheManager } from './cache/cacheManager';\r\nimport { StatusBarManager } from './ui/statusBar';\r\nimport { Logger, LogLevel } from './utils/logger';\r\nimport { CommandManager } from './ui/commands';\r\n\r\n/**\r\n * 激活插件\r\n * @param context 扩展上下文\r\n */\r\nexport async function activate(context: vscode.ExtensionContext) {\r\n    // 初始化日志系统\r\n    const logger = Logger.getInstance();\r\n    \r\n    try {\r\n        // 初始化配置管理器\r\n        const configManager = new ConfigManager();\r\n        \r\n        // 验证配置\r\n        if (!configManager.getApiUrl()) {\r\n            vscode.window.showErrorMessage('Ollama API URL未设置，请在设置中配置。');\r\n            return;\r\n        }\r\n        \r\n        if (!configManager.getModelName()) {\r\n            vscode.window.showErrorMessage('Ollama模型名称未设置，请在设置中配置。');\r\n            return;\r\n        }\r\n        \r\n        // 初始化缓存管理器\r\n        const cacheManager = new CacheManager(context.globalState, configManager);\r\n        \r\n        // 初始化Ollama客户端\r\n        const ollamaClient = new OllamaClient(configManager);\r\n        \r\n        // 测试Ollama API连接\r\n        const connectionTest = await ollamaClient.testConnection();\r\n        if (!connectionTest.success) {\r\n            vscode.window.showWarningMessage(`无法连接到Ollama API: ${connectionTest.message}。请检查配置并确保Ollama服务正在运行。`);\r\n        }\r\n        \r\n        // 初始化状态栏\r\n        const statusBar = new StatusBarManager(configManager);\r\n        context.subscriptions.push(statusBar);\r\n        \r\n        // 创建诊断集合\r\n        const diagnosticsCollection = vscode.languages.createDiagnosticCollection('tabAutoComplete');\r\n        context.subscriptions.push(diagnosticsCollection);\r\n        \r\n        // 初始化补全提供程序\r\n        const completionProvider = new CompletionProvider(\r\n            configManager,\r\n            logger,\r\n            cacheManager,\r\n            statusBar.getStatusBarItem(),\r\n            diagnosticsCollection,\r\n            context\r\n        );\r\n\r\n        // 注册补全提供程序\r\n        const supportedLanguages = ['javascript', 'typescript', 'python', 'java', 'c', 'cpp', 'csharp', 'go', 'rust', 'php', 'ruby', 'html', 'css', 'markdown'];\r\n        \r\n        // 确保为每种语言正确注册\r\n        for (const language of supportedLanguages) {\r\n            const selector: vscode.DocumentSelector = { language, scheme: 'file' };\r\n            const provider = vscode.languages.registerCompletionItemProvider(\r\n                selector,\r\n                completionProvider,\r\n                ...completionProvider.getTriggerCharacters()\r\n            );\r\n            context.subscriptions.push(provider);\r\n        }\r\n\r\n        // 监听编辑器内容变化事件，实现内联预览功能\r\n        let debounceTimer: NodeJS.Timeout | null = null;\r\n        let isProcessingCompletion = false;\r\n        let lastChangeTime = Date.now();\r\n\r\n        // 监听键盘事件\r\n        const keyPressListener = vscode.commands.registerCommand('type', async (args: { text: string }) => {\r\n            // 获取活动编辑器\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (!editor) {\r\n                await vscode.commands.executeCommand('default:type', args);\r\n                return;\r\n            }\r\n\r\n            // 检查输入的字符\r\n            const inputChar = args.text;\r\n            logger.debug('输入字符', inputChar);\r\n  \r\n            // 过滤掉控制字符和特殊按键\r\n            if (!isValidInputChar(inputChar)) {\r\n                await vscode.commands.executeCommand('default:type', args);\r\n                logger.debug('特殊字符不处理', inputChar);\r\n                return;\r\n            }\r\n\r\n            // 如果插件被禁用，直接执行默认输入\r\n            if (!configManager.isEnabled()) {\r\n                await vscode.commands.executeCommand('default:type', args);\r\n                return;\r\n            }\r\n\r\n            // 先执行默认的输入操作\r\n            await vscode.commands.executeCommand('default:type', args);\r\n\r\n            // 若又请求则取消\r\n            completionProvider.cancel();\r\n\r\n            // 若有预览则清除\r\n            completionProvider.clearPreview();\r\n\r\n            // 更新最后变更时间\r\n            lastChangeTime = Date.now();\r\n\r\n            // 清除之前的定时器\r\n            if (debounceTimer) {\r\n                clearTimeout(debounceTimer);\r\n            }\r\n\r\n            // 设置新的定时器，等待用户停止输入\r\n            debounceTimer = setTimeout(async () => {\r\n                try {\r\n                    // 再次检查是否经过了足够的防抖时间\r\n                    const timeSinceLastChange = Date.now() - lastChangeTime;\r\n                    const debounceDelay = configManager.getDebounceDelay();\r\n                    if (timeSinceLastChange < debounceDelay) {\r\n                        return;\r\n                    }\r\n\r\n                    // 检查文件类型是否支持\r\n                    if (!completionProvider.isFileTypeSupported(editor.document)) {\r\n                        return;\r\n                    }\r\n\r\n                    // 标记开始处理补全\r\n                    isProcessingCompletion = true;\r\n\r\n                    // 获取当前光标位置\r\n                    const position = editor.selection.active;\r\n\r\n                    // 创建取消令牌\r\n                    const cancellationTokenSource = new vscode.CancellationTokenSource();\r\n\r\n                    // 请求补全项\r\n                    const completionItems = await completionProvider.provideCompletionItems(\r\n                        editor.document,\r\n                        position,\r\n                        cancellationTokenSource.token,\r\n                        { triggerKind: vscode.CompletionTriggerKind.TriggerCharacter, triggerCharacter: inputChar }\r\n                    );\r\n\r\n                    // 如果有补全项，显示第一个\r\n                    if (completionItems) {\r\n                        let items: vscode.CompletionItem[] = [];\r\n                        if (Array.isArray(completionItems)) {\r\n                            items = completionItems;\r\n                        } else {\r\n                            items = completionItems.items;\r\n                        }\r\n\r\n                        if (items.length > 0) {\r\n                            const item = items[0];\r\n                            const insertText = typeof item.insertText === 'string' ?\r\n                                item.insertText : item.insertText?.value || '';\r\n\r\n                            // 设置预览\r\n                            await completionProvider.setPreview(insertText, position);\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    logger.error('处理键盘输入时出错', error);\r\n                } finally {\r\n                    isProcessingCompletion = false;\r\n                }\r\n            }, configManager.getDebounceDelay());\r\n        });\r\n        context.subscriptions.push(keyPressListener);\r\n\r\n        /**\r\n         * 检查是否是有效的输入字符\r\n         */\r\n        function isValidInputChar(char: string): boolean {\r\n            // 如果是空字符串或长度不为1，返回false\r\n            if (!char || char.length !== 1) {\r\n                return false;\r\n            }\r\n\r\n            // 获取字符的Unicode码点\r\n            const code = char.charCodeAt(0);\r\n\r\n            // 检查是否是可打印字符或常用标点符号\r\n            const isPrintable = code > 31 && code < 127;  // ASCII可打印字符\r\n            const isChineseChar = code >= 0x4E00 && code <= 0x9FFF;  // 基本汉字范围\r\n            const isCommonPunctuation = [\r\n                '.', ',', ':', ';', '!', '?', '\"', \"'\", '`',\r\n                '(', ')', '[', ']', '{', '}',\r\n                '+', '-', '*', '/', '=', '<', '>', '_',\r\n                '@', '#', '$', '%', '^', '&', '|', '\\\\',\r\n                '~'\r\n            ].includes(char);\r\n\r\n            // 检查是否是空格或换行（作为特殊的触发字符）\r\n            const isSpecialTrigger = [' ', '\\n'].includes(char);\r\n\r\n            return isPrintable || isChineseChar || isCommonPunctuation || isSpecialTrigger;\r\n        }\r\n\r\n        // 监听按键事件，处理ESC键\r\n        const keyBindingListener = vscode.commands.registerCommand('tabAutoComplete.handleEscape', () => {\r\n            if (completionProvider.hasActivePreview()) {\r\n                completionProvider.clearPreview();\r\n            }\r\n            // 取消当前的补全请求\r\n            completionProvider.cancel();\r\n            completionProvider.lastShownCompletion = null;\r\n        });\r\n        context.subscriptions.push(keyBindingListener);\r\n        \r\n        // 注册自动补全命令 - 修改为直接应用补全\r\n        const applyCompletionCommand = vscode.commands.registerTextEditorCommand('tabAutoComplete.applyCompletion',\r\n            (textEditor: vscode.TextEditor) => {\r\n                if (configManager.isEnabled() && textEditor && completionProvider.lastShownCompletion) {\r\n                    completionProvider.accept(completionProvider.lastShownCompletion.completionId);\r\n                }\r\n                else{\r\n                    // 执行 VS Code 的默认缩进操作\r\n                    vscode.commands.executeCommand('editor.action.indentLines').then(() => {\r\n                        // 缩进操作成功\r\n                    }, (error) => {\r\n                        console.error('Failed to execute default indent action:', error);\r\n                        textEditor.edit((editBuilder) => {\r\n                            const position = textEditor.selection.active;\r\n                            editBuilder.insert(position, '\\t');\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        );\r\n        context.subscriptions.push(applyCompletionCommand);\r\n        \r\n        // 注册记录补全结果的命令\r\n        const logCompletionOutcomeCommand = vscode.commands.registerCommand(\r\n            'tabAutoComplete.logCompletionOutcome',\r\n            async (completionId: string, provider: CompletionProvider) => {\r\n                if (completionId && provider) {\r\n                    await provider.accept(completionId);\r\n                }\r\n            }\r\n        );\r\n        context.subscriptions.push(logCompletionOutcomeCommand);\r\n        \r\n        // 标记补全提供程序为已注册\r\n        completionProvider.setRegistered(true);\r\n\r\n        // 注册命令\r\n        const commandManager = new CommandManager(\r\n            context,\r\n            configManager,\r\n            ollamaClient,\r\n            cacheManager,\r\n            statusBar\r\n        );\r\n\r\n        // 显示欢迎信息 - 修改消息内容，删除连续补全的描述\r\n        //vscode.window.showInformationMessage('tabAutoComplete代码补全扩展已激活。');\r\n        \r\n    } catch (err) {\r\n        logger.error('激活插件时发生错误', err);\r\n        vscode.window.showErrorMessage('激活插件时发生错误，请检查日志输出。');\r\n    }\r\n}\r\n\r\n/**\r\n * 判断是否应该缓存文档变更\r\n */\r\nfunction shouldCacheChanges(\r\n    event: vscode.TextDocumentChangeEvent,\r\n    configManager: ConfigManager\r\n): boolean {\r\n    // 检查文件类型是否在启用列表中\r\n    const fileName = event.document.fileName;\r\n    const enabledTypes = configManager.getEnabledFileTypes();\r\n    const disabledTypes = configManager.getDisabledFileTypes();\r\n    \r\n    // 检查扩展名\r\n    const fileExt = fileName.substring(fileName.lastIndexOf('.'));\r\n    \r\n    // 如果明确禁用，则不缓存\r\n    if (disabledTypes.includes(fileExt)) {\r\n        return false;\r\n    }\r\n    \r\n    // 如果明确启用或设置为所有文件类型(*)，则缓存\r\n    return enabledTypes.includes(fileExt) || enabledTypes.includes('*');\r\n}\r\n\r\n/**\r\n * 停用插件\r\n */\r\nexport function deactivate() {\r\n    // 不需要日志输出\r\n} ","import * as vscode from 'vscode';\r\nimport { Logger, LogLevel } from '../utils/logger';\r\n\r\n/**\r\n * 配置管理器\r\n * 负责读取和管理插件配置项\r\n */\r\nexport class ConfigManager {\r\n    // 配置前缀\r\n    private readonly configPrefix = 'tabAutoComplete';\r\n    \r\n    // 缓存配置值\r\n    private cachedConfig: {\r\n        enabled: boolean;\r\n        triggerDelay: number;\r\n        apiUrl: string;\r\n        modelName: string;\r\n        temperature: number;\r\n        maxTokens: number;\r\n        maxContextLines: number;\r\n        includeImports: boolean;\r\n        includeComments: boolean;\r\n        cacheEnabled: boolean;\r\n        retentionPeriodHours: number;\r\n        maxSnippets: number;\r\n        enabledFileTypes: string[] | string;\r\n        disabledFileTypes: string[] | string;\r\n        logLevel: LogLevel;\r\n        adaptToProjectSize: boolean;\r\n    } = {\r\n        enabled: true,\r\n        triggerDelay: 300,\r\n        apiUrl: 'http://localhost:11434',\r\n        modelName: 'qwen2.5-coder:1.5b',\r\n        temperature: 0.3,\r\n        maxTokens: 3000,\r\n        maxContextLines: 2000,\r\n        includeImports: true,\r\n        includeComments: true,\r\n        cacheEnabled: true,\r\n        retentionPeriodHours: 24,\r\n        maxSnippets: 1000,\r\n        enabledFileTypes: ['.js', '.ts', '.jsx', '.tsx', '.py', '.java', '.c', '.cpp', '.cs', '.go', '.rs', '.php', '.rb', '.html', '.css', '.md', '*'],\r\n        disabledFileTypes: ['.txt', '.log', '.json', '.yml', '.yaml'],\r\n        logLevel: LogLevel.ERROR,\r\n        adaptToProjectSize: true\r\n    };\r\n    \r\n    private logger: Logger;\r\n    private configChangeListener: vscode.Disposable;\r\n    \r\n    constructor() {\r\n        this.logger = Logger.getInstance();\r\n        // 在构造函数中加载配置\r\n        this.loadConfiguration();\r\n        \r\n        // 监听配置变更\r\n        this.configChangeListener = vscode.workspace.onDidChangeConfiguration(e => {\r\n            if (e.affectsConfiguration(this.configPrefix)) {\r\n                this.loadConfiguration();\r\n            }\r\n        });\r\n        \r\n        this.logger.debug('ConfigManager初始化完成');\r\n    }\r\n    \r\n    /**\r\n     * 加载配置\r\n     */\r\n    private loadConfiguration(): void {\r\n        const config = vscode.workspace.getConfiguration(this.configPrefix);\r\n        \r\n        // 加载通用设置\r\n        this.cachedConfig.enabled = config.get<boolean>('general.enabled', true);\r\n        this.cachedConfig.triggerDelay = config.get<number>('general.triggerDelay', 300);\r\n        \r\n        // 加载API设置\r\n        this.cachedConfig.apiUrl = config.get<string>('model.url', 'http://localhost:11434');\r\n        this.cachedConfig.modelName = config.get<string>('model.name', 'qwen2.5-coder:1.5b');\r\n        this.cachedConfig.temperature = config.get<number>('model.temperature', 0.3);\r\n        this.cachedConfig.maxTokens = config.get<number>('model.maxTokens', 300);\r\n        \r\n        // 上下文设置\r\n        this.cachedConfig.maxContextLines = config.get<number>('context.maxLines', 100);\r\n        this.cachedConfig.includeImports = config.get<boolean>('context.includeImports', true);\r\n        this.cachedConfig.includeComments = config.get<boolean>('context.includeComments', true);\r\n        \r\n        // 缓存设置\r\n        this.cachedConfig.cacheEnabled = config.get<boolean>('cache.enabled', true);\r\n        this.cachedConfig.retentionPeriodHours = config.get<number>('cache.retentionPeriodHours', 24);\r\n        this.cachedConfig.maxSnippets = config.get<number>('cache.maxSnippets', 1000);\r\n        \r\n        // 文件类型设置\r\n        this.cachedConfig.enabledFileTypes = config.get<string[]>('fileTypes.enabled', ['.js', '.ts', '.jsx', '.tsx', '.py', '.java', '.c', '.cpp', '.cs', '.go', '.rs', '.php', '.rb', '.html', '.css', '.md', '*']);\r\n        this.cachedConfig.disabledFileTypes = config.get<string[]>('fileTypes.disabled', ['.txt', '.log', '.json', '.yml', '.yaml']);\r\n        \r\n        // 日志设置\r\n        const logLevelStr = config.get<string>('logging.level', 'error');\r\n        this.cachedConfig.logLevel = this.parseLogLevel(logLevelStr);\r\n        \r\n        // 高级设置\r\n        this.cachedConfig.adaptToProjectSize = config.get<boolean>('advanced.adaptToProjectSize', true);\r\n        \r\n        // 更新Logger的日志级别\r\n        this.logger.setLogLevel(this.cachedConfig.logLevel);\r\n        \r\n        this.logger.debug('配置已重新加载');\r\n    }\r\n    \r\n    /**\r\n     * 将字符串转换为LogLevel枚举\r\n     */\r\n    private parseLogLevel(level: string): LogLevel {\r\n        switch (level.toLowerCase()) {\r\n            case 'debug':\r\n                return LogLevel.DEBUG;\r\n            case 'info':\r\n                return LogLevel.INFO;\r\n            case 'warn':\r\n                return LogLevel.WARN;\r\n            case 'error':\r\n                return LogLevel.ERROR;\r\n            case 'none':\r\n                return LogLevel.NONE;\r\n            default:\r\n                return LogLevel.ERROR;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 获取日志级别\r\n     */\r\n    public getLogLevel(): LogLevel {\r\n        return this.cachedConfig.logLevel;\r\n    }\r\n    \r\n    /**\r\n     * 设置日志级别\r\n     */\r\n    public async setLogLevel(level: LogLevel): Promise<void> {\r\n        const levelStr = LogLevel[level].toLowerCase();\r\n        await this.updateConfigValue('logging.level', levelStr);\r\n        this.logger.setLogLevel(level);\r\n    }\r\n    \r\n    /**\r\n     * 重新加载配置\r\n     */\r\n    public reloadConfig(): void {\r\n        this.loadConfiguration();\r\n    }\r\n    \r\n    /**\r\n     * 更新配置值\r\n     */\r\n    public async updateConfigValue<T>(key: string, value: T, global: boolean = true): Promise<void> {\r\n        const config = vscode.workspace.getConfiguration(this.configPrefix);\r\n        await config.update(key, value, global);\r\n        this.reloadConfig();\r\n    }\r\n    \r\n    /**\r\n     * 是否启用插件\r\n     */\r\n    public isEnabled(): boolean {\r\n        return this.cachedConfig.enabled;\r\n    }\r\n    \r\n    /**\r\n     * 设置插件启用状态\r\n     */\r\n    public async setEnabled(enabled: boolean): Promise<void> {\r\n        await this.updateConfigValue('general.enabled', enabled);\r\n    }\r\n    \r\n    /**\r\n     * 获取触发补全的延迟时间\r\n     */\r\n    public getTriggerDelay(): number {\r\n        return this.cachedConfig.triggerDelay;\r\n    }\r\n    \r\n    /**\r\n     * 获取API URL\r\n     */\r\n    public getApiUrl(): string {\r\n        return this.cachedConfig.apiUrl;\r\n    }\r\n    \r\n    /**\r\n     * 获取模型名称\r\n     */\r\n    public getModelName(): string {\r\n        return this.cachedConfig.modelName;\r\n    }\r\n    \r\n    /**\r\n     * 设置模型名称\r\n     */\r\n    public async setModelName(modelName: string): Promise<void> {\r\n        await this.updateConfigValue('model.name', modelName);\r\n    }\r\n    \r\n    /**\r\n     * 获取温度参数\r\n     * 较低的温度生成更可预测的文本，较高的温度允许更多创造性\r\n     */\r\n    public getTemperature(): number {\r\n        // 检查项目类型并适当调整温度\r\n        const baseTemperature = this.cachedConfig.temperature;\r\n        \r\n        // 如果配置了自适应项目大小，则进行调整\r\n        if (this.shouldAdaptToProjectSize()) {\r\n            const projectSize = this.estimateProjectSize();\r\n            this.logger.debug(`估计项目大小: ${projectSize}`);\r\n            \r\n            // 大型项目降低一点温度以保持一致性\r\n            if (projectSize === 'large') {\r\n                return Math.max(0.2, baseTemperature - 0.05);\r\n            }\r\n            // 小型项目可以增加一点温度以提高创造性\r\n            else if (projectSize === 'small') {\r\n                return Math.min(0.7, baseTemperature + 0.05);\r\n            }\r\n        }\r\n        \r\n        return baseTemperature;\r\n    }\r\n    \r\n    /**\r\n     * 获取最大生成token数\r\n     */\r\n    public getMaxTokens(): number {\r\n        const baseMaxTokens = this.cachedConfig.maxTokens;\r\n        \r\n        // 如果配置了自适应项目大小，则进行调整\r\n        if (this.shouldAdaptToProjectSize()) {\r\n            const projectSize = this.estimateProjectSize();\r\n            \r\n            // 大型项目增加token数以包含更多上下文\r\n            if (projectSize === 'large') {\r\n                return Math.min(500, baseMaxTokens + 100);\r\n            }\r\n            // 小型项目可以使用基本设置\r\n            else if (projectSize === 'small') {\r\n                return baseMaxTokens;\r\n            }\r\n        }\r\n        \r\n        return baseMaxTokens;\r\n    }\r\n    \r\n    /**\r\n     * 获取最大上下文行数\r\n     */\r\n    public getMaxContextLines(): number {\r\n        return this.cachedConfig.maxContextLines;\r\n    }\r\n    \r\n    /**\r\n     * 是否包含导入语句\r\n     */\r\n    public shouldIncludeImports(): boolean {\r\n        return this.cachedConfig.includeImports;\r\n    }\r\n    \r\n    /**\r\n     * 是否包含注释\r\n     */\r\n    public shouldIncludeComments(): boolean {\r\n        return this.cachedConfig.includeComments;\r\n    }\r\n    \r\n    /**\r\n     * 是否启用缓存\r\n     */\r\n    public isCacheEnabled(): boolean {\r\n        return this.cachedConfig.cacheEnabled;\r\n    }\r\n    \r\n    /**\r\n     * 获取缓存保留时间（小时）\r\n     */\r\n    public getRetentionPeriodHours(): number {\r\n        return this.cachedConfig.retentionPeriodHours;\r\n    }\r\n    \r\n    /**\r\n     * 获取最大缓存条目数\r\n     */\r\n    public getMaxSnippets(): number {\r\n        return this.cachedConfig.maxSnippets;\r\n    }\r\n    \r\n    /**\r\n     * 获取启用的文件类型\r\n     */\r\n    public getEnabledFileTypes(): string[] {\r\n        const types = this.cachedConfig.enabledFileTypes;\r\n        \r\n        // 确保返回数组\r\n        if (Array.isArray(types)) {\r\n            return types;\r\n        } else if (typeof types === 'string') {\r\n            // 处理字符串情况\r\n            if (types.includes(',')) {\r\n                return types.split(',').map(t => t.trim());\r\n            } else {\r\n                return [types];\r\n            }\r\n        }\r\n        \r\n        // 默认返回所有类型\r\n        return ['*'];\r\n    }\r\n    \r\n    /**\r\n     * 给定文件扩展名是否适用于针对指定语言的规则\r\n     * @param fileExt 文件扩展名\r\n     * @param language 语言标识符\r\n     */\r\n    private isFileExtApplicableForLanguage(fileExt: string, language: string): boolean {\r\n        const languageExtMap: {[key: string]: string[]} = {\r\n            'javascript': ['.js', '.jsx'],\r\n            'typescript': ['.ts', '.tsx'],\r\n            'python': ['.py', '.pyw'],\r\n            'java': ['.java'],\r\n            'csharp': ['.cs'],\r\n            'cpp': ['.cpp', '.cc', '.cxx', '.h', '.hpp'],\r\n            'c': ['.c', '.h'],\r\n            'go': ['.go'],\r\n            'rust': ['.rs'],\r\n            'php': ['.php'],\r\n            'ruby': ['.rb'],\r\n            'html': ['.html', '.htm'],\r\n            'css': ['.css'],\r\n            'markdown': ['.md']\r\n        };\r\n        \r\n        return languageExtMap[language]?.includes(fileExt) || false;\r\n    }\r\n    \r\n    /**\r\n     * 根据提供的模式检查文件类型\r\n     * @param fileType 文件类型（扩展名或语言标识符）\r\n     * @param patterns 要检查的模式数组\r\n     */\r\n    private matchesFileTypePatterns(fileType: string, patterns: string[]): boolean {\r\n        return patterns.some(pattern => {\r\n            // 精确匹配\r\n            if (pattern === fileType) {\r\n                return true;\r\n            }\r\n            \r\n            // 通配符匹配所有\r\n            if (pattern === '*' || pattern === 'all') {\r\n                return true;\r\n            }\r\n            \r\n            // 通配符匹配特定扩展名前缀\r\n            if (pattern.endsWith('*') && fileType.startsWith(pattern.slice(0, -1))) {\r\n                return true;\r\n            }\r\n            \r\n            return false;\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * 获取禁用的文件类型\r\n     */\r\n    public getDisabledFileTypes(): string[] {\r\n        const types = this.cachedConfig.disabledFileTypes;\r\n        \r\n        // 确保返回数组\r\n        if (Array.isArray(types)) {\r\n            return types;\r\n        } else if (typeof types === 'string') {\r\n            // 处理字符串情况\r\n            if (types.includes(',')) {\r\n                return types.split(',').map(t => t.trim());\r\n            } else {\r\n                return [types];\r\n            }\r\n        }\r\n        \r\n        // 默认禁用列表\r\n        return ['.txt', '.log'];\r\n    }\r\n    \r\n    /**\r\n     * 获取完整配置\r\n     */\r\n    public getFullConfig(): any {\r\n        return { ...this.cachedConfig };\r\n    }\r\n\r\n    /**\r\n     * 是否启用调试日志\r\n     */\r\n    public isDebugEnabled(): boolean {\r\n        return this.getLogLevel() === LogLevel.DEBUG;\r\n    }\r\n    \r\n    /**\r\n     * 是否应根据项目大小自适应调整参数\r\n     */\r\n    private shouldAdaptToProjectSize(): boolean {\r\n        return this.cachedConfig.adaptToProjectSize;\r\n    }\r\n    \r\n    /**\r\n     * 估计项目大小\r\n     * @returns 'small', 'medium', 或 'large'\r\n     */\r\n    private estimateProjectSize(): 'small' | 'medium' | 'large' {\r\n        try {\r\n            // 获取当前打开的所有文件数量作为简单估计\r\n            const openedFileCount = vscode.workspace.textDocuments.length;\r\n            \r\n            // 阈值可以根据需要调整\r\n            if (openedFileCount > 20) {\r\n                return 'large';\r\n            } else if (openedFileCount > 8) {\r\n                return 'medium';\r\n            } else {\r\n                return 'small';\r\n            }\r\n        } catch (error) {\r\n            // 如果无法估计，默认为中型项目\r\n            return 'medium';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否启用自适应项目大小\r\n     */\r\n    public isAdaptToProjectSizeEnabled(): boolean {\r\n        return this.cachedConfig.adaptToProjectSize;\r\n    }\r\n\r\n    /**\r\n     * 设置自适应项目大小功能\r\n     */\r\n    public async setAdaptToProjectSize(enabled: boolean): Promise<void> {\r\n        this.logger.debug(`${enabled ? '启用' : '禁用'}自适应项目大小功能`);\r\n        await this.updateConfigValue('advanced.adaptToProjectSize', enabled);\r\n    }\r\n\r\n    /**\r\n     * 获取防抖延迟时间（毫秒）\r\n     */\r\n    public getDebounceDelay(): number {\r\n        return vscode.workspace.getConfiguration('tabAutoComplete').get('debounceDelay', 300);\r\n    }\r\n\r\n    /**\r\n     * 获取代码补全提示模板\r\n     */\r\n    public getPromptTemplate(): string {\r\n        return vscode.workspace.getConfiguration('tabAutoComplete').get('prompt.template', \r\n            '你是一个智能代码补全助手。请根据以下上下文补全代码，只需要补全光标处的代码且只返回补全的代码，不要包含任何解释或注释，补全的内容不要包含上下文中已存在的重复的内容。\\n\\n上下文:\\n```\\n${prefix}\\n```\\n\\n请直接补全代码:');\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.configChangeListener) {\r\n            this.configChangeListener.dispose();\r\n        }\r\n    }\r\n} ","import * as vscode from 'vscode';\r\nimport { OllamaClient } from '../api/ollamaClient';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport { CacheManager } from '../cache/cacheManager';\r\nimport { Logger } from '../utils/logger';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * 代码补全提供程序\r\n * 负责分析用户代码，收集上下文，请求模型生成补全，并将补全内容应用到编辑器中\r\n */\r\nexport class CompletionProvider implements vscode.CompletionItemProvider, vscode.Disposable {\r\n    private client: OllamaClient;\r\n    private configManager: ConfigManager;\r\n    private logger: Logger;\r\n    private cacheManager: CacheManager;\r\n    private statusBarItem: vscode.StatusBarItem;\r\n    private diagnosticsCollection: vscode.DiagnosticCollection;\r\n\r\n    // 跟踪状态\r\n    private isRegisteredFlag: boolean = false;\r\n    private lastCompletionResult: string | null = null;\r\n    private lastContext: string = '';\r\n    private lastPosition: vscode.Position | null = null;\r\n    private errorsShown: Set<string> = new Set();\r\n    private abortControllers: Map<string, AbortController> = new Map();\r\n    public lastShownCompletion: any = undefined;\r\n    \r\n    // 预览相关属性\r\n    private lastDecorator: vscode.TextEditorDecorationType | null = null;\r\n    private lastInsertText: string | null = null;\r\n    private lastPreviewPosition: vscode.Position | null = null;\r\n    private temporaryLines: number = 0;  // 跟踪临时插入的空行数量\r\n    private originalPosition: vscode.Position | null = null;  // 记录原始光标位置\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor(\r\n        configManager: ConfigManager, \r\n        logger: Logger, \r\n        cacheManager: CacheManager,\r\n        statusBarItem: vscode.StatusBarItem,\r\n        diagnosticsCollection: vscode.DiagnosticCollection,\r\n        _context: vscode.ExtensionContext\r\n    ) {\r\n        this.configManager = configManager;\r\n        this.logger = logger;\r\n        this.cacheManager = cacheManager;\r\n        this.statusBarItem = statusBarItem;\r\n        this.diagnosticsCollection = diagnosticsCollection;\r\n        this.client = new OllamaClient(configManager);\r\n        \r\n        this.logger.debug('CompletionProvider 已初始化');\r\n    }\r\n\r\n    /**\r\n     * 处理错误\r\n     */\r\n    private onError(e: any) {\r\n        // 忽略一些常见的预期错误\r\n        const ERRORS_TO_IGNORE = [\r\n            \"unexpected server status\",\r\n            \"operation was aborted\",\r\n        ];\r\n\r\n        if (ERRORS_TO_IGNORE.some((err) => \r\n            typeof e === \"string\" ? e.includes(err) : e?.message?.includes(err))) {\r\n            return;\r\n        }\r\n\r\n        this.logger.error('生成代码补全时出错', e);\r\n        \r\n        if (!this.errorsShown.has(e.message)) {\r\n            this.errorsShown.add(e.message);\r\n            \r\n            let options = [\"文档\"];\r\n            if (e.message.includes(\"Ollama可能未安装\")) {\r\n                options.push(\"下载Ollama\");\r\n            } else if (e.message.includes(\"Ollama可能未运行\")) {\r\n                options = [\"启动Ollama\"];\r\n            }\r\n            \r\n            vscode.window.showErrorMessage(e.message, ...options).then((val) => {\r\n                if (val === \"文档\") {\r\n                    vscode.env.openExternal(vscode.Uri.parse(\"https://github.com/ollama/ollama\"));\r\n                } else if (val === \"下载Ollama\") {\r\n                    vscode.env.openExternal(vscode.Uri.parse(\"https://ollama.ai/download\"));\r\n                } else if (val === \"启动Ollama\") {\r\n                    // 启动Ollama的逻辑\r\n                    this.startOllama();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启动Ollama服务\r\n     */\r\n    private async startOllama() {\r\n        // 根据平台选择不同的启动命令\r\n        let command = '';\r\n        if (process.platform === 'win32') {\r\n            command = 'start ollama serve';\r\n        } else if (process.platform === 'darwin') {\r\n            command = 'open -a Ollama';\r\n        } else {\r\n            command = 'ollama serve';\r\n        }\r\n\r\n        try {\r\n            // 使用VS Code的终端执行命令\r\n            const terminal = vscode.window.createTerminal('Ollama');\r\n            terminal.sendText(command);\r\n            terminal.show();\r\n            \r\n            this.logger.debug('已尝试启动Ollama服务');\r\n            vscode.window.showInformationMessage('正在尝试启动Ollama服务，请稍候...');\r\n            \r\n            // 等待几秒钟后测试连接\r\n            setTimeout(async () => {\r\n                const result = await this.client.testConnection();\r\n                if (result.success) {\r\n                    vscode.window.showInformationMessage('Ollama服务已成功启动！');\r\n                } else {\r\n                    vscode.window.showErrorMessage('Ollama服务启动失败，请手动启动Ollama。');\r\n                }\r\n            }, 5000);\r\n        } catch (error) {\r\n            this.logger.error('启动Ollama服务失败', error);\r\n            vscode.window.showErrorMessage('启动Ollama服务失败，请手动启动Ollama。');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取消当前的补全请求\r\n     */\r\n    public cancel() {\r\n        this.abortControllers.forEach((controller) => {\r\n            controller.abort();\r\n        });\r\n        this.abortControllers.clear();\r\n    }\r\n\r\n    /**\r\n     * 创建中止控制器\r\n     */\r\n    private createAbortController(completionId: string): AbortController {\r\n        const controller = new AbortController();\r\n        this.abortControllers.set(completionId, controller);\r\n        return controller;\r\n    }\r\n\r\n    /**\r\n     * 删除中止控制器\r\n     */\r\n    private deleteAbortController(completionId: string) {\r\n        this.abortControllers.delete(completionId);\r\n    }\r\n\r\n    /**\r\n     * 接受补全\r\n     */\r\n    public async accept(completionId?: string): Promise<void> {\r\n        this.logger.debug(`接受补全: ${completionId || '无ID'}`);\r\n        \r\n        try {\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (!editor) {\r\n                this.logger.debug('没有活动的编辑器，无法接受补全');\r\n                return;\r\n            }\r\n\r\n            // 检查是否有必要的状态\r\n            if (!this.lastInsertText || !this.originalPosition) {\r\n                this.logger.debug('缺少必要的状态信息，无法接受补全');\r\n                await this.clearPreview();\r\n                return;\r\n            }\r\n\r\n            // 计算要删除的范围\r\n            const lines = this.lastInsertText.split('\\n');\r\n            const endPosition = new vscode.Position(\r\n                this.originalPosition.line + lines.length - 1,\r\n                lines[lines.length - 1].length + (lines.length === 1 ? this.originalPosition.character : 0)\r\n            );\r\n            const range = new vscode.Range(this.originalPosition, endPosition);\r\n\r\n            // 保存当前的预览内容\r\n            const textToInsert = this.lastInsertText;\r\n\r\n            // 清理装饰器（如果存在）\r\n            if (this.lastDecorator) {\r\n                this.lastDecorator.dispose();\r\n                this.lastDecorator = null;\r\n            }\r\n\r\n            // 删除预览内容并重新插入\r\n            const success = await editor.edit(editBuilder => {\r\n                editBuilder.delete(range);\r\n                editBuilder.insert(this.originalPosition, textToInsert);\r\n            });\r\n\r\n            if (!success) {\r\n                this.logger.debug('编辑操作失败');\r\n                return;\r\n            }\r\n\r\n            // 等待文档保存\r\n            if (editor.document.isDirty) {\r\n                await editor.document.save();\r\n            }\r\n\r\n            // 将接受的补全内容保存到缓存\r\n            if (this.configManager.isCacheEnabled() && this.lastContext && textToInsert) {\r\n                this.logger.debug('将已接受的补全内容保存到缓存');\r\n                try {\r\n                    await this.cacheManager.put(this.lastContext, textToInsert);\r\n                } catch (error) {\r\n                    this.logger.debug(`保存补全内容到缓存时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n                }\r\n            }\r\n\r\n            // 移动光标到插入内容的末尾\r\n            const newPosition = new vscode.Position(\r\n                this.originalPosition.line + lines.length - 1,\r\n                lines[lines.length - 1].length + (lines.length === 1 ? this.originalPosition.character : 0)\r\n            );\r\n            editor.selection = new vscode.Selection(newPosition, newPosition);\r\n            \r\n            // 重置所有状态\r\n            this.lastDecorator = null;\r\n            this.lastInsertText = null;\r\n            this.lastPreviewPosition = null;\r\n            this.lastPosition = null;\r\n            this.originalPosition = null;\r\n            this.lastShownCompletion = null;\r\n\r\n            this.logger.debug('补全内容已成功应用');\r\n        } catch (error) {\r\n            this.logger.error('接受补全时出错', error);\r\n            // 如果出错，确保清除所有状态\r\n            await this.clearPreview();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 标记补全已显示\r\n     */\r\n    public markDisplayed(completionId: string, outcome: any) {\r\n        this.logger.debug(`标记补全已显示: ${completionId}`);\r\n        // 记录outcome相关信息\r\n        if (outcome) {\r\n            this.logger.debug(`补全长度: ${outcome.completion?.length || 0}, 是否来自缓存: ${outcome.cacheHit || false}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用补全内容到编辑器\r\n     */\r\n    public async applyCompletion(editor: vscode.TextEditor, position: vscode.Position, text: string): Promise<void> {\r\n        try {\r\n            if (!text || text.trim().length === 0) {\r\n                this.logger.debug('补全内容为空，不应用');\r\n                return;\r\n            }\r\n\r\n            // 处理补全内容\r\n            let processedText = text;\r\n            \r\n            // 移除可能存在的代码块标记\r\n            if (processedText.startsWith('```')) {\r\n                const langMatch = processedText.match(/^```(\\w+)\\n/);\r\n                if (langMatch) {\r\n                    processedText = processedText.substring(langMatch[0].length);\r\n                } else {\r\n                    processedText = processedText.substring(3);\r\n                }\r\n            }\r\n            if (processedText.endsWith('```')) {\r\n                processedText = processedText.substring(0, processedText.length - 3);\r\n            }\r\n            \r\n            // 编辑文档插入补全内容\r\n            const success = await editor.edit(editBuilder => {\r\n                editBuilder.insert(position, processedText);\r\n            });\r\n\r\n            if (success) {\r\n                // 应用成功，将光标移动到插入的文本末尾\r\n                const insertedLines = processedText.split('\\n');\r\n                const lastLineLength = insertedLines[insertedLines.length - 1].length;\r\n                \r\n                let newPosition;\r\n                if (insertedLines.length > 1) {\r\n                    // 插入了多行文本\r\n                    newPosition = new vscode.Position(\r\n                        position.line + insertedLines.length - 1,\r\n                        insertedLines.length > 1 ? lastLineLength : position.character + lastLineLength\r\n                    );\r\n                } else {\r\n                    // 插入了单行文本\r\n                    newPosition = new vscode.Position(position.line, position.character + processedText.length);\r\n                }\r\n                \r\n                // 设置新的光标位置\r\n                editor.selection = new vscode.Selection(newPosition, newPosition);\r\n                \r\n                // 确保编辑器视图能看到新的光标位置\r\n                editor.revealRange(new vscode.Range(newPosition, newPosition));\r\n                \r\n                // 更新最后位置\r\n                this.lastPosition = newPosition;\r\n            } else {\r\n                this.logger.debug('应用补全内容失败，编辑操作返回false');\r\n            }\r\n        } catch (error) {\r\n            this.logger.error('应用补全时出错', error);\r\n            throw error; // 重新抛出错误以便调用者处理\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取触发字符\r\n     */\r\n    public getTriggerCharacters(): string[] {\r\n        return ['.', '(', '{', '[', ',', ' ', '\\n'];\r\n    }\r\n\r\n    /**\r\n     * 提供代码补全项\r\n     */\r\n    public async provideCompletionItems(\r\n        document: vscode.TextDocument,\r\n        position: vscode.Position,\r\n        token: vscode.CancellationToken,\r\n        context: vscode.CompletionContext\r\n    ): Promise<vscode.CompletionItem[] | vscode.CompletionList | null> {\r\n        try {\r\n            // 记录触发信息\r\n            this.logger.debug(`触发补全，类型: ${context.triggerKind}, 字符: ${context.triggerCharacter || 'none'}`);\r\n\r\n            // 检查是否启用了代码补全\r\n            if (!this.configManager.isEnabled()) {\r\n                this.logger.debug('代码补全功能已禁用，不提供补全');\r\n                return null;\r\n            }\r\n\r\n            // 检查文件类型是否支持\r\n            if (!this.isFileTypeSupported(document)) {\r\n                this.logger.debug(`文件类型不支持: ${document.languageId}, 文件: ${document.fileName}`);\r\n                return null;\r\n            }\r\n\r\n            // 不要在SCM视图中补全\r\n            if (document.uri.scheme === \"vscode-scm\") {\r\n                this.logger.debug('SCM视图中不提供补全');\r\n                return null;\r\n            }\r\n\r\n            // 不要在多光标模式下补全\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (editor && editor.selections.length > 1) {\r\n                this.logger.debug('多光标模式下不提供补全');\r\n                return null;\r\n            }\r\n\r\n            // 创建中止信号\r\n            const completionId = uuidv4();\r\n            const controller = this.createAbortController(completionId);\r\n            const signal = controller.signal;\r\n            this.logger.debug(`创建补全请求: ${completionId}`);\r\n            \r\n            // 如果传入了token，监听取消事件\r\n            if (token) {\r\n                token.onCancellationRequested(() => controller.abort());\r\n            }\r\n\r\n            // 更新状态栏\r\n            this.statusBarItem.text = \"$(sync~spin) 生成补全...\";\r\n            this.statusBarItem.tooltip = \"正在生成代码补全\";\r\n            this.statusBarItem.show();\r\n\r\n            const startTime = Date.now();\r\n\r\n            // 收集上下文\r\n            const contextData = this.collectContext(document, position);\r\n            this.logger.debug(`收集上下文完成，前缀长度: ${contextData.prefix.length}, 后缀长度: ${contextData.suffix.length}`);\r\n            \r\n            // 从缓存中查找\r\n            let completion: string | null = null;\r\n            let cacheHit = false;\r\n            \r\n            if (this.configManager.isCacheEnabled()) {\r\n                this.logger.debug('缓存已启用，尝试从缓存获取补全');\r\n                try {\r\n                    const cachedCompletion = await this.cacheManager.get(contextData.prefix);\r\n                    if (cachedCompletion) {\r\n                        completion = cachedCompletion;\r\n                        cacheHit = true;\r\n                        contextData.cacheHit = true;  // 添加缓存命中标记到上下文\r\n                        this.logger.debug('使用缓存的补全结果');\r\n                    } else {\r\n                        this.logger.debug('缓存未命中');\r\n                    }\r\n                } catch (error) {\r\n                    this.logger.debug(`从缓存获取补全时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n                }\r\n            } else {\r\n                this.logger.debug('缓存已禁用');\r\n            }\r\n\r\n            // 如果缓存中没有，则请求模型生成\r\n            if (!completion) {\r\n                try {\r\n                    // 准备提示\r\n                    const prompt = this.preparePrompt(contextData);\r\n                    this.logger.debug(`准备提示完成，提示长度: ${prompt.length}`);\r\n                    \r\n                    // 获取API配置\r\n                    const modelName = this.configManager.getModelName();\r\n                    const temperature = this.configManager.getTemperature();\r\n                    const maxTokens = this.configManager.getMaxTokens();\r\n                    this.logger.debug(`API配置: 模型=${modelName}, 温度=${temperature}, 最大token=${maxTokens}`);\r\n                    \r\n                    // 请求模型生成补全\r\n                    this.logger.debug('开始调用模型生成补全');\r\n                    completion = await this.client.generateCompletion(\r\n                        prompt,\r\n                        {\r\n                            temperature: temperature,\r\n                            maxTokens: maxTokens,\r\n                            model: modelName\r\n                        },\r\n                        signal\r\n                    );\r\n                    \r\n                    // 如果请求被中止，返回null\r\n                    if (signal.aborted) {\r\n                        this.logger.debug('补全请求被中止');\r\n                        this.statusBarItem.text = \"$(code) 补全\";\r\n                        this.statusBarItem.tooltip = \"Ollama代码补全\";\r\n                        return null;\r\n                    }\r\n                    \r\n                    if (completion) {\r\n                        this.logger.debug(`模型生成补全成功，原始补全长度: ${completion.length}`);\r\n                    } else {\r\n                        this.logger.debug('模型返回空补全');\r\n                    }\r\n                    \r\n                    // 处理补全结果\r\n                    completion = this.processCompletionResult(completion, contextData);\r\n                    \r\n                    if (completion) {\r\n                        this.logger.debug(`处理后的补全长度: ${completion.length}`);\r\n                    } else {\r\n                        this.logger.debug('处理后补全为空');\r\n                    }\r\n                    \r\n                    // 保存到缓存\r\n                    if (this.configManager.isCacheEnabled() && completion) {\r\n                        this.logger.debug('将补全结果保存到缓存');\r\n                        await this.cacheManager.put(contextData.prefix, completion);\r\n                    }\r\n                } catch (error) {\r\n                    if (signal.aborted) {\r\n                        this.logger.debug('补全请求被中止');\r\n                        this.statusBarItem.text = \"$(code) 补全\";\r\n                        this.statusBarItem.tooltip = \"Ollama代码补全\";\r\n                        return null;\r\n                    }\r\n                    \r\n                    this.logger.error(`生成补全时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n                    this.onError(error);\r\n                    this.statusBarItem.text = \"$(code) 补全\";\r\n                    this.statusBarItem.tooltip = \"Ollama代码补全\";\r\n                    return null;\r\n                }\r\n            } else {\r\n                // 如果是缓存的结果，也需要处理\r\n                completion = this.processCompletionResult(completion, contextData);\r\n            }\r\n\r\n            // 如果没有生成补全内容，返回null\r\n            if (!completion) {\r\n                this.logger.debug('没有生成补全内容，返回null');\r\n                this.statusBarItem.text = \"$(code) 补全\";\r\n                this.statusBarItem.tooltip = \"Ollama代码补全\";\r\n                return null;\r\n            }\r\n\r\n            // 记录结果\r\n            this.lastCompletionResult = completion;\r\n            this.lastContext = contextData.prefix;\r\n            this.lastPosition = position;\r\n            this.logger.debug(`记录补全结果，长度: ${completion.length}`);\r\n\r\n            // 构建补全结果对象\r\n            const outcome = {\r\n                time: Date.now() - startTime,\r\n                completion,\r\n                prefix: contextData.prefix,\r\n                suffix: contextData.suffix,\r\n                prompt: contextData.prompt,\r\n                modelProvider: 'ollama',\r\n                modelName: this.configManager.getModelName(),\r\n                cacheHit,\r\n                filepath: document.uri.toString(),\r\n                numLines: completion.split(\"\\n\").length,\r\n                completionId,\r\n                timestamp: Date.now(),\r\n            };\r\n\r\n            // 标记为已显示\r\n            this.markDisplayed(completionId, outcome);\r\n            this.lastShownCompletion = outcome;\r\n\r\n            // 创建补全项\r\n            const item = new vscode.CompletionItem(\r\n                completion.split('\\n')[0] + '...',\r\n                vscode.CompletionItemKind.Snippet\r\n            );\r\n            \r\n            // 设置插入文本\r\n            item.insertText = completion;\r\n            \r\n            // 设置详细信息\r\n            item.detail = '基于上下文的AI补全';\r\n            \r\n            // 设置文档\r\n            item.documentation = new vscode.MarkdownString(\r\n                '```' + document.languageId + '\\n' + completion + '\\n```'\r\n            );\r\n            \r\n            // 设置排序文本，确保我们的补全项排在前面\r\n            item.sortText = '0';\r\n            \r\n            // 更新状态栏\r\n            this.statusBarItem.text = \"TabAutocomplete\";\r\n            this.statusBarItem.tooltip = \"TabAutocomplete代码补全\";\r\n            this.logger.debug('成功创建补全项，返回补全结果');\r\n\r\n            // 设置预览\r\n            await this.setPreview(completion, position);\r\n\r\n            return [item];\r\n        } catch (error) {\r\n            this.logger.error(`provideCompletionItems方法出错: ${error instanceof Error ? error.message : String(error)}`);\r\n            this.onError(error);\r\n            return null;\r\n        } finally {\r\n            this.statusBarItem.text = \"TabAutocomplete\";\r\n            this.statusBarItem.tooltip = \"TabAutocomplete代码补全\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 准备提示\r\n     */\r\n    private preparePrompt(contextData: any): string {\r\n        // 获取提示模板并替换占位符\r\n        const template = this.configManager.getPromptTemplate();\r\n        return template.replace('${prefix}', contextData.prefix+\"TODO\\n\"+contextData.suffix+\"\\n从TODO这一行开始补全，不要返回上下文中重复的内容\");\r\n    }\r\n\r\n    /**\r\n     * 处理补全结果\r\n     */\r\n    private processCompletionResult(completion: string | null, contextData: any): string | null {\r\n        if (!completion) {\r\n            return null;\r\n        }\r\n        \r\n        // 移除可能的代码块标记\r\n        let processedText = completion;\r\n        if (processedText.startsWith('```')) {\r\n            const langMatch = processedText.match(/^```(\\w+)\\n/);\r\n            if (langMatch) {\r\n                processedText = processedText.substring(langMatch[0].length);\r\n            } else {\r\n                processedText = processedText.substring(3);\r\n            }\r\n        }\r\n        if (processedText.endsWith('```')) {\r\n            processedText = processedText.substring(0, processedText.length - 3);\r\n        }\r\n\r\n        let text = contextData.prefix + contextData.suffix;\r\n        const textlines = text.split('\\n');\r\n        const processedTextlines = processedText.split('\\n');\r\n        const textlinesset = new Set<string>();\r\n        for(const line of textlines){\r\n            textlinesset.add(line.trim());\r\n        }\r\n\r\n        let findnum = 0;\r\n        for(const line of processedTextlines){\r\n            if(textlinesset.has(line.trim())){\r\n                findnum++;\r\n            }\r\n        }\r\n        if(findnum == processedTextlines.length){\r\n            this.logger.debug('跳过完全重复的补全内容');\r\n            return null;\r\n        }\r\n\r\n        return processedText;\r\n    }\r\n\r\n    /**\r\n     * 收集上下文\r\n     */\r\n    private collectContext(\r\n        document: vscode.TextDocument,\r\n        position: vscode.Position\r\n    ): any {\r\n        // 获取当前文件的内容\r\n        const text = document.getText();\r\n        const offset = document.offsetAt(position);\r\n        \r\n        // 获取上下文行数\r\n        const maxContextLines = this.configManager.getMaxContextLines();\r\n\r\n        // 分割前缀和后缀\r\n        const prefix = text.substring(-maxContextLines, offset);\r\n        const suffix = text.substring(offset,maxContextLines);\r\n        \r\n        // 获取导入语句\r\n        const imports = this.getImportStatements(document);\r\n        \r\n        // 构建上下文\r\n        const context = {\r\n            prefix,\r\n            suffix,\r\n            prompt: '',\r\n            imports,\r\n            language: document.languageId,\r\n            lineCount: document.lineCount,\r\n            fileName: document.fileName\r\n        };\r\n        \r\n        return context;\r\n    }\r\n\r\n    /**\r\n     * 获取导入语句\r\n     */\r\n    private getImportStatements(document: vscode.TextDocument): string[] {\r\n        const text = document.getText();\r\n        const lines = text.split('\\n');\r\n        const imports: string[] = [];\r\n        \r\n        // 根据语言类型识别导入语句\r\n        const language = document.languageId;\r\n        \r\n        // 正则表达式匹配不同语言的导入语句\r\n        let importRegex: RegExp;\r\n        \r\n        switch (language) {\r\n            case 'javascript':\r\n            case 'typescript':\r\n            case 'javascriptreact':\r\n            case 'typescriptreact':\r\n                importRegex = /^(import|export)\\s+.*/;\r\n                break;\r\n            case 'python':\r\n                importRegex = /^(import|from)\\s+.*/;\r\n                break;\r\n            case 'java':\r\n            case 'kotlin':\r\n                importRegex = /^import\\s+.*/;\r\n                break;\r\n            case 'go':\r\n                importRegex = /^import\\s+[\\(\\\"].*[\\)\\\"]$/;\r\n                break;\r\n            case 'rust':\r\n                importRegex = /^(use|extern crate)\\s+.*/;\r\n                break;\r\n            case 'c':\r\n            case 'cpp':\r\n            case 'csharp':\r\n                importRegex = /^#include\\s+.*/;\r\n                break;\r\n            case 'php':\r\n                importRegex = /^(use|require|include|require_once|include_once)\\s+.*/;\r\n                break;\r\n            case 'ruby':\r\n                importRegex = /^(require|include|extend|load|autoload)\\s+.*/;\r\n                break;\r\n            default:\r\n                // 默认匹配常见的导入关键字\r\n                importRegex = /^(import|export|require|include|use|from)\\s+.*/;\r\n        }\r\n        \r\n        // 收集导入语句\r\n        for (const line of lines) {\r\n            if (importRegex.test(line.trim())) {\r\n                imports.push(line);\r\n            }\r\n        }\r\n        \r\n        return imports;\r\n    }\r\n\r\n    /**\r\n     * 检查文件类型是否支持\r\n     */\r\n    public isFileTypeSupported(document: vscode.TextDocument): boolean {\r\n        try {\r\n            // 获取文件扩展名和语言ID\r\n            const fileName = document.fileName;\r\n            const fileExt = fileName.substring(fileName.lastIndexOf('.'));\r\n            const languageId = document.languageId;\r\n            \r\n            // 常见编程语言列表 - 如果用户没有明确配置，这些语言默认支持\r\n            const commonLanguages = [\r\n                'javascript', 'typescript', 'python', 'java', 'c', 'cpp', \r\n                'csharp', 'go', 'rust', 'php', 'ruby', 'html', 'css'\r\n            ];\r\n            \r\n            // 记录调试信息\r\n            this.logger.debug(`检查文件类型支持: 扩展名=${fileExt}, 语言ID=${languageId}`);\r\n            \r\n            // 1. 首先检查全局启用状态\r\n            if (!this.configManager.isEnabled()) {\r\n                this.logger.debug('插件全局禁用');\r\n                return false;\r\n            }\r\n            \r\n            // 2. 检查是否在禁用列表中\r\n            try {\r\n                const disabledTypesArr = this.configManager.getDisabledFileTypes();\r\n                const disabledTypes = Array.isArray(disabledTypesArr) ? disabledTypesArr : [];\r\n                \r\n                if (disabledTypes.includes(fileExt) || disabledTypes.includes(languageId)) {\r\n                    this.logger.debug(`文件类型在禁用列表中: ${disabledTypes.join(',')}`);\r\n                    return false;\r\n                }\r\n            } catch (error) {\r\n                this.logger.debug(`获取禁用类型时出错: ${error}`);\r\n            }\r\n            \r\n            // 3. 检查是否在启用列表中\r\n            try {\r\n                const enabledTypesArr = this.configManager.getEnabledFileTypes();\r\n                \r\n                // 确保我们有一个数组\r\n                const enabledTypes = Array.isArray(enabledTypesArr) ? enabledTypesArr : [];\r\n                \r\n                // 记录启用类型\r\n                this.logger.debug(`启用类型: ${JSON.stringify(enabledTypes)}`);\r\n                \r\n                // 如果启用了所有类型\r\n                if (enabledTypes.includes('*') || enabledTypes.includes('all')) {\r\n                    this.logger.debug('支持所有文件类型');\r\n                    return true;\r\n                }\r\n                \r\n                // 检查扩展名或语言ID是否明确启用\r\n                if (enabledTypes.includes(fileExt) || enabledTypes.includes(languageId)) {\r\n                    this.logger.debug(`文件类型明确启用: ${fileExt} 或 ${languageId}`);\r\n                    return true;\r\n                }\r\n                \r\n                // 如果是常见编程语言，但没有明确禁用，则支持\r\n                if (commonLanguages.includes(languageId)) {\r\n                    this.logger.debug(`常见编程语言自动支持: ${languageId}`);\r\n                    return true;\r\n                }\r\n            } catch (error) {\r\n                this.logger.debug(`获取启用类型时出错: ${error}`);\r\n                \r\n                // 如果出错，默认支持常见编程语言\r\n                if (commonLanguages.includes(languageId)) {\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n            this.logger.debug(`文件类型不支持: ${languageId}, ${fileExt}`);\r\n            return false;\r\n        } catch (error) {\r\n            this.logger.error(`检查文件类型支持时出错: ${error}`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查是否已注册\r\n     */\r\n    public isRegistered(): boolean {\r\n        return this.isRegisteredFlag;\r\n    }\r\n\r\n    /**\r\n     * 设置注册状态\r\n     */\r\n    public setRegistered(value: boolean): void {\r\n        this.isRegisteredFlag = value;\r\n    }\r\n\r\n    /**\r\n     * 释放资源\r\n     */\r\n    public dispose(): void {\r\n        this.cancel();\r\n        this.logger.debug('CompletionProvider 已释放');\r\n    }\r\n\r\n    /**\r\n     * 设置最后使用的装饰器\r\n     */\r\n    public setLastDecorator(decorator: vscode.TextEditorDecorationType): void {\r\n        // 如果已经有装饰器，先清除它\r\n        this.clearPreview();\r\n        this.lastDecorator = decorator;\r\n    }\r\n\r\n    /**\r\n     * 设置最后的插入文本\r\n     */\r\n    public setLastInsertText(text: string): void {\r\n        this.lastInsertText = text;\r\n    }\r\n\r\n    /**\r\n     * 设置最后的位置\r\n     */\r\n    public setLastPosition(position: vscode.Position): void {\r\n        this.lastPosition = position;\r\n    }\r\n\r\n    /**\r\n     * 设置最后的预览位置\r\n     */\r\n    public setLastPreviewPosition(position: vscode.Position | null): void {\r\n        this.lastPreviewPosition = position;\r\n    }\r\n\r\n    /**\r\n     * 获取最后的插入文本\r\n     */\r\n    public getLastInsertText(): string | null {\r\n        return this.lastInsertText;\r\n    }\r\n\r\n    /**\r\n     * 获取最后的位置\r\n     */\r\n    public getLastPosition(): vscode.Position | null {\r\n        return this.lastPosition;\r\n    }\r\n\r\n    /**\r\n     * 检查是否有活动的预览\r\n     */\r\n    public hasActivePreview(): boolean {\r\n        // 检查所有必要的预览状态\r\n        const hasDecorator = this.lastDecorator !== null;\r\n        const hasInsertText = this.lastInsertText !== null && this.lastInsertText.length > 0;\r\n        const hasPosition = this.lastPosition !== null;\r\n        const hasPreviewPosition = this.lastPreviewPosition !== null;\r\n        \r\n        // 确保编辑器中的装饰器仍然存在\r\n        const editor = vscode.window.activeTextEditor;\r\n        \r\n        // 所有条件都必须满足才认为有活动预览\r\n        return hasDecorator && hasInsertText && hasPosition && hasPreviewPosition && editor !== undefined;\r\n    }\r\n\r\n    /**\r\n     * 清除预览\r\n     */\r\n    public async clearPreview(): Promise<void> {\r\n        if(this.lastDecorator == null){\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const editor = vscode.window.activeTextEditor;\r\n            \r\n            // 先清除装饰器\r\n            if (this.lastDecorator) {\r\n                this.lastDecorator.dispose();\r\n                this.lastDecorator = null;\r\n            }\r\n            \r\n            // 如果有插入的内容，需要删除它\r\n            if (this.lastInsertText && editor && this.originalPosition) {                \r\n                const lines = this.lastInsertText.split('\\n');\r\n                const endPosition = new vscode.Position(\r\n                    this.originalPosition.line + lines.length - 1,\r\n                    lines[lines.length - 1].length + (lines.length === 1 ? this.originalPosition.character : 0)\r\n                );\r\n                \r\n                await editor.edit(editBuilder => {\r\n                    const range = new vscode.Range(this.originalPosition, endPosition);\r\n                    editBuilder.delete(range);\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.logger.error('清除预览时出错', error);\r\n        }\r\n\r\n        this.lastDecorator = null;\r\n        this.lastInsertText = null;\r\n        this.lastPreviewPosition = null;\r\n        this.lastPosition = null;\r\n        this.originalPosition = null;\r\n        //this.lastShownCompletion = null;\r\n    }\r\n\r\n    /**\r\n     * 设置预览\r\n     */\r\n    public async setPreview(text: string, position: vscode.Position): Promise<void> {\r\n        try {\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (!editor) {\r\n                return;\r\n            }\r\n\r\n            // 确保完全清除之前的预览\r\n            await this.clearPreview();\r\n            \r\n            // 等待一下确保清除操作完成\r\n            await new Promise(resolve => setTimeout(resolve, 50));\r\n            \r\n            // 将文本分割成行\r\n            const lines = text.split('\\n');\r\n\r\n            // 创建新的装饰器，使插入的内容看起来像预览\r\n            this.lastDecorator = vscode.window.createTextEditorDecorationType({\r\n                opacity: '0.6'\r\n            });\r\n\r\n            // 直接将补全内容插入到文档中\r\n            await editor.edit(editBuilder => {\r\n                editBuilder.insert(position, text);\r\n            });\r\n\r\n            // 计算装饰范围\r\n            const endPosition = new vscode.Position(\r\n                position.line + lines.length - 1,\r\n                lines[lines.length - 1].length + (lines.length === 1 ? position.character : 0)\r\n            );\r\n            const range = new vscode.Range(position, endPosition);\r\n\r\n            // 应用装饰器\r\n            editor.setDecorations(this.lastDecorator, [{ range }]);\r\n\r\n            // 保存状态\r\n            this.lastInsertText = text;\r\n            this.lastPosition = position;\r\n            this.lastPreviewPosition = position;\r\n            this.originalPosition = position;\r\n            \r\n            this.logger.debug(`预览已设置，直接插入了${lines.length}行内容`);\r\n        } catch (error) {\r\n            this.logger.error('设置预览时出错', error);\r\n            await this.clearPreview();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取最后使用的装饰器\r\n     */\r\n    public getLastDecorator(): vscode.TextEditorDecorationType | null {\r\n        return this.lastDecorator;\r\n    }\r\n\r\n    /**\r\n     * 获取最后的预览位置\r\n     */\r\n    public getLastPreviewPosition(): vscode.Position | null {\r\n        return this.lastPreviewPosition;\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport LRUCache from 'lru-cache';\r\nimport { Logger } from '../utils/logger';\r\nimport { calculateLevenshteinDistance } from '../utils/utils';\r\n\r\n/**\r\n * 代码片段接口\r\n */\r\ninterface CodeSnippet {\r\n    id: string;              // 唯一标识符\r\n    code: string;            // 代码内容\r\n    language: string;        // 编程语言\r\n    timestamp: number;       // 创建时间戳\r\n    context: string;         // 上下文信息（如函数名、类名）\r\n    filePath: string;        // 文件路径\r\n    metadata: {              // 元数据\r\n        tags: string[];      // 关键词标签\r\n        frequency: number;   // 使用频率\r\n    };\r\n}\r\n\r\n/**\r\n * 缓存管理器\r\n * 负责存储和检索用户最近的代码片段，用于提高补全的相关性\r\n */\r\nexport class CacheManager {\r\n    private static readonly CACHE_KEY = 'ollamaCodeCompletionCache';\r\n    private codeSnippets: CodeSnippet[] = [];\r\n    private lruCache: LRUCache<string, CodeSnippet>;\r\n    private logger: Logger;\r\n    \r\n    constructor(\r\n        private storage: vscode.Memento, \r\n        private configManager: ConfigManager\r\n    ) {\r\n        this.logger = Logger.getInstance();\r\n        \r\n        // 初始化LRU缓存\r\n        this.lruCache = new LRUCache<string, CodeSnippet>({\r\n            max: this.configManager.getMaxSnippets(),\r\n            maxAge: this.configManager.getRetentionPeriodHours() * 60 * 60 * 1000, // 转换为毫秒\r\n        });\r\n        \r\n        this.logger.debug(`初始化缓存管理器, 最大条目数: ${this.configManager.getMaxSnippets()}, 保留时间: ${this.configManager.getRetentionPeriodHours()}小时`);\r\n        \r\n        // 从存储中加载缓存\r\n        this.loadCache();\r\n    }\r\n    \r\n    /**\r\n     * 从存储中加载缓存\r\n     */\r\n    private loadCache(): void {\r\n        this.logger.debug('从存储中加载缓存');\r\n        const cachedData = this.storage.get<CodeSnippet[]>(CacheManager.CACHE_KEY, []);\r\n        \r\n        if (cachedData && cachedData.length) {\r\n            this.codeSnippets = cachedData;\r\n            \r\n            // 将缓存的代码片段添加到LRU缓存\r\n            for (const snippet of this.codeSnippets) {\r\n                this.lruCache.set(snippet.id, snippet);\r\n            }\r\n            \r\n            this.logger.debug(`已加载 ${this.codeSnippets.length} 个缓存的代码片段`);\r\n            \r\n            // 清理过期的缓存\r\n            this.cleanExpiredCache();\r\n        } else {\r\n            this.logger.debug('没有找到缓存的代码片段');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 清理过期的缓存\r\n     */\r\n    private cleanExpiredCache(): void {\r\n        this.logger.debug('清理过期的缓存片段');\r\n        const now = Date.now();\r\n        const retentionPeriod = this.configManager.getRetentionPeriodHours() * 60 * 60 * 1000; // 转换为毫秒\r\n        \r\n        let expiredCount = 0;\r\n        this.codeSnippets = this.codeSnippets.filter(snippet => {\r\n            const isExpired = (now - snippet.timestamp) > retentionPeriod;\r\n            if (isExpired) {\r\n                expiredCount++;\r\n                // 从LRU缓存中移除\r\n                this.lruCache.del(snippet.id);\r\n            }\r\n            return !isExpired;\r\n        });\r\n        \r\n        if (expiredCount > 0) {\r\n            this.logger.debug(`已清理 ${expiredCount} 个过期的缓存片段`);\r\n            this.saveCache();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 保存缓存到存储\r\n     */\r\n    private saveCache(): void {\r\n        this.logger.debug(`保存 ${this.codeSnippets.length} 个代码片段到存储`);\r\n        this.storage.update(CacheManager.CACHE_KEY, this.codeSnippets);\r\n    }\r\n    \r\n    /**\r\n     * 缓存文档变化\r\n     * 当文档变化时调用此方法，提取并缓存有意义的代码片段\r\n     */\r\n    public cacheDocumentChanges(event: vscode.TextDocumentChangeEvent): void {\r\n        if (!this.configManager.isCacheEnabled()) {\r\n            return;\r\n        }\r\n        \r\n        // 检查变更是否有意义\r\n        if (!this.isSignificantChange(event.contentChanges)) {\r\n            return;\r\n        }\r\n        \r\n        this.logger.debug(`处理文档变更: ${event.document.fileName}`);\r\n        \r\n        try {\r\n            for (const change of event.contentChanges) {\r\n                const range = change.range;\r\n                \r\n                // 获取更改行的上下文\r\n                const context = this.extractContext(event.document, range);\r\n                \r\n                // 如果上下文为空，跳过\r\n                if (!context) {\r\n                    continue;\r\n                }\r\n                \r\n                // 提取标签（关键词）\r\n                const language = event.document.languageId;\r\n                const code = change.text;\r\n                \r\n                if (code.length < 10) {\r\n                    this.logger.debug('代码片段过短，忽略');\r\n                    continue; // 忽略过短的代码片段\r\n                }\r\n                \r\n                const tags = this.extractTags(code, context, language);\r\n                \r\n                if (tags.length === 0) {\r\n                    this.logger.debug('无法提取标签，忽略代码片段');\r\n                    continue; // 如果没有提取到标签，忽略\r\n                }\r\n                \r\n                // 创建代码片段对象\r\n                const snippet: CodeSnippet = {\r\n                    id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n                    code,\r\n                    language,\r\n                    timestamp: Date.now(),\r\n                    context,\r\n                    filePath: event.document.fileName,\r\n                    metadata: {\r\n                        tags,\r\n                        frequency: 1\r\n                    }\r\n                };\r\n                \r\n                // 添加到缓存\r\n                this.addSnippet(snippet);\r\n                \r\n                this.logger.debug(`缓存了新的代码片段，ID: ${snippet.id}, 语言: ${language}, 标签: ${tags.join(', ')}`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`缓存文档变更时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 判断是否为有意义的变更\r\n     */\r\n    private isSignificantChange(changes: readonly vscode.TextDocumentContentChangeEvent[]): boolean {\r\n        // 检查是否有足够长度的文本变更\r\n        for (const change of changes) {\r\n            // 忽略仅包含空格、换行或单个字符的变更\r\n            if (change.text.trim().length > 3) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * 提取变更的上下文信息\r\n     */\r\n    private extractContext(document: vscode.TextDocument, range: vscode.Range): string {\r\n        // 尝试获取包含变更的更大范围（如函数、类定义）\r\n        let contextStart = Math.max(0, range.start.line - 10);\r\n        let contextEnd = Math.min(document.lineCount - 1, range.end.line + 5);\r\n        \r\n        // 获取上下文文本\r\n        const contextRange = new vscode.Range(\r\n            new vscode.Position(contextStart, 0),\r\n            new vscode.Position(contextEnd, document.lineAt(contextEnd).text.length)\r\n        );\r\n        \r\n        return document.getText(contextRange);\r\n    }\r\n    \r\n    /**\r\n     * 提取代码中的关键词标签\r\n     */\r\n    private extractTags(code: string, context: string, language: string): string[] {\r\n        const tags: string[] = [];\r\n        \r\n        // 根据语言提取不同的关键词\r\n        switch (language) {\r\n            case 'javascript':\r\n            case 'typescript':\r\n                this.extractJavaScriptTags(code, context, tags);\r\n                break;\r\n            case 'python':\r\n                this.extractPythonTags(code, context, tags);\r\n                break;\r\n            // 可以添加更多语言的支持\r\n            default:\r\n                this.extractGenericTags(code, context, tags);\r\n                break;\r\n        }\r\n        \r\n        this.logger.debug(`提取的标签: ${tags.join(', ')}`);\r\n        return tags;\r\n    }\r\n    \r\n    /**\r\n     * 从JavaScript/TypeScript代码中提取标签\r\n     */\r\n    private extractJavaScriptTags(_code: string, context: string, tags: string[]): void {\r\n        // 提取函数名和类名\r\n        const functionMatch = /function\\s+([a-zA-Z0-9_]+)\\s*\\(/g;\r\n        const classMatch = /class\\s+([a-zA-Z0-9_]+)\\s*/g;\r\n        const constMatch = /const\\s+([a-zA-Z0-9_]+)\\s*=/g;\r\n        const letMatch = /let\\s+([a-zA-Z0-9_]+)\\s*=/g;\r\n        \r\n        let match;\r\n        \r\n        while ((match = functionMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n        \r\n        while ((match = classMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n        \r\n        while ((match = constMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n        \r\n        while ((match = letMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 从Python代码中提取标签\r\n     */\r\n    private extractPythonTags(_code: string, context: string, tags: string[]): void {\r\n        // 提取函数名和类名\r\n        const functionMatch = /def\\s+([a-zA-Z0-9_]+)\\s*\\(/g;\r\n        const classMatch = /class\\s+([a-zA-Z0-9_]+)\\s*\\(?/g;\r\n        \r\n        let match;\r\n        \r\n        while ((match = functionMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n        \r\n        while ((match = classMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 从通用代码中提取标签\r\n     */\r\n    private extractGenericTags(_code: string, context: string, tags: string[]): void {\r\n        // 提取所有可能的标识符\r\n        const identifierMatch = /\\b([a-zA-Z][a-zA-Z0-9_]{2,})\\b/g;\r\n        \r\n        let match;\r\n        const identifiers = new Set<string>();\r\n        \r\n        while ((match = identifierMatch.exec(context)) !== null) {\r\n            if (match[1] && !identifiers.has(match[1])) {\r\n                identifiers.add(match[1]);\r\n                \r\n                // 只将重要标识符（长度大于3的非关键字）添加为标签\r\n                if (match[1].length > 3 && !this.isCommonKeyword(match[1])) {\r\n                    tags.push(match[1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 检查是否为常见的编程关键字\r\n     */\r\n    private isCommonKeyword(word: string): boolean {\r\n        const commonKeywords = [\r\n            'function', 'class', 'const', 'let', 'var', 'if', 'else', 'for', 'while', \r\n            'return', 'import', 'export', 'from', 'async', 'await', 'try', 'catch',\r\n            'switch', 'case', 'break', 'default', 'continue', 'new', 'this', 'super',\r\n            'extends', 'implements', 'interface', 'typeof', 'instanceof'\r\n        ];\r\n        \r\n        return commonKeywords.includes(word.toLowerCase());\r\n    }\r\n    \r\n    /**\r\n     * 将代码片段添加到缓存\r\n     */\r\n    public addSnippet(snippet: CodeSnippet): void {\r\n        // 检查是否已有类似片段\r\n        const similarSnippet = this.findSimilarSnippet(snippet);\r\n        \r\n        if (similarSnippet) {\r\n            // 更新已有片段\r\n            this.logger.debug(`找到类似的片段，更新而不是添加新的`);\r\n            similarSnippet.timestamp = Date.now();\r\n            similarSnippet.metadata.frequency++;\r\n            \r\n            // 合并标签\r\n            for (const tag of snippet.metadata.tags) {\r\n                if (!similarSnippet.metadata.tags.includes(tag)) {\r\n                    similarSnippet.metadata.tags.push(tag);\r\n                }\r\n            }\r\n        } else {\r\n            // 添加新片段\r\n            this.codeSnippets.push(snippet);\r\n            this.lruCache.set(snippet.id, snippet);\r\n            \r\n            // 如果缓存已满，LRU缓存会自动删除最旧的项\r\n            this.logger.debug(`添加新片段到缓存，当前缓存大小: ${this.codeSnippets.length}`);\r\n        }\r\n        \r\n        // 保存到持久化存储\r\n        this.saveCache();\r\n    }\r\n    \r\n    /**\r\n     * 寻找相似的代码片段\r\n     */\r\n    private findSimilarSnippet(snippet: CodeSnippet): CodeSnippet | undefined {\r\n        for (const existing of this.codeSnippets) {\r\n            // 如果语言不同，跳过\r\n            if (existing.language !== snippet.language) {\r\n                continue;\r\n            }\r\n            \r\n            // 计算相似度\r\n            const similarity = this.calculateSimilarity(existing.code, snippet.code);\r\n            if (similarity > 0.8) { // 80%相似度阈值\r\n                return existing;\r\n            }\r\n        }\r\n        \r\n        return undefined;\r\n    }\r\n    \r\n    /**\r\n     * 计算两段代码的相似度 (0-1)\r\n     */\r\n    private calculateSimilarity(code1: string, code2: string): number {\r\n        // 简化的相似度计算，基于最长公共子序列\r\n        const distance = calculateLevenshteinDistance(code1, code2);\r\n        const maxLength = Math.max(code1.length, code2.length);\r\n        \r\n        return maxLength === 0 ? 1 : 1 - (distance / maxLength);\r\n    }\r\n    \r\n    /**\r\n     * 查找与当前上下文相关的代码\r\n     */\r\n    public findRelevantCode(\r\n        currentCode: string, \r\n        language: string, \r\n        maxResults: number = 3\r\n    ): string[] {\r\n        this.logger.debug(`查找相关代码，语言: ${language}`);\r\n        const startTime = Date.now();\r\n        \r\n        if (this.codeSnippets.length === 0) {\r\n            this.logger.debug('缓存为空，没有找到相关代码');\r\n            return [];\r\n        }\r\n        \r\n        // 提取当前代码的标签\r\n        const context = currentCode; // 使用当前代码作为上下文\r\n        const tags = this.extractTags(currentCode, context, language);\r\n        \r\n        if (tags.length === 0) {\r\n            this.logger.debug('无法从当前代码提取标签，无法找到相关代码');\r\n            return [];\r\n        }\r\n        \r\n        this.logger.debug(`当前代码标签: ${tags.join(', ')}`);\r\n        \r\n        // 对所有缓存的代码片段评分\r\n        const scoredSnippets = this.codeSnippets\r\n            .filter(s => s.language === language) // 仅考虑相同语言的片段\r\n            .map(snippet => {\r\n                const score = this.calculateRelevanceScore(snippet, tags, currentCode);\r\n                return { snippet, score };\r\n            })\r\n            .filter(item => item.score > 0) // 过滤掉不相关的片段\r\n            .sort((a, b) => b.score - a.score) // 按评分降序排序\r\n            .slice(0, maxResults); // 取前N个结果\r\n        \r\n        const result = scoredSnippets.map(item => item.snippet.code);\r\n        \r\n        const duration = Date.now() - startTime;\r\n        this.logger.debug(`找到 ${result.length} 个相关代码片段，耗时: ${duration}ms`);\r\n        if (result.length > 0) {\r\n            this.logger.debug(`最佳匹配得分: ${scoredSnippets[0].score.toFixed(2)}`);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * 计算代码片段与当前上下文的相关性评分\r\n     */\r\n    private calculateRelevanceScore(\r\n        snippet: CodeSnippet,\r\n        currentTags: string[],\r\n        currentCode: string\r\n    ): number {\r\n        let score = 0;\r\n        \r\n        // 1. 标签匹配度\r\n        for (const tag of currentTags) {\r\n            if (snippet.metadata.tags.includes(tag)) {\r\n                score += 0.2; // 每个匹配标签增加权重\r\n            }\r\n        }\r\n        \r\n        // 2. 代码相似度\r\n        const similarity = this.calculateSimilarity(snippet.code, currentCode);\r\n        score += similarity * 0.3;\r\n        \r\n        // 3. 使用频率\r\n        score += Math.min(snippet.metadata.frequency / 10, 0.3); // 最多加0.3分\r\n        \r\n        // 4. 时间衰减因子 (最近的代码片段得分更高)\r\n        const ageInHours = (Date.now() - snippet.timestamp) / (1000 * 60 * 60);\r\n        const recencyScore = Math.max(0, 0.2 - (ageInHours / 240) * 0.2); // 10天后降为0\r\n        score += recencyScore;\r\n        \r\n        return score;\r\n    }\r\n    \r\n    /**\r\n     * 清空缓存\r\n     */\r\n    public clearCache(): void {\r\n        this.logger.debug('清空所有缓存的代码片段');\r\n        this.codeSnippets = [];\r\n        this.lruCache.reset();\r\n        this.saveCache();\r\n    }\r\n    \r\n    /**\r\n     * 获取缓存的统计信息\r\n     */\r\n    public getStats(): { snippetCount: number; languageStats: Record<string, number> } {\r\n        const languageStats: Record<string, number> = {};\r\n        \r\n        for (const snippet of this.codeSnippets) {\r\n            if (!languageStats[snippet.language]) {\r\n                languageStats[snippet.language] = 0;\r\n            }\r\n            languageStats[snippet.language]++;\r\n        }\r\n        \r\n        return {\r\n            snippetCount: this.codeSnippets.length,\r\n            languageStats\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取缓存的补全内容\r\n     * @param prefix 前缀文本\r\n     * @returns 缓存的补全内容，如果没有找到则返回undefined\r\n     */\r\n    public async get(prefix: string): Promise<string | undefined> {\r\n        if (!this.configManager.isCacheEnabled()) {\r\n            return undefined;\r\n        }\r\n\r\n        this.logger.debug(`尝试从缓存中获取补全内容，前缀长度: ${prefix.length}`);\r\n        \r\n        // 使用前缀的哈希作为键\r\n        const key = this.hashString(prefix);\r\n        \r\n        // 从LRU缓存中获取\r\n        const cachedSnippet = this.lruCache.get(key);\r\n        \r\n        if (cachedSnippet) {\r\n            this.logger.debug(`缓存命中，返回缓存的补全内容`);\r\n            return cachedSnippet.code;\r\n        }\r\n        \r\n        this.logger.debug(`缓存未命中`);\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 将补全内容存储到缓存中\r\n     * @param prefix 前缀文本\r\n     * @param completion 补全内容\r\n     */\r\n    public async put(prefix: string, completion: string): Promise<void> {\r\n        if (!this.configManager.isCacheEnabled() || !completion || completion.trim().length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.logger.debug(`将补全内容存储到缓存中，前缀长度: ${prefix.length}, 补全长度: ${completion.length}`);\r\n        \r\n        // 使用前缀的哈希作为键\r\n        const key = this.hashString(prefix);\r\n        \r\n        // 创建代码片段对象\r\n        const snippet: CodeSnippet = {\r\n            id: key,\r\n            code: completion,\r\n            language: 'unknown', // 这里可以传入实际的语言\r\n            timestamp: Date.now(),\r\n            context: prefix.slice(-200), // 存储前缀的最后200个字符作为上下文\r\n            filePath: '',\r\n            metadata: {\r\n                tags: [],\r\n                frequency: 1\r\n            }\r\n        };\r\n        \r\n        // 添加到LRU缓存\r\n        this.lruCache.set(key, snippet);\r\n        \r\n        // 添加到代码片段列表\r\n        const existingIndex = this.codeSnippets.findIndex(s => s.id === key);\r\n        if (existingIndex >= 0) {\r\n            this.codeSnippets[existingIndex] = snippet;\r\n        } else {\r\n            this.codeSnippets.push(snippet);\r\n        }\r\n        \r\n        // 保存缓存\r\n        this.saveCache();\r\n    }\r\n\r\n    /**\r\n     * 计算字符串的哈希值\r\n     * @param str 要哈希的字符串\r\n     * @returns 哈希字符串\r\n     */\r\n    private hashString(str: string): string {\r\n        let hash = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            const char = str.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash; // Convert to 32bit integer\r\n        }\r\n        return `hash_${Math.abs(hash).toString(16)}`;\r\n    }\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nfunction md5(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    }\n    else if (typeof bytes === 'string') {\n        bytes = Buffer.from(bytes, 'utf8');\n    }\n    return (0, crypto_1.createHash)('md5').update(bytes).digest();\n}\nexports.default = md5;\n","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\n\r\n/**\r\n * 状态栏管理器\r\n * 在VSCode状态栏显示插件状态和提供快速操作\r\n */\r\nexport class StatusBarManager {\r\n    private statusBarItem: vscode.StatusBarItem;\r\n    \r\n    constructor(private configManager: ConfigManager) {\r\n        // 创建状态栏项\r\n        this.statusBarItem = vscode.window.createStatusBarItem(\r\n            vscode.StatusBarAlignment.Right,\r\n            100 // 优先级\r\n        );\r\n        \r\n        // 设置命令\r\n        this.statusBarItem.command = 'ollamaCodeCompletion.toggleEnabled';\r\n        \r\n        // 初始化显示\r\n        this.updateStatus();\r\n        \r\n        // 显示状态栏\r\n        this.statusBarItem.show();\r\n    }\r\n    \r\n    /**\r\n     * 更新状态栏显示\r\n     */\r\n    public updateStatus(): void {\r\n        const isEnabled = this.configManager.isEnabled();\r\n        this.statusBarItem.text = isEnabled ? '$(sparkle) TabAutoComplete' : '$(stop) TabAutoComplete';\r\n        this.statusBarItem.tooltip = isEnabled ? 'TabAutoComplete已启用 (点击禁用)' : 'TabAutoComplete已禁用 (点击启用)';\r\n    }\r\n    \r\n    /**\r\n     * 获取状态栏项\r\n     * @returns 状态栏项对象\r\n     */\r\n    public getStatusBarItem(): vscode.StatusBarItem {\r\n        return this.statusBarItem;\r\n    }\r\n    \r\n    /**\r\n     * 显示临时信息\r\n     * @param message 要显示的消息\r\n     * @param timeout 显示时间（毫秒）\r\n     */\r\n    public showTemporaryMessage(message: string, timeout: number = 3000): void {\r\n        const originalText = this.statusBarItem.text;\r\n        const originalTooltip = this.statusBarItem.tooltip;\r\n        const originalBackground = this.statusBarItem.backgroundColor;\r\n        \r\n        // 显示临时消息\r\n        this.statusBarItem.text = `$(info) ${message}`;\r\n        this.statusBarItem.tooltip = message;\r\n        \r\n        // 一段时间后恢复原状态\r\n        setTimeout(() => {\r\n            this.statusBarItem.text = originalText;\r\n            this.statusBarItem.tooltip = originalTooltip;\r\n            this.statusBarItem.backgroundColor = originalBackground;\r\n        }, timeout);\r\n    }\r\n    \r\n    /**\r\n     * 显示请求中的状态\r\n     * @param show 是否显示请求中状态\r\n     */\r\n    public showRequestInProgress(show: boolean): void {\r\n        if (show) {\r\n            this.statusBarItem.text = `$(sync~spin) TabAutoComplete 请求中...`;\r\n            this.statusBarItem.tooltip = '正在发送请求';\r\n        } else {\r\n            this.updateStatus(); // 恢复正常状态\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 显示错误状态\r\n     * @param errorMessage 错误消息\r\n     */\r\n    public showError(errorMessage: string): void {\r\n        this.statusBarItem.text = `$(error) TabAutoComplete 错误`;\r\n        this.statusBarItem.tooltip = errorMessage;\r\n        this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\r\n        \r\n        // 5秒后恢复正常状态\r\n        setTimeout(() => {\r\n            this.updateStatus();\r\n        }, 5000);\r\n    }\r\n    \r\n    /**\r\n     * 切换启用状态\r\n     */\r\n    public async toggleEnabled(): Promise<void> {\r\n        const isCurrentlyEnabled = this.configManager.isEnabled();\r\n        await this.configManager.setEnabled(!isCurrentlyEnabled);\r\n        this.updateStatus();\r\n        \r\n        // 显示通知\r\n        vscode.window.showInformationMessage(\r\n            isCurrentlyEnabled \r\n                ? 'TabAutoComplete已禁用' \r\n                : 'TabAutoComplete已启用'\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * 释放资源\r\n     */\r\n    public dispose(): void {\r\n        this.statusBarItem.dispose();\r\n    }\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateV1State = void 0;\nconst rng_js_1 = require(\"./rng.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nconst _state = {};\nfunction v1(options, buf, offset) {\n    let bytes;\n    const isV6 = options?._v6 ?? false;\n    if (options) {\n        const optionsKeys = Object.keys(options);\n        if (optionsKeys.length === 1 && optionsKeys[0] === '_v6') {\n            options = undefined;\n        }\n    }\n    if (options) {\n        bytes = v1Bytes(options.random ?? options.rng?.() ?? (0, rng_js_1.default)(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);\n    }\n    else {\n        const now = Date.now();\n        const rnds = (0, rng_js_1.default)();\n        updateV1State(_state, now, rnds);\n        bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? undefined : _state.clockseq, isV6 ? undefined : _state.node, buf, offset);\n    }\n    return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);\n}\nfunction updateV1State(state, now, rnds) {\n    state.msecs ??= -Infinity;\n    state.nsecs ??= 0;\n    if (now === state.msecs) {\n        state.nsecs++;\n        if (state.nsecs >= 10000) {\n            state.node = undefined;\n            state.nsecs = 0;\n        }\n    }\n    else if (now > state.msecs) {\n        state.nsecs = 0;\n    }\n    else if (now < state.msecs) {\n        state.node = undefined;\n    }\n    if (!state.node) {\n        state.node = rnds.slice(10, 16);\n        state.node[0] |= 0x01;\n        state.clockseq = ((rnds[8] << 8) | rnds[9]) & 0x3fff;\n    }\n    state.msecs = now;\n    return state;\n}\nexports.updateV1State = updateV1State;\nfunction v1Bytes(rnds, msecs, nsecs, clockseq, node, buf, offset = 0) {\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    if (!buf) {\n        buf = new Uint8Array(16);\n        offset = 0;\n    }\n    else {\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n    }\n    msecs ??= Date.now();\n    nsecs ??= 0;\n    clockseq ??= ((rnds[8] << 8) | rnds[9]) & 0x3fff;\n    node ??= rnds.slice(10, 16);\n    msecs += 12219292800000;\n    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    buf[offset++] = (tl >>> 24) & 0xff;\n    buf[offset++] = (tl >>> 16) & 0xff;\n    buf[offset++] = (tl >>> 8) & 0xff;\n    buf[offset++] = tl & 0xff;\n    const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;\n    buf[offset++] = (tmh >>> 8) & 0xff;\n    buf[offset++] = tmh & 0xff;\n    buf[offset++] = ((tmh >>> 24) & 0xf) | 0x10;\n    buf[offset++] = (tmh >>> 16) & 0xff;\n    buf[offset++] = (clockseq >>> 8) | 0x80;\n    buf[offset++] = clockseq & 0xff;\n    for (let n = 0; n < 6; ++n) {\n        buf[offset++] = node[n];\n    }\n    return buf;\n}\nexports.default = v1;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.URL = exports.DNS = void 0;\nconst sha1_js_1 = require(\"./sha1.js\");\nconst v35_js_1 = require(\"./v35.js\");\nvar v35_js_2 = require(\"./v35.js\");\nObject.defineProperty(exports, \"DNS\", { enumerable: true, get: function () { return v35_js_2.DNS; } });\nObject.defineProperty(exports, \"URL\", { enumerable: true, get: function () { return v35_js_2.URL; } });\nfunction v5(value, namespace, buf, offset) {\n    return (0, v35_js_1.default)(0x50, sha1_js_1.default, value, namespace, buf, offset);\n}\nv5.DNS = v35_js_1.DNS;\nv5.URL = v35_js_1.URL;\nexports.default = v5;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateV7State = void 0;\nconst rng_js_1 = require(\"./rng.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nconst _state = {};\nfunction v7(options, buf, offset) {\n    let bytes;\n    if (options) {\n        bytes = v7Bytes(options.random ?? options.rng?.() ?? (0, rng_js_1.default)(), options.msecs, options.seq, buf, offset);\n    }\n    else {\n        const now = Date.now();\n        const rnds = (0, rng_js_1.default)();\n        updateV7State(_state, now, rnds);\n        bytes = v7Bytes(rnds, _state.msecs, _state.seq, buf, offset);\n    }\n    return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);\n}\nfunction updateV7State(state, now, rnds) {\n    state.msecs ??= -Infinity;\n    state.seq ??= 0;\n    if (now > state.msecs) {\n        state.seq = (rnds[6] << 23) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];\n        state.msecs = now;\n    }\n    else {\n        state.seq = (state.seq + 1) | 0;\n        if (state.seq === 0) {\n            state.msecs++;\n        }\n    }\n    return state;\n}\nexports.updateV7State = updateV7State;\nfunction v7Bytes(rnds, msecs, seq, buf, offset = 0) {\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    if (!buf) {\n        buf = new Uint8Array(16);\n        offset = 0;\n    }\n    else {\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n    }\n    msecs ??= Date.now();\n    seq ??= ((rnds[6] * 0x7f) << 24) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];\n    buf[offset++] = (msecs / 0x10000000000) & 0xff;\n    buf[offset++] = (msecs / 0x100000000) & 0xff;\n    buf[offset++] = (msecs / 0x1000000) & 0xff;\n    buf[offset++] = (msecs / 0x10000) & 0xff;\n    buf[offset++] = (msecs / 0x100) & 0xff;\n    buf[offset++] = msecs & 0xff;\n    buf[offset++] = 0x70 | ((seq >>> 28) & 0x0f);\n    buf[offset++] = (seq >>> 20) & 0xff;\n    buf[offset++] = 0x80 | ((seq >>> 14) & 0x3f);\n    buf[offset++] = (seq >>> 6) & 0xff;\n    buf[offset++] = ((seq << 2) & 0xff) | (rnds[10] & 0x03);\n    buf[offset++] = rnds[11];\n    buf[offset++] = rnds[12];\n    buf[offset++] = rnds[13];\n    buf[offset++] = rnds[14];\n    buf[offset++] = rnds[15];\n    return buf;\n}\nexports.default = v7;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_js_1 = require(\"./validate.js\");\nfunction parse(uuid) {\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    let v;\n    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff, (v / 0x100000000) & 0xff, (v >>> 24) & 0xff, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff);\n}\nexports.default = parse;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_js_1 = require(\"./validate.js\");\nfunction version(uuid) {\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    return parseInt(uuid.slice(14, 15), 16);\n}\nexports.default = version;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = '00000000-0000-0000-0000-000000000000';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst native_js_1 = require(\"./native.js\");\nconst rng_js_1 = require(\"./rng.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nfunction v4(options, buf, offset) {\n    if (native_js_1.default.randomUUID && !buf && !options) {\n        return native_js_1.default.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? (0, rng_js_1.default)();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(rnds);\n}\nexports.default = v4;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = 'ffffffff-ffff-ffff-ffff-ffffffffffff';\n","import * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as vscode from 'vscode';\r\nimport { getFileName } from './utils';\r\n\r\n/**\r\n * 日志级别枚举\r\n * 按照标准日志级别从低到高排序：DEBUG < INFO < WARN < ERROR\r\n */\r\nexport enum LogLevel {\r\n    NONE = 0,    // 不输出任何日志\r\n    DEBUG = 1,   // 调试信息\r\n    INFO = 2,    // 一般信息\r\n    WARN = 3,    // 警告信息\r\n    ERROR = 4    // 错误信息\r\n}\r\n\r\n/**\r\n * 日志管理器\r\n * 负责记录和管理日志，支持输出到文件和控制台\r\n */\r\nexport class Logger {\r\n    private static instance: Logger;\r\n    private outputChannel: vscode.OutputChannel;\r\n    private logLevel: LogLevel = LogLevel.NONE;\r\n    private debugEnabled: boolean = false;\r\n\r\n    private constructor() {\r\n        this.outputChannel = vscode.window.createOutputChannel('TabAutoComplete');\r\n    }\r\n\r\n    public static getInstance(): Logger {\r\n        if (!Logger.instance) {\r\n            Logger.instance = new Logger();\r\n        }\r\n        return Logger.instance;\r\n    }\r\n\r\n    public setLogLevel(level: LogLevel): void {\r\n        this.logLevel = level;\r\n        this.log(LogLevel.INFO, `日志级别已设置为: ${LogLevel[level]}`);\r\n    }\r\n\r\n    private shouldLog(level: LogLevel): boolean {\r\n        if (level === LogLevel.DEBUG && this.debugEnabled) {\r\n            return true;\r\n        }\r\n        return this.logLevel !== LogLevel.NONE && level <= this.logLevel;\r\n    }\r\n\r\n    private formatMessage(level: LogLevel, message: string, data?: any): string {\r\n        const timestamp = new Date().toISOString();\r\n        const levelStr = LogLevel[level].padEnd(5);\r\n        let formattedMessage = `[${timestamp}] [${levelStr}] ${message}`;\r\n        \r\n        if (data) {\r\n            if (data instanceof Error) {\r\n                formattedMessage += `\\n    ${data.stack || data.message}`;\r\n            } else if (typeof data === 'object') {\r\n                try {\r\n                    formattedMessage += `\\n    ${JSON.stringify(data, null, 2)}`;\r\n                } catch (e) {\r\n                    formattedMessage += `\\n    [无法序列化的对象]`;\r\n                }\r\n            } else {\r\n                formattedMessage += `\\n    ${data}`;\r\n            }\r\n        }\r\n        \r\n        return formattedMessage;\r\n    }\r\n\r\n    private log(level: LogLevel, message: string, data?: any): void {\r\n        if(level < this.logLevel){return;}\r\n        \r\n        if (this.shouldLog(level)) {\r\n            const formattedMessage = this.formatMessage(level, message, data);\r\n            this.outputChannel.appendLine(formattedMessage);\r\n            \r\n            // 对于警告和错误，同时输出到控制台\r\n            if (level === LogLevel.ERROR) {\r\n                console.error(formattedMessage);\r\n            } else if (level === LogLevel.WARN) {\r\n                console.warn(formattedMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    public debug(message: string, data?: any): void {\r\n        this.log(LogLevel.DEBUG, message, data);\r\n    }\r\n\r\n    public info(message: string, data?: any): void {\r\n        this.log(LogLevel.INFO, message, data);\r\n    }\r\n\r\n    public warn(message: string, data?: any): void {\r\n        this.log(LogLevel.WARN, message, data);\r\n        // 可选：显示警告通知\r\n        if (this.shouldLog(LogLevel.WARN)) {\r\n            vscode.window.showWarningMessage(message);\r\n        }\r\n    }\r\n\r\n    public error(message: string, error?: any): void {\r\n        this.log(LogLevel.ERROR, message, error);\r\n        // 始终显示错误通知\r\n        vscode.window.showErrorMessage(message);\r\n    }\r\n\r\n    public setDebugEnabled(enabled: boolean): void {\r\n        this.debugEnabled = enabled;\r\n        this.log(LogLevel.INFO, `调试模式已${enabled ? '启用' : '禁用'}`);\r\n    }\r\n\r\n    public showOutputChannel(): void {\r\n        this.outputChannel.show();\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.outputChannel.dispose();\r\n    }\r\n} ","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nfunction sha1(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    }\n    else if (typeof bytes === 'string') {\n        bytes = Buffer.from(bytes, 'utf8');\n    }\n    return (0, crypto_1.createHash)('sha1').update(bytes).digest();\n}\nexports.default = sha1;\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = exports.validate = exports.v7 = exports.v6ToV1 = exports.v6 = exports.v5 = exports.v4 = exports.v3 = exports.v1ToV6 = exports.v1 = exports.stringify = exports.parse = exports.NIL = exports.MAX = void 0;\nvar max_js_1 = require(\"./max.js\");\nObject.defineProperty(exports, \"MAX\", { enumerable: true, get: function () { return max_js_1.default; } });\nvar nil_js_1 = require(\"./nil.js\");\nObject.defineProperty(exports, \"NIL\", { enumerable: true, get: function () { return nil_js_1.default; } });\nvar parse_js_1 = require(\"./parse.js\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parse_js_1.default; } });\nvar stringify_js_1 = require(\"./stringify.js\");\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return stringify_js_1.default; } });\nvar v1_js_1 = require(\"./v1.js\");\nObject.defineProperty(exports, \"v1\", { enumerable: true, get: function () { return v1_js_1.default; } });\nvar v1ToV6_js_1 = require(\"./v1ToV6.js\");\nObject.defineProperty(exports, \"v1ToV6\", { enumerable: true, get: function () { return v1ToV6_js_1.default; } });\nvar v3_js_1 = require(\"./v3.js\");\nObject.defineProperty(exports, \"v3\", { enumerable: true, get: function () { return v3_js_1.default; } });\nvar v4_js_1 = require(\"./v4.js\");\nObject.defineProperty(exports, \"v4\", { enumerable: true, get: function () { return v4_js_1.default; } });\nvar v5_js_1 = require(\"./v5.js\");\nObject.defineProperty(exports, \"v5\", { enumerable: true, get: function () { return v5_js_1.default; } });\nvar v6_js_1 = require(\"./v6.js\");\nObject.defineProperty(exports, \"v6\", { enumerable: true, get: function () { return v6_js_1.default; } });\nvar v6ToV1_js_1 = require(\"./v6ToV1.js\");\nObject.defineProperty(exports, \"v6ToV1\", { enumerable: true, get: function () { return v6ToV1_js_1.default; } });\nvar v7_js_1 = require(\"./v7.js\");\nObject.defineProperty(exports, \"v7\", { enumerable: true, get: function () { return v7_js_1.default; } });\nvar validate_js_1 = require(\"./validate.js\");\nObject.defineProperty(exports, \"validate\", { enumerable: true, get: function () { return validate_js_1.default; } });\nvar version_js_1 = require(\"./version.js\");\nObject.defineProperty(exports, \"version\", { enumerable: true, get: function () { return version_js_1.default; } });\n","import axios from 'axios';\r\nimport * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport { Logger } from '../utils/logger';\r\n\r\n/**\r\n * Ollama API客户端\r\n * 负责与本地运行的Ollama服务通信，发送代码补全请求\r\n */\r\nexport class OllamaClient {\r\n    private logger: Logger;\r\n\r\n    constructor(private configManager: ConfigManager) {\r\n        this.logger = Logger.getInstance();\r\n    }\r\n\r\n    /**\r\n     * 获取代码补全\r\n     * @param context 上下文信息\r\n     * @returns 补全结果文本\r\n     */\r\n    public async getCompletion(context: any): Promise<string | null> {\r\n        try {\r\n            const apiUrl = this.configManager.getApiUrl();\r\n            const modelName = this.configManager.getModelName();\r\n            const temperature = this.configManager.getTemperature();\r\n            const maxTokens = this.configManager.getMaxTokens();\r\n            \r\n            this.logger.debug(`使用模型: ${modelName}, 温度: ${temperature}, 最大令牌数: ${maxTokens}`);\r\n            \r\n            // 构建提示词\r\n            const prompt = this.buildPrompt(context);\r\n            \r\n            // 记录完整提示词（仅在调试模式下）\r\n            if (this.configManager.isDebugEnabled()) {\r\n                this.logger.debug(`完整提示词:\\n${prompt}`);\r\n            } else {\r\n                // 仅记录提示词的前100个字符\r\n                this.logger.debug(`提示词前100个字符: ${prompt.substring(0, 100)}...`);\r\n            }\r\n            \r\n            // 构建请求数据\r\n            const requestData = {\r\n                model: modelName,\r\n                prompt: prompt,\r\n                temperature: temperature,\r\n                max_tokens: maxTokens,\r\n                options: {\r\n                    num_predict: maxTokens\r\n                }\r\n            };\r\n            \r\n            // 请求信息日志\r\n            this.logger.debug(`发送请求到 Ollama API: ${apiUrl}/api/generate`);\r\n            this.logger.debug(`请求内容: ${JSON.stringify({\r\n                model: modelName,\r\n                temperature: temperature,\r\n                max_tokens: maxTokens,\r\n                prompt_length: prompt.length\r\n            })}`);\r\n            \r\n            // 发送请求\r\n            this.logger.debug(`开始fetch请求...`);\r\n            this.logger.debug(`请求体大小: ${JSON.stringify(requestData).length} 字符`);\r\n            \r\n            const response = await fetch(`${apiUrl}/api/generate`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestData)\r\n            });\r\n            \r\n            // 记录响应状态和头部\r\n            this.logger.debug(`Ollama API 响应状态: ${response.status} ${response.statusText}`);\r\n            const headers: Record<string, string> = {};\r\n            response.headers.forEach((value, key) => {\r\n                headers[key] = value;\r\n            });\r\n            this.logger.debug(`响应头: ${JSON.stringify(headers)}`);\r\n            \r\n            // 检查响应状态\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.logger.error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n                return null;\r\n            }\r\n            \r\n            // 获取响应文本\r\n            const responseText = await response.text();\r\n            \r\n            // 记录原始响应\r\n            //this.logger.debug(`原始API响应:\\n${responseText}`);\r\n            //this.logger.debug(`响应内容长度: ${responseText.length} 字符`);\r\n            //this.logger.debug(`响应内容前100字符: ${responseText}`);\r\n            \r\n            // 检查响应是否包含有效的JSON\r\n            const openBraces = (responseText.match(/\\{/g) || []).length;\r\n            const closeBraces = (responseText.match(/\\}/g) || []).length;\r\n            this.logger.debug(`响应是否包含JSON标记: { 出现 ${openBraces} 次, } 出现 ${closeBraces} 次`);\r\n            \r\n            // 检查是否包含response字段\r\n            const hasResponse = responseText.includes('\"response\"');\r\n            this.logger.debug(`响应是否包含response字段: ${hasResponse}`);\r\n            \r\n            // 处理流式JSON响应\r\n            let completionText = '';\r\n            \r\n            // 拆分响应并收集所有的response字段内容\r\n            if (responseText.includes('\"response\"')) {\r\n                try {\r\n                    // 按行拆分响应\r\n                    const lines = responseText.split('\\n').filter(line => line.trim() !== '');\r\n                    \r\n                    // 从每行提取response字段内容并合并\r\n                    for (const line of lines) {\r\n                        try {\r\n                            const jsonObj = JSON.parse(line);\r\n                            if (jsonObj && jsonObj.response) {\r\n                                completionText += jsonObj.response;\r\n                            }\r\n                        } catch (parseError) {\r\n                            this.logger.debug(`解析响应行时出错: ${parseError.message}, 行内容: ${line.substring(0, 50)}...`);\r\n                        }\r\n                    }\r\n                    \r\n                    this.logger.debug(`从流式响应中提取的完整内容, 长度: ${completionText.length}`);\r\n                    \r\n                    // 检查是否为空或者只有代码块标记\r\n                    if (completionText.trim() === '```' || completionText.trim() === '``' || completionText.trim().length <= 3) {\r\n                        this.logger.debug(`流式响应提取内容过短或只有代码块标记，尝试备用方法`);\r\n                        completionText = '';\r\n                    }\r\n                } catch (error) {\r\n                    this.logger.error(`处理流式响应时出错: ${error.message}`);\r\n                    completionText = '';\r\n                }\r\n            }\r\n            \r\n            // 如果流式处理失败，尝试使用正则表达式提取所有响应\r\n            if (!completionText || completionText.trim().length <= 5) {\r\n                this.logger.debug(`尝试使用正则表达式提取所有响应`);\r\n                try {\r\n                    // 提取所有response值\r\n                    let allResponses = '';\r\n                    const regex = /\"response\":[ ]*\"([^\"]*)\"/g;\r\n                    let match;\r\n                    \r\n                    while ((match = regex.exec(responseText)) !== null) {\r\n                        if (match[1]) {\r\n                            // 处理转义字符\r\n                            const responseValue = match[1].replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r').replace(/\\\\\"/g, '\"');\r\n                            allResponses += responseValue;\r\n                        }\r\n                    }\r\n                    \r\n                    if (allResponses.length > 0) {\r\n                        this.logger.debug(`正则提取成功，提取长度: ${allResponses.length}`);\r\n                        completionText = allResponses;\r\n                    }\r\n                } catch (error) {\r\n                    this.logger.debug(`正则提取失败: ${error.message}`);\r\n                }\r\n            }\r\n            \r\n            // 如果提取内容还是为空，尝试直接从响应文本中提取\r\n            if (!completionText || completionText.trim().length === 0) {\r\n                // 如果无法从流中提取内容，尝试清理和修复JSON响应\r\n                this.logger.debug('尝试直接从响应文本提取内容');\r\n                const directExtract = this.extractCompletionDirectly(responseText);\r\n                if (directExtract) {\r\n                    completionText = directExtract;\r\n                    this.logger.debug(`直接提取到内容，长度: ${completionText.length}`);\r\n                } else {\r\n                    // 尝试使用cleanJsonResponse方法\r\n                    try {\r\n                        const cleanedJson = this.cleanJsonResponse(responseText);\r\n                        const jsonObj = JSON.parse(cleanedJson);\r\n                        if (jsonObj.response) {\r\n                            completionText = jsonObj.response;\r\n                            this.logger.debug(`从清理后的JSON中提取到response，长度: ${completionText.length}`);\r\n                        } else {\r\n                            // 如果没有response字段，尝试提取任何内容\r\n                            completionText = this.extractAnyContent(responseText);\r\n                            this.logger.debug(`尝试提取任何内容，结果长度: ${completionText ? completionText.length : 0}`);\r\n                        }\r\n                    } catch (error) {\r\n                        this.logger.error(`清理JSON响应后解析失败: ${error.message}`);\r\n                        // 最后尝试直接提取任何内容\r\n                        completionText = this.extractAnyContent(responseText);\r\n                        this.logger.debug(`最后尝试提取任何内容，结果长度: ${completionText ? completionText.length : 0}`);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // 对补全结果进行后处理\r\n            this.logger.debug(`对补全结果进行后处理`);\r\n            \r\n            // 去除Markdown代码块标记\r\n            if (completionText.startsWith('```')) {\r\n                const firstLineBreak = completionText.indexOf('\\n');\r\n                if (firstLineBreak !== -1) {\r\n                    // 移除开头的```python或```等标记\r\n                    const codeBlockHeader = completionText.substring(0, firstLineBreak);\r\n                    this.logger.debug(`移除了前缀: \"${codeBlockHeader}\"`);\r\n                    completionText = completionText.substring(firstLineBreak + 1);\r\n                } else {\r\n                    this.logger.debug(`移除了前缀: \"${completionText}\"`);\r\n                    completionText = '';\r\n                }\r\n                \r\n                // 移除结尾的```\r\n                const lastCodeBlockEnd = completionText.lastIndexOf('```');\r\n                if (lastCodeBlockEnd !== -1) {\r\n                    completionText = completionText.substring(0, lastCodeBlockEnd).trim();\r\n                    this.logger.debug(`移除了结尾的代码块标记\"\\`\\`\\`\"`);\r\n                }\r\n            }\r\n            \r\n            // 后处理完成的补全文本\r\n            const processedCompletion = this.postProcessCompletion(completionText, context);\r\n            \r\n            // 记录最终的补全结果\r\n            if (processedCompletion) {\r\n                this.logger.debug(`最终补全结果长度: ${processedCompletion.length}`);\r\n                this.logger.debug(`最终补全结果前100字符: ${processedCompletion.substring(0, 100)}${processedCompletion.length > 100 ? '...' : ''}`);\r\n            } else {\r\n                this.logger.debug(`没有有效的补全结果`);\r\n            }\r\n            \r\n            return processedCompletion;\r\n        } catch (error) {\r\n            this.logger.error(`获取补全时出错: ${error.message}`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理JSON响应中的格式问题\r\n     */\r\n    private cleanJsonResponse(text: string): string {\r\n        this.logger.debug(`尝试修复JSON，原始长度: ${text.length}`);\r\n        \r\n        // 如果响应为空，返回最小有效JSON\r\n        if (!text || text.trim() === '') {\r\n            return '{\"response\": \"\"}';\r\n        }\r\n        \r\n        // 移除可能导致解析错误的BOM标记\r\n        let cleaned = text.replace(/^\\uFEFF/, '');\r\n        \r\n        // 移除开头和结尾的非JSON字符\r\n        cleaned = cleaned.trim();\r\n        \r\n        // 检查是否有多行响应（Ollama有时会返回多个JSON对象）\r\n        const lines = cleaned.split('\\n');\r\n        if (lines.length > 1) {\r\n            this.logger.debug(`检测到多行响应，行数: ${lines.length}`);\r\n            \r\n            // 尝试解析第一行 - 如果是完整JSON，直接使用\r\n            const firstLine = lines[0].trim();\r\n            if (firstLine.startsWith('{') && firstLine.endsWith('}')) {\r\n                try {\r\n                    JSON.parse(firstLine); // 测试是否为有效JSON\r\n                    this.logger.debug('第一行是有效JSON，直接使用');\r\n                    return firstLine;\r\n                } catch (e) {\r\n                    this.logger.debug('第一行不是有效JSON，继续尝试其他方法');\r\n                }\r\n            }\r\n            \r\n            // 尝试组合前几行形成完整JSON\r\n            let combinedJson = '';\r\n            let openBraces = 0;\r\n            let validJson = false;\r\n            \r\n            for (let i = 0; i < Math.min(lines.length, 5); i++) { // 最多尝试前5行\r\n                combinedJson += lines[i];\r\n                openBraces += (lines[i].match(/{/g) || []).length;\r\n                openBraces -= (lines[i].match(/}/g) || []).length;\r\n                \r\n                if (openBraces === 0 && combinedJson.trim().startsWith('{') && combinedJson.trim().endsWith('}')) {\r\n                    try {\r\n                        JSON.parse(combinedJson);\r\n                        validJson = true;\r\n                        this.logger.debug(`组合了${i+1}行形成有效JSON`);\r\n                        break;\r\n                    } catch (e) {\r\n                        // 继续尝试添加更多行\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (validJson) {\r\n                return combinedJson;\r\n            }\r\n        }\r\n        \r\n        // 如果响应包含多个JSON对象，只保留第一个完整的JSON对象\r\n        const firstObjEnd = cleaned.indexOf('}{');\r\n        if (firstObjEnd > 0) {\r\n            this.logger.debug('检测到多个JSON对象，截取第一个');\r\n            cleaned = cleaned.substring(0, firstObjEnd + 1);\r\n        }\r\n        \r\n        // 处理可能的流对象\r\n        if (cleaned.includes('\"done\":') && !cleaned.includes('\"response\":')) {\r\n            const matches = cleaned.match(/\"content\":\"([^\"]*)\"/g);\r\n            if (matches && matches.length > 0) {\r\n                this.logger.debug('检测到流式响应，合并内容');\r\n                let content = '';\r\n                \r\n                // 提取所有内容并合并\r\n                for (const match of matches) {\r\n                    const contentMatch = match.match(/\"content\":\"([^\"]*)\"/);\r\n                    if (contentMatch && contentMatch[1]) {\r\n                        content += contentMatch[1];\r\n                    }\r\n                }\r\n                \r\n                // 创建有效的response对象\r\n                return `{\"response\": \"${content.replace(/\"/g, '\\\\\"')}\"}`;\r\n            }\r\n        }\r\n        \r\n        // 尝试修复括号不匹配的问题\r\n        const openBracesCount = (cleaned.match(/{/g) || []).length;\r\n        const closeBracesCount = (cleaned.match(/}/g) || []).length;\r\n        \r\n        if (openBracesCount > closeBracesCount) {\r\n            // 添加缺失的结束括号\r\n            this.logger.debug(`添加 ${openBracesCount - closeBracesCount} 个缺失的结束括号`);\r\n            cleaned = cleaned + '}}'.repeat(openBracesCount - closeBracesCount);\r\n        } else if (closeBracesCount > openBracesCount) {\r\n            // 移除多余的结束括号\r\n            this.logger.debug(`移除 ${closeBracesCount - openBracesCount} 个多余的结束括号`);\r\n            const lastValidIndex = cleaned.length;\r\n            for (let i = 0; i < closeBracesCount - openBracesCount; i++) {\r\n                const lastBraceIndex = cleaned.lastIndexOf('}', lastValidIndex - 1);\r\n                if (lastBraceIndex !== -1) {\r\n                    cleaned = cleaned.substring(0, lastBraceIndex) + cleaned.substring(lastBraceIndex + 1);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 确保是一个有效的JSON对象\r\n        if (!cleaned.startsWith('{')) {\r\n            this.logger.debug('添加开始大括号');\r\n            const firstBrace = cleaned.indexOf('{');\r\n            if (firstBrace >= 0) {\r\n                cleaned = cleaned.substring(firstBrace);\r\n            } else {\r\n                cleaned = '{' + cleaned;\r\n            }\r\n        }\r\n        \r\n        if (!cleaned.endsWith('}')) {\r\n            this.logger.debug('添加结束大括号');\r\n            const lastBrace = cleaned.lastIndexOf('}');\r\n            if (lastBrace >= 0) {\r\n                cleaned = cleaned.substring(0, lastBrace + 1);\r\n            } else {\r\n                cleaned = cleaned + '}';\r\n            }\r\n        }\r\n        \r\n        // 提取有效的JSON部分\r\n        const jsonStart = cleaned.indexOf('{');\r\n        const jsonEnd = cleaned.lastIndexOf('}');\r\n        \r\n        if (jsonStart >= 0 && jsonEnd > jsonStart) {\r\n            this.logger.debug(`提取JSON部分: ${jsonStart}-${jsonEnd}`);\r\n            cleaned = cleaned.substring(jsonStart, jsonEnd + 1);\r\n        }\r\n        \r\n        // 检查是否有未转义的特殊字符\r\n        cleaned = cleaned\r\n            .replace(/[\\u0000-\\u001F]+/g, ' ')            // 替换控制字符\r\n            .replace(/([^\\\\])\"/g, '$1\\\\\"')               // 转义未转义的引号\r\n            .replace(/^([^{]*)({.*)$/, '$2')             // 移除前导非JSON文本\r\n            .replace(/^{([^:]*):/, '{\"response\":');      // 尝试修复响应格式\r\n        \r\n        // 确保响应包含response字段\r\n        if (!cleaned.includes('\"response\"')) {\r\n            this.logger.debug('添加缺失的response字段');\r\n            \r\n            // 尝试提取任何文本作为响应\r\n            const textMatch = cleaned.match(/\"([^\"]{5,})\"/);\r\n            if (textMatch && textMatch[1]) {\r\n                cleaned = `{\"response\": \"${textMatch[1].replace(/\"/g, '\\\\\"')}\"}`;\r\n            } else {\r\n                // 如果找不到合适的文本，返回空响应\r\n                cleaned = '{\"response\": \"\"}';\r\n            }\r\n        }\r\n        \r\n        this.logger.debug(`修复后的JSON: ${cleaned.substring(0, Math.min(100, cleaned.length))}...`);\r\n        return cleaned;\r\n    }\r\n\r\n    /**\r\n     * 构建提示词\r\n     */\r\n    private buildPrompt(context: any): string {\r\n        // 更精确地获取语言类型\r\n        const language = context.fileType || context.language || 'javascript';\r\n        this.logger.debug(`为语言 ${language} 构建提示词模板`);\r\n        \r\n        let template = '';\r\n        \r\n        // 检测上下文中是否有中文内容\r\n        const hasChineseContent = context.textBeforeCursor && \r\n                                /[\\u4e00-\\u9fa5]/.test(context.textBeforeCursor);\r\n        if (hasChineseContent) {\r\n            this.logger.debug('检测到中文内容，调整提示词');\r\n        }\r\n        \r\n        // 添加提示词前缀，根据语言类型直接生成\r\n        if (context.commentMode || context.isInComment) {\r\n            // 注释模式的提示词\r\n            template += hasChineseContent \r\n                ? `你是一位专业的${language}程序员。根据上下文继续完成以下文档注释。只需完成注释内容，不要编写任何代码。不要返回JSON格式或obj['complete_code']这样的结构，直接返回纯文本注释。只关注光标位置的注释，不要生成整个文件的注释。请使用中文回复：\\n\\n`\r\n                : `You are an expert ${language} programmer. Continue the following documentation comment based on the context. Only complete the comment, don't write any code. Do NOT return JSON format or structures like obj['complete_code']. ONLY output plain text comment. Focus ONLY on the comment at the cursor position, do not generate documentation for the entire file:\\n\\n`;\r\n        } else {\r\n            // 普通代码补全的提示词\r\n            template += hasChineseContent\r\n                ? `你是一位专业的${language}程序员。请根据上下文完成光标处的${language}代码。直接输出代码，不要添加任何解释、Markdown格式或JSON结构。不要返回obj['complete_code']这样的结构，只输出纯代码。只关注光标位置的代码补全，可以是一个函数、一个类或几行代码，但不要生成整个文件的内容。你的输出应该是可以直接在光标处插入的有效${language}代码：\\n\\n`\r\n                : `You are an expert ${language} programmer. Complete the ${language} code at the cursor position based on the context. Output ONLY valid ${language} code without any explanation, markdown formatting, or JSON structures. Do NOT wrap the code in obj['complete_code'] or any similar structure. Focus ONLY on completing the code at the cursor position - this could be a function, class, or a few lines of code, but do NOT regenerate the entire file. Output should be ONLY plain code that can be directly inserted at the cursor position:\\n\\n`;\r\n        }\r\n        \r\n        // 添加文档内容作为上下文\r\n        if (context.documentText && context.documentText.length > 0) {\r\n            // 只添加一部分文档避免过长\r\n            const maxContextLength = 2000;\r\n            const relevantContext = context.documentText.length > maxContextLength \r\n                ? context.documentText.substring(context.documentText.length - maxContextLength) \r\n                : context.documentText;\r\n            \r\n            template += `# Current file content (for context):\\n${relevantContext}\\n\\n`;\r\n        }\r\n        \r\n        // 添加光标前的文本\r\n        if (context.textBeforeCursor) {\r\n            template += `# Code before cursor:\\n${context.textBeforeCursor}\\n`;\r\n        }\r\n        \r\n        // 如果有之前的补全结果，在连续补全模式中使用\r\n        if (context.previousCompletion) {\r\n            this.logger.debug('包含之前的补全结果');\r\n            template += `\\n# Previously completed part:\\n${context.previousCompletion}\\n`;\r\n        }\r\n        \r\n        // 如果有相关的缓存代码，包含作为额外上下文\r\n        if (context.relevantCachedCode && context.relevantCachedCode.length > 0) {\r\n            this.logger.debug('包含相关的缓存代码');\r\n            template += `\\n\\n# Similar code for reference (don't repeat this):\\n${context.relevantCachedCode}\\n`;\r\n        }\r\n        \r\n        // 添加明确的完成指令\r\n        template += `\\n# Complete ONLY the code at cursor position (${language} code only):\\n`;\r\n        \r\n        return template;\r\n    }\r\n\r\n    /**\r\n     * 对补全结果进行后处理，确保与文件类型匹配\r\n     */\r\n    private postProcessCompletion(completionText: string, context: any): string {\r\n        if (!completionText) {\r\n            return '';\r\n        }\r\n        \r\n        const fileType = context.fileType || 'javascript';\r\n        this.logger.debug(`对补全结果进行后处理`);\r\n        \r\n        // 检查并清理JSON或对象包装的代码\r\n        completionText = this.cleanJsonWrappedCode(completionText);\r\n        \r\n        // 检查内容中是否存在明显的不匹配代码标记\r\n        if (fileType === 'python') {\r\n            // 检查Python文件中是否包含JavaScript代码特征\r\n            const jsFeatures = /function\\s+|var\\s+|let\\s+|const\\s+|===|!==|this\\.|prototype\\.|=>|};/g;\r\n            if (jsFeatures.test(completionText)) {\r\n                this.logger.debug(`检测到Python文件中返回了疑似JavaScript代码，尝试修复`);\r\n                \r\n                // 简单转换尝试 - 实际效果可能有限\r\n                completionText = completionText\r\n                    .replace(/function\\s+([a-zA-Z0-9_]+)\\s*\\(/g, 'def $1(')  // function转def\r\n                    .replace(/var\\s+|let\\s+|const\\s+/g, '')  // 移除变量声明\r\n                    .replace(/this\\./g, 'self.')  // this替换为self\r\n                    .replace(/===|==/g, '==')  // 严格等于转换\r\n                    .replace(/!==|!=/g, '!=')  // 严格不等于转换\r\n                    .replace(/;/g, '')  // 移除分号\r\n                    .replace(/true/g, 'True')  // 布尔值转换\r\n                    .replace(/false/g, 'False')\r\n                    .replace(/null/g, 'None');\r\n            }\r\n        } else if (fileType === 'javascript' || fileType === 'typescript') {\r\n            // 检查JS/TS文件中是否包含Python代码特征\r\n            const pyFeatures = /def\\s+|elif\\s+|self\\.|:\\s*$/m;\r\n            if (pyFeatures.test(completionText)) {\r\n                this.logger.debug(`检测到${fileType}文件中返回了疑似Python代码，尝试修复`);\r\n                \r\n                // 简单转换尝试\r\n                completionText = completionText\r\n                    .replace(/def\\s+([a-zA-Z0-9_]+)\\s*\\(/g, 'function $1(')  // def转function\r\n                    .replace(/elif\\s+/g, 'else if (')  // elif转else if\r\n                    .replace(/self\\./g, 'this.')  // self替换为this\r\n                    .replace(/True/g, 'true')  // 布尔值转换\r\n                    .replace(/False/g, 'false')\r\n                    .replace(/None/g, 'null');\r\n                    \r\n                // 处理Python的冒号结构转JS的大括号结构(简单情况)\r\n                const lines = completionText.split('\\n');\r\n                const processedLines = [];\r\n                for (let i = 0; i < lines.length; i++) {\r\n                    let line = lines[i];\r\n                    if (line.trim().endsWith(':')) {\r\n                        line = line.replace(/:$/, ' {');\r\n                    }\r\n                    processedLines.push(line);\r\n                }\r\n                completionText = processedLines.join('\\n');\r\n            }\r\n        }\r\n        \r\n        return completionText;\r\n    }\r\n\r\n    /**\r\n     * 清理JSON或对象包装的代码\r\n     * 处理如obj['complete_code']格式的输出\r\n     */\r\n    private cleanJsonWrappedCode(text: string): string {\r\n        try {\r\n            // 尝试删除JSON包装\r\n            const trimmedText = text.trim();\r\n            \r\n            // 检查是否是常见的JSON包装模式\r\n            if (trimmedText.startsWith('{') && trimmedText.endsWith('}')) {\r\n                try {\r\n                    // 尝试解析为JSON\r\n                    const jsonObj = JSON.parse(trimmedText);\r\n                    \r\n                    // 如果解析成功，检查是否有代码相关字段\r\n                    for (const key of ['code', 'complete_code', 'completion', 'content', 'result']) {\r\n                        if (jsonObj[key] && typeof jsonObj[key] === 'string') {\r\n                            this.logger.debug(`检测到JSON包装的代码，提取字段: ${key}`);\r\n                            return jsonObj[key];\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // JSON解析失败，继续检查其他模式\r\n                }\r\n            }\r\n            \r\n            // 检查常见的JavaScript对象访问模式\r\n            const objAccessPattern = /^\\s*(?:let|const|var)?\\s*(?:obj|result|response|output|completion)\\s*(?:\\[\\s*['\"](\\w+)['\"]\\s*\\]|\\.(\\w+))\\s*(?:=\\s*)?['\"](.+)['\"]\\s*;?\\s*$/s;\r\n            const multilineObjPattern = /^\\s*(?:let|const|var)?\\s*(?:obj|result|response|output|completion)\\s*(?:\\[\\s*['\"](\\w+)['\"]\\s*\\]|\\.(\\w+))\\s*(?:=\\s*)?['\"](.+)['\"]$/s;\r\n            \r\n            let objMatch = text.match(objAccessPattern) || text.match(multilineObjPattern);\r\n            if (objMatch && objMatch[3]) {\r\n                this.logger.debug(`检测到对象访问模式的代码包装，提取内容`);\r\n                // 使用第三个捕获组（实际内容）\r\n                return objMatch[3].replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n            }\r\n            \r\n            // 检查特定模式 obj['complete_code'] = \"...\"\r\n            const specificPatternRegex = /obj\\s*\\[\\s*['\"]complete_code['\"]\\s*\\]\\s*=?\\s*['\"]([\\s\\S]*?)['\"]/;\r\n            const specificMatch = text.match(specificPatternRegex);\r\n            if (specificMatch && specificMatch[1]) {\r\n                this.logger.debug(`检测到特定的obj['complete_code']模式，提取内容`);\r\n                return specificMatch[1].replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n            }\r\n        } catch (error) {\r\n            this.logger.debug(`清理JSON包装代码时出错: ${error instanceof Error ? error.message : '未知错误'}`);\r\n        }\r\n        \r\n        // 如果没有检测到特殊模式或处理失败，返回原始文本\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * 检测当前是否在多行注释中\r\n     */\r\n    private isInMultilineComment(text: string, language: string): boolean {\r\n        if (['javascript', 'typescript', 'java', 'c', 'cpp', 'csharp'].includes(language)) {\r\n            // 检查是否有未闭合的多行注释\r\n            const openComments = (text.match(/\\/\\*/g) || []).length;\r\n            const closeComments = (text.match(/\\*\\//g) || []).length;\r\n            return openComments > closeComments;\r\n        }\r\n        \r\n        if (language === 'python') {\r\n            // 检查是否有未闭合的三引号\r\n            const openTripleQuotes = (text.match(/'''/g) || []).length;\r\n            const openTripleDoubleQuotes = (text.match(/\"\"\"/g) || []).length;\r\n            \r\n            // 如果三引号数量为奇数，则在多行注释中\r\n            return (openTripleQuotes % 2 !== 0) || (openTripleDoubleQuotes % 2 !== 0);\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 测试与Ollama服务的连接\r\n     */\r\n    public async testConnection(): Promise<{success: boolean, message: string, models?: string[]}> {\r\n        this.logger.info(`测试与 Ollama 服务的连接: ${this.configManager.getApiUrl()}`);\r\n        \r\n        try {\r\n            const apiUrl = this.configManager.getApiUrl();\r\n            \r\n            // 添加详细诊断\r\n            this.logger.debug(`系统信息: Node版本: ${process.version}, 平台: ${process.platform}`);\r\n            this.logger.debug(`当前工作目录: ${process.cwd()}`);\r\n            this.logger.debug(`API URL: ${apiUrl}, 测试端点: ${apiUrl}/api/tags`);\r\n            \r\n            this.logger.debug(`开始fetch请求 ${apiUrl}/api/tags`);\r\n            \r\n            // 尝试获取模型列表\r\n            const response = await fetch(`${apiUrl}/api/tags`);\r\n            \r\n            this.logger.debug(`收到响应: 状态码=${response.status}, 状态=${response.statusText}`);\r\n            \r\n            if (response.ok) {\r\n                const responseText = await response.text();\r\n                this.logger.debug(`响应内容: ${responseText}`);\r\n                \r\n                let data;\r\n                try {\r\n                    data = JSON.parse(responseText);\r\n                } catch (jsonError) {\r\n                    this.logger.error(`解析JSON响应时出错: ${jsonError}`);\r\n                    return {\r\n                        success: false,\r\n                        message: `收到无效的JSON响应: ${responseText.substring(0, 100)}...`\r\n                    };\r\n                }\r\n                \r\n                if (data.models) {\r\n                    const models = data.models.map((model: any) => model.name);\r\n                    this.logger.info(`成功连接到 Ollama 服务，发现 ${models.length} 个模型: ${models.join(', ')}`);\r\n                    return {\r\n                        success: true,\r\n                        message: '成功连接到Ollama服务',\r\n                        models\r\n                    };\r\n                } else {\r\n                    this.logger.warn(`响应缺少models字段: ${JSON.stringify(data)}`);\r\n                }\r\n            } else {\r\n                this.logger.warn(`Ollama API响应状态不成功: ${response.status} ${response.statusText}`);\r\n            }\r\n            \r\n            this.logger.warn('已连接到 Ollama 服务，但无法获取模型列表');\r\n            return {\r\n                success: true,\r\n                message: '已连接到Ollama服务，但无法获取模型列表',\r\n                models: []\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`测试Ollama连接时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n            this.logger.error(`错误堆栈: ${error instanceof Error ? error.stack : '无堆栈'}`);\r\n            \r\n            let errorMessage = '无法连接到Ollama服务';\r\n            \r\n            if (error instanceof Error) {\r\n                const networkError = error as unknown as { code?: string };\r\n                if (networkError.code === 'ECONNREFUSED') {\r\n                    errorMessage = 'Ollama服务未运行或无法访问';\r\n                } else if ('response' in error) {\r\n                    const responseError = error as any;\r\n                    errorMessage = `服务响应错误: ${responseError.response?.status} ${responseError.response?.statusText}`;\r\n                }\r\n            }\r\n            \r\n            return {\r\n                success: false,\r\n                message: errorMessage\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 直接从响应文本中提取补全内容，不依赖JSON解析\r\n     */\r\n    private extractCompletionDirectly(text: string): string | null {\r\n        // 如果不是JSON格式，直接返回文本\r\n        if (!text.includes('{') && !text.includes('}')) {\r\n            return text.trim();\r\n        }\r\n        \r\n        // 尝试找出JSON之外的内容\r\n        const parts = text.split('}');\r\n        if (parts.length > 1) {\r\n            // 检查最后一部分是否包含非JSON文本\r\n            const lastPart = parts[parts.length - 1].trim();\r\n            if (lastPart.length > 0 && !lastPart.includes('{')) {\r\n                return lastPart;\r\n            }\r\n        }\r\n        \r\n        // 尝试匹配可能的补全内容\r\n        const contentPatterns = [\r\n            /\"response\"\\s*:\\s*\"((?:\\\\\"|[^\"])*?)\"/,  // 标准response字段\r\n            /\"content\"\\s*:\\s*\"((?:\\\\\"|[^\"])*?)\"/,   // 流式响应中的content字段\r\n            /\"completion\"\\s*:\\s*\"((?:\\\\\"|[^\"])*?)\"/ // 可能的completion字段\r\n        ];\r\n        \r\n        for (const pattern of contentPatterns) {\r\n            const match = text.match(pattern);\r\n            if (match && match[1]) {\r\n                return match[1].replace(/\\\\\"/g, '\"').replace(/\\\\n/g, '\\n');\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * 从任何响应中提取可能的有用内容\r\n     */\r\n    private extractAnyContent(text: string): string {\r\n        // 1. 移除任何可能的JSON语法\r\n        let content = text.replace(/[{}\\[\\]\"]/g, ' ');\r\n        \r\n        // 2. 找到第一个冒号后的内容\r\n        const colonIndex = content.indexOf(':');\r\n        if (colonIndex > 0) {\r\n            content = content.substring(colonIndex + 1);\r\n        }\r\n        \r\n        // 3. 清理并规范化文本\r\n        content = content\r\n            .replace(/\\\\n/g, '\\n')          // 处理换行符\r\n            .replace(/\\s+/g, ' ')           // 压缩空白字符\r\n            .trim();                         // 修剪两端空白\r\n        \r\n        // 4. 如果内容很短，可能是错误信息，返回空字符串\r\n        if (content.length < 5) {\r\n            return '';\r\n        }\r\n        \r\n        return content;\r\n    }\r\n\r\n    /**\r\n     * 生成代码补全\r\n     * @param prompt 提示词\r\n     * @param options 选项\r\n     * @param signal 中止信号\r\n     * @returns 补全结果文本\r\n     */\r\n    public async generateCompletion(\r\n        prompt: string, \r\n        options: { temperature?: number; maxTokens?: number; model?: string }, \r\n        signal?: AbortSignal\r\n    ): Promise<string | null> {\r\n        try {\r\n            const apiUrl = this.configManager.getApiUrl();\r\n            const modelName = options.model || this.configManager.getModelName();\r\n            const temperature = options.temperature !== undefined ? options.temperature : this.configManager.getTemperature();\r\n            const maxTokens = options.maxTokens || this.configManager.getMaxTokens();\r\n            \r\n            this.logger.debug(`生成补全: API URL=${apiUrl}, 模型=${modelName}, 温度=${temperature}, 最大令牌数=${maxTokens}`);\r\n            \r\n            // 记录提示词（仅在调试模式下记录完整提示词）\r\n            if (this.configManager.isDebugEnabled()) {\r\n                this.logger.debug(`完整提示词:\\n${prompt}`);\r\n            } else {\r\n                // 仅记录提示词的前100个字符\r\n                this.logger.debug(`提示词前100个字符: ${prompt.substring(0, 100)}...`);\r\n            }\r\n            \r\n            // 构建请求数据\r\n            const requestData = {\r\n                model: modelName,\r\n                prompt: prompt,\r\n                temperature: temperature,\r\n                max_tokens: maxTokens,\r\n                options: {\r\n                    num_predict: maxTokens\r\n                }\r\n            };\r\n            \r\n            // 请求信息日志\r\n            this.logger.debug(`发送请求到Ollama API: ${apiUrl}/api/generate`);\r\n            this.logger.debug(`请求体大小: ${JSON.stringify(requestData).length} 字符`);\r\n            \r\n            // 创建请求选项\r\n            const fetchOptions: RequestInit = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestData),\r\n                signal: signal\r\n            };\r\n            \r\n            // 发送请求\r\n            this.logger.debug('开始发送fetch请求...');\r\n            const response = await fetch(`${apiUrl}/api/generate`, fetchOptions);\r\n            \r\n            // 检查是否被中止\r\n            if (signal?.aborted) {\r\n                this.logger.debug('请求被中止');\r\n                return null;\r\n            }\r\n            \r\n            // 记录响应状态\r\n            this.logger.debug(`Ollama API响应状态: ${response.status} ${response.statusText}`);\r\n            \r\n            // 检查响应状态\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.logger.error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n                throw new Error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n            }\r\n            \r\n            // 获取响应文本\r\n            const responseText = await response.text();\r\n            this.logger.debug(`获取到响应文本，长度: ${responseText.length}`);\r\n            \r\n            // 处理流式JSON响应\r\n            let completionText = '';\r\n            \r\n            // 拆分响应并收集所有的response字段内容\r\n            if (responseText.includes('\"response\"')) {\r\n                try {\r\n                    this.logger.debug('检测到response字段，解析流式JSON响应');\r\n                    // 按行拆分响应\r\n                    const lines = responseText.split('\\n').filter(line => line.trim() !== '');\r\n                    this.logger.debug(`响应行数: ${lines.length}`);\r\n                    \r\n                    // 从每行提取response字段内容并合并\r\n                    let processedLines = 0;\r\n                    for (const line of lines) {\r\n                        try {\r\n                            const jsonObj = JSON.parse(line);\r\n                            if (jsonObj && jsonObj.response) {\r\n                                completionText += jsonObj.response;\r\n                                processedLines++;\r\n                            }\r\n                        } catch (parseError) {\r\n                            this.logger.debug(`解析响应行时出错: ${parseError.message}`);\r\n                        }\r\n                    }\r\n                    \r\n                    this.logger.debug(`成功处理的响应行: ${processedLines}/${lines.length}`);\r\n                    this.logger.debug(`从流式响应中提取的完整内容长度: ${completionText.length}`);\r\n                } catch (error) {\r\n                    this.logger.error(`处理流式响应时出错: ${error.message}`);\r\n                    completionText = '';\r\n                }\r\n            } else {\r\n                this.logger.debug('未检测到response字段，尝试其他方法解析响应');\r\n            }\r\n            \r\n            // 如果流式处理失败，尝试使用正则表达式提取所有响应\r\n            if (!completionText || completionText.trim().length === 0) {\r\n                this.logger.debug(`尝试使用正则表达式提取所有响应`);\r\n                try {\r\n                    // 提取所有response值\r\n                    let allResponses = '';\r\n                    const regex = /\"response\":[ ]*\"([^\"]*)\"/g;\r\n                    let match;\r\n                    let matchCount = 0;\r\n                    \r\n                    while ((match = regex.exec(responseText)) !== null) {\r\n                        if (match[1]) {\r\n                            // 处理转义字符\r\n                            const responseValue = match[1].replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r').replace(/\\\\\"/g, '\"');\r\n                            allResponses += responseValue;\r\n                            matchCount++;\r\n                        }\r\n                    }\r\n                    \r\n                    if (allResponses.length > 0) {\r\n                        this.logger.debug(`正则提取成功，找到${matchCount}个匹配，提取长度: ${allResponses.length}`);\r\n                        completionText = allResponses;\r\n                    } else {\r\n                        this.logger.debug('正则表达式没有找到匹配');\r\n                    }\r\n                } catch (error) {\r\n                    this.logger.debug(`正则提取失败: ${error.message}`);\r\n                }\r\n            }\r\n            \r\n            // 如果提取内容还是为空，尝试直接从响应文本中提取\r\n            if (!completionText || completionText.trim().length === 0) {\r\n                // 尝试直接提取\r\n                this.logger.debug('尝试直接从响应文本中提取内容');\r\n                const directExtract = this.extractCompletionDirectly(responseText);\r\n                if (directExtract) {\r\n                    completionText = directExtract;\r\n                    this.logger.debug(`直接提取成功，提取长度: ${completionText.length}`);\r\n                } else {\r\n                    this.logger.debug('直接提取失败');\r\n                }\r\n            }\r\n            \r\n            // 去除Markdown代码块标记\r\n            if (completionText.startsWith('```')) {\r\n                const firstLineBreak = completionText.indexOf('\\n');\r\n                if (firstLineBreak !== -1) {\r\n                    // 移除开头的```python或```等标记\r\n                    completionText = completionText.substring(firstLineBreak + 1);\r\n                } else {\r\n                    completionText = '';\r\n                }\r\n                \r\n                // 移除结尾的```\r\n                const lastCodeBlockEnd = completionText.lastIndexOf('```');\r\n                if (lastCodeBlockEnd !== -1) {\r\n                    completionText = completionText.substring(0, lastCodeBlockEnd).trim();\r\n                }\r\n                this.logger.debug('已移除Markdown代码块标记');\r\n            }\r\n            \r\n            // 记录最终的补全结果\r\n            if (completionText) {\r\n                this.logger.debug(`最终补全结果长度: ${completionText.length}`);\r\n                if (this.configManager.isDebugEnabled()) {\r\n                    this.logger.debug(`最终补全结果前200字符: ${completionText.substring(0, 200)}${completionText.length > 200 ? '...' : ''}`);\r\n                }\r\n            } else {\r\n                this.logger.debug(`没有有效的补全结果`);\r\n            }\r\n            \r\n            return completionText;\r\n        } catch (error) {\r\n            // 检查是否被中止\r\n            if (signal?.aborted) {\r\n                this.logger.debug('请求被中止');\r\n                return null;\r\n            }\r\n            \r\n            this.logger.error(`生成补全时出错: ${error.message}`, error);\r\n            throw error;\r\n        }\r\n    }\r\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst regex_js_1 = require(\"./regex.js\");\nfunction validate(uuid) {\n    return typeof uuid === 'string' && regex_js_1.default.test(uuid);\n}\nexports.default = validate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parse_js_1 = require(\"./parse.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nfunction v1ToV6(uuid) {\n    const v1Bytes = typeof uuid === 'string' ? (0, parse_js_1.default)(uuid) : uuid;\n    const v6Bytes = _v1ToV6(v1Bytes);\n    return typeof uuid === 'string' ? (0, stringify_js_1.unsafeStringify)(v6Bytes) : v6Bytes;\n}\nexports.default = v1ToV6;\nfunction _v1ToV6(v1Bytes) {\n    return Uint8Array.of(((v1Bytes[6] & 0x0f) << 4) | ((v1Bytes[7] >> 4) & 0x0f), ((v1Bytes[7] & 0x0f) << 4) | ((v1Bytes[4] & 0xf0) >> 4), ((v1Bytes[4] & 0x0f) << 4) | ((v1Bytes[5] & 0xf0) >> 4), ((v1Bytes[5] & 0x0f) << 4) | ((v1Bytes[0] & 0xf0) >> 4), ((v1Bytes[0] & 0x0f) << 4) | ((v1Bytes[1] & 0xf0) >> 4), ((v1Bytes[1] & 0x0f) << 4) | ((v1Bytes[2] & 0xf0) >> 4), 0x60 | (v1Bytes[2] & 0x0f), v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);\n}\n","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport { OllamaClient } from '../api/ollamaClient';\r\nimport { CacheManager } from '../cache/cacheManager';\r\nimport { StatusBarManager } from './statusBar';\r\n\r\n/**\r\n * 命令管理器\r\n * 注册和处理VSCode命令\r\n */\r\nexport class CommandManager {\r\n    constructor(\r\n        private context: vscode.ExtensionContext,\r\n        private configManager: ConfigManager,\r\n        private ollamaClient: OllamaClient,\r\n        private cacheManager: CacheManager,\r\n        private statusBarManager: StatusBarManager\r\n    ) {\r\n        this.registerCommands();\r\n    }\r\n    \r\n    /**\r\n     * 注册命令\r\n     */\r\n    private registerCommands(): void {\r\n        const commands: { [key: string]: (...args: any[]) => any } = {\r\n            'ollamaCodeCompletion.enable': this.enableCompletion.bind(this),\r\n            'ollamaCodeCompletion.disable': this.disableCompletion.bind(this),\r\n            'ollamaCodeCompletion.toggleEnabled': this.toggleEnabled.bind(this),\r\n            'ollamaCodeCompletion.selectModel': this.selectModel.bind(this),\r\n            'ollamaCodeCompletion.clearCache': this.clearCache.bind(this),\r\n            'ollamaCodeCompletion.testConnection': this.testConnection.bind(this),\r\n            'ollamaCodeCompletion.showConfig': this.showConfig.bind(this)\r\n        };\r\n        \r\n        // 注册每个命令\r\n        for (const [commandId, handler] of Object.entries(commands)) {\r\n            const disposable = vscode.commands.registerCommand(commandId, handler);\r\n            this.context.subscriptions.push(disposable);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 启用代码补全\r\n     */\r\n    private async enableCompletion(): Promise<void> {\r\n        await this.configManager.setEnabled(true);\r\n        this.statusBarManager.updateStatus();\r\n        vscode.window.showInformationMessage('Ollama 代码补全已启用');\r\n    }\r\n    \r\n    /**\r\n     * 禁用代码补全\r\n     */\r\n    private async disableCompletion(): Promise<void> {\r\n        await this.configManager.setEnabled(false);\r\n        this.statusBarManager.updateStatus();\r\n        vscode.window.showInformationMessage('Ollama 代码补全已禁用');\r\n    }\r\n    \r\n    /**\r\n     * 切换启用状态\r\n     */\r\n    private async toggleEnabled(): Promise<void> {\r\n        await this.statusBarManager.toggleEnabled();\r\n    }\r\n    \r\n    /**\r\n     * 选择Ollama模型\r\n     */\r\n    private async selectModel(): Promise<void> {\r\n        try {\r\n            // 显示加载状态\r\n            this.statusBarManager.showTemporaryMessage('正在获取可用模型...');\r\n            \r\n            // 测试连接并获取可用模型\r\n            const result = await this.ollamaClient.testConnection();\r\n            \r\n            if (!result.success) {\r\n                vscode.window.showErrorMessage(`无法连接到Ollama服务: ${result.message}`);\r\n                this.statusBarManager.showError(result.message);\r\n                return;\r\n            }\r\n            \r\n            const models = result.models || [];\r\n            \r\n            if (models.length === 0) {\r\n                vscode.window.showWarningMessage('未找到可用的Ollama模型，请确保您已下载至少一个模型。');\r\n                return;\r\n            }\r\n            \r\n            // 显示模型选择\r\n            const selectedModel = await vscode.window.showQuickPick(models, {\r\n                placeHolder: '选择要使用的Ollama模型',\r\n                title: 'Ollama代码补全模型'\r\n            });\r\n            \r\n            if (selectedModel) {\r\n                // 更新配置\r\n                await this.configManager.setModelName(selectedModel);\r\n                this.statusBarManager.updateStatus();\r\n                vscode.window.showInformationMessage(`已选择模型: ${selectedModel}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('选择模型时出错:', error);\r\n            vscode.window.showErrorMessage('选择模型时出错');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 清除代码补全缓存\r\n     */\r\n    private async clearCache(): Promise<void> {\r\n        const confirm = await vscode.window.showWarningMessage(\r\n            '确定要清除所有代码补全缓存吗？',\r\n            { modal: true },\r\n            '确定'\r\n        );\r\n        \r\n        if (confirm === '确定') {\r\n            this.cacheManager.clearCache();\r\n            vscode.window.showInformationMessage('代码补全缓存已清除');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 测试与Ollama服务的连接\r\n     */\r\n    private async testConnection(): Promise<void> {\r\n        try {\r\n            // 显示请求状态\r\n            this.statusBarManager.showRequestInProgress(true);\r\n            \r\n            // 测试连接\r\n            const result = await this.ollamaClient.testConnection();\r\n            \r\n            // 恢复状态\r\n            this.statusBarManager.showRequestInProgress(false);\r\n            \r\n            if (result.success) {\r\n                const modelsText = result.models && result.models.length > 0\r\n                    ? `可用模型: ${result.models.join(', ')}`\r\n                    : '未找到可用模型';\r\n                \r\n                vscode.window.showInformationMessage(`${result.message}。${modelsText}`);\r\n            } else {\r\n                vscode.window.showErrorMessage(`连接测试失败: ${result.message}`);\r\n                this.statusBarManager.showError(result.message);\r\n            }\r\n        } catch (error) {\r\n            this.statusBarManager.showRequestInProgress(false);\r\n            console.error('测试连接时出错:', error);\r\n            vscode.window.showErrorMessage('测试连接时出错');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 显示当前配置\r\n     */\r\n    private showConfig(): void {\r\n        const config = this.configManager.getFullConfig();\r\n        \r\n        // 格式化配置为Markdown\r\n        const configMarkdown = [\r\n            '# Ollama 代码补全配置',\r\n            '',\r\n            '## 常规设置',\r\n            `- 启用状态: ${config.enabled ? '✅ 启用' : '❌ 禁用'}`,\r\n            `- 触发延迟: ${config.triggerDelay}毫秒`,\r\n            '',\r\n            '## 模型设置',\r\n            `- API地址: ${config.apiUrl}`,\r\n            `- 模型名称: ${config.modelName}`,\r\n            `- 温度: ${config.temperature}`,\r\n            `- 最大Tokens: ${config.maxTokens}`,\r\n            '',\r\n            '## 上下文设置',\r\n            `- 最大上下文行数: ${config.maxContextLines}`,\r\n            `- 包含导入语句: ${config.includeImports ? '是' : '否'}`,\r\n            `- 包含注释: ${config.includeComments ? '是' : '否'}`,\r\n            '',\r\n            '## 缓存设置',\r\n            `- 启用缓存: ${config.cacheEnabled ? '是' : '否'}`,\r\n            `- 保留时间: ${config.retentionPeriodHours}小时`,\r\n            `- 最大缓存条目: ${config.maxSnippets}`,\r\n            '',\r\n            '## 文件类型设置',\r\n            `- 启用的文件类型: ${config.enabledFileTypes.join(', ')}`,\r\n            `- 禁用的文件类型: ${config.disabledFileTypes.join(', ')}`\r\n        ].join('\\n');\r\n        \r\n        // 创建并显示Markdown预览\r\n        const panel = vscode.window.createWebviewPanel(\r\n            'ollamaCodeCompletionConfig',\r\n            'Ollama 代码补全配置',\r\n            vscode.ViewColumn.One,\r\n            {}\r\n        );\r\n        \r\n        panel.webview.html = `<!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Ollama 代码补全配置</title>\r\n    <style>\r\n        body {\r\n            font-family: var(--vscode-font-family);\r\n            padding: 20px;\r\n            line-height: 1.6;\r\n        }\r\n        h1 {\r\n            border-bottom: 1px solid var(--vscode-panel-border);\r\n            padding-bottom: 10px;\r\n        }\r\n        h2 {\r\n            margin-top: 20px;\r\n            color: var(--vscode-textLink-foreground);\r\n        }\r\n        ul {\r\n            padding-left: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div id=\"content\">\r\n        ${this.markdownToHtml(configMarkdown)}\r\n    </div>\r\n    <div style=\"margin-top: 30px; text-align: center\">\r\n        <button onclick=\"window.parent.postMessage({ command: 'openSettings' }, '*')\">打开设置</button>\r\n    </div>\r\n    <script>\r\n        window.addEventListener('message', event => {\r\n            const message = event.data;\r\n            if (message.command === 'openSettings') {\r\n                vscode.postMessage({ command: 'openSettings' });\r\n            }\r\n        });\r\n    </script>\r\n</body>\r\n</html>`;\r\n        \r\n        // 处理Webview消息\r\n        panel.webview.onDidReceiveMessage(message => {\r\n            if (message.command === 'openSettings') {\r\n                vscode.commands.executeCommand('workbench.action.openSettings', 'ollamaCodeCompletion');\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * 简单的Markdown转HTML工具\r\n     */\r\n    private markdownToHtml(markdown: string): string {\r\n        return markdown\r\n            .replace(/^# (.*$)/gm, '<h1>$1</h1>')\r\n            .replace(/^## (.*$)/gm, '<h2>$1</h2>')\r\n            .replace(/^- (.*$)/gm, '<ul><li>$1</li></ul>')\r\n            .replace(/<\\/ul><ul>/g, '')\r\n            .replace(/\\n\\n/g, '<br><br>');\r\n    }\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        (0, crypto_1.randomFillSync)(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\nexports.default = rng;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parse_js_1 = require(\"./parse.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nfunction v6ToV1(uuid) {\n    const v6Bytes = typeof uuid === 'string' ? (0, parse_js_1.default)(uuid) : uuid;\n    const v1Bytes = _v6ToV1(v6Bytes);\n    return typeof uuid === 'string' ? (0, stringify_js_1.unsafeStringify)(v1Bytes) : v1Bytes;\n}\nexports.default = v6ToV1;\nfunction _v6ToV1(v6Bytes) {\n    return Uint8Array.of(((v6Bytes[3] & 0x0f) << 4) | ((v6Bytes[4] >> 4) & 0x0f), ((v6Bytes[4] & 0x0f) << 4) | ((v6Bytes[5] & 0xf0) >> 4), ((v6Bytes[5] & 0x0f) << 4) | (v6Bytes[6] & 0x0f), v6Bytes[7], ((v6Bytes[1] & 0x0f) << 4) | ((v6Bytes[2] & 0xf0) >> 4), ((v6Bytes[2] & 0x0f) << 4) | ((v6Bytes[3] & 0xf0) >> 4), 0x10 | ((v6Bytes[0] & 0xf0) >> 4), ((v6Bytes[0] & 0x0f) << 4) | ((v6Bytes[1] & 0xf0) >> 4), v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stringify_js_1 = require(\"./stringify.js\");\nconst v1_js_1 = require(\"./v1.js\");\nconst v1ToV6_js_1 = require(\"./v1ToV6.js\");\nfunction v6(options, buf, offset) {\n    options ??= {};\n    offset ??= 0;\n    let bytes = (0, v1_js_1.default)({ ...options, _v6: true }, new Uint8Array(16));\n    bytes = (0, v1ToV6_js_1.default)(bytes);\n    if (buf) {\n        for (let i = 0; i < 16; i++) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(bytes);\n}\nexports.default = v6;\n","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["Object","defineProperty","exports","value","URL","DNS","md5_js_1","v35_js_1","v35_js_2","v3","namespace","buf","offset","default","enumerable","get","fn","delay","timer","args","Promise","resolve","clearTimeout","setTimeout","async","result","limit","lastResult","lastCall","now","Date","apply","this","code","_language","trim","str1","str2","m","length","n","dist","i","j","cost","Math","min","toString","random","substr","text","defaultValue","JSON","parse","e","filePath","match","crypto_1","randomUUID","stringToBytes","parse_js_1","stringify_js_1","str","unescape","encodeURIComponent","bytes","Uint8Array","charCodeAt","version","hash","valueBytes","namespaceBytes","TypeError","set","unsafeStringify","validate_js_1","byteToHex","push","slice","arr","toLowerCase","uuid","module","Yallist","prototype","Symbol","iterator","walker","head","next","context","logger","Logger","getInstance","configManager","ConfigManager","getApiUrl","vscode","window","showErrorMessage","getModelName","cacheManager","CacheManager","globalState","ollamaClient","OllamaClient","connectionTest","testConnection","success","showWarningMessage","message","statusBar","StatusBarManager","subscriptions","diagnosticsCollection","languages","createDiagnosticCollection","completionProvider","CompletionProvider","getStatusBarItem","supportedLanguages","language","selector","scheme","provider","registerCompletionItemProvider","getTriggerCharacters","debounceTimer","isProcessingCompletion","lastChangeTime","keyPressListener","commands","registerCommand","editor","activeTextEditor","executeCommand","inputChar","debug","isValidInputChar","isEnabled","cancel","clearPreview","getDebounceDelay","isFileTypeSupported","document","position","selection","active","cancellationTokenSource","CancellationTokenSource","completionItems","provideCompletionItems","token","triggerKind","CompletionTriggerKind","TriggerCharacter","triggerCharacter","items","Array","isArray","item","insertText","setPreview","error","char","isPrintable","isChineseChar","isCommonPunctuation","includes","isSpecialTrigger","keyBindingListener","hasActivePreview","lastShownCompletion","applyCompletionCommand","registerTextEditorCommand","textEditor","accept","completionId","then","console","edit","editBuilder","insert","logCompletionOutcomeCommand","setRegistered","CommandManager","err","constructor","configPrefix","cachedConfig","enabled","triggerDelay","apiUrl","modelName","temperature","maxTokens","maxContextLines","includeImports","includeComments","cacheEnabled","retentionPeriodHours","maxSnippets","enabledFileTypes","disabledFileTypes","logLevel","LogLevel","ERROR","adaptToProjectSize","loadConfiguration","configChangeListener","workspace","onDidChangeConfiguration","affectsConfiguration","config","getConfiguration","logLevelStr","parseLogLevel","setLogLevel","level","DEBUG","INFO","WARN","NONE","getLogLevel","levelStr","updateConfigValue","reloadConfig","key","global","update","setEnabled","getTriggerDelay","setModelName","getTemperature","baseTemperature","shouldAdaptToProjectSize","projectSize","estimateProjectSize","max","getMaxTokens","baseMaxTokens","getMaxContextLines","shouldIncludeImports","shouldIncludeComments","isCacheEnabled","getRetentionPeriodHours","getMaxSnippets","getEnabledFileTypes","types","split","map","t","isFileExtApplicableForLanguage","fileExt","matchesFileTypePatterns","fileType","patterns","some","pattern","endsWith","startsWith","getDisabledFileTypes","getFullConfig","isDebugEnabled","openedFileCount","textDocuments","isAdaptToProjectSizeEnabled","setAdaptToProjectSize","getPromptTemplate","dispose","statusBarItem","_context","isRegisteredFlag","lastCompletionResult","lastContext","lastPosition","errorsShown","Set","abortControllers","Map","undefined","lastDecorator","lastInsertText","lastPreviewPosition","temporaryLines","originalPosition","client","onError","has","add","options","val","env","openExternal","Uri","startOllama","command","process","platform","terminal","createTerminal","sendText","show","showInformationMessage","forEach","controller","abort","clear","createAbortController","AbortController","deleteAbortController","delete","lines","endPosition","Position","line","character","range","Range","textToInsert","isDirty","save","put","Error","String","newPosition","Selection","markDisplayed","outcome","completion","cacheHit","applyCompletion","processedText","langMatch","substring","insertedLines","lastLineLength","revealRange","languageId","fileName","uri","selections","signal","onCancellationRequested","tooltip","startTime","contextData","collectContext","prefix","suffix","cachedCompletion","processCompletionResult","prompt","preparePrompt","generateCompletion","model","aborted","time","modelProvider","filepath","numLines","timestamp","CompletionItem","CompletionItemKind","Snippet","detail","documentation","MarkdownString","sortText","replace","textlines","processedTextlines","textlinesset","findnum","getText","offsetAt","imports","getImportStatements","lineCount","importRegex","test","lastIndexOf","commonLanguages","disabledTypesArr","disabledTypes","join","enabledTypesArr","enabledTypes","stringify","isRegistered","setLastDecorator","decorator","setLastInsertText","setLastPosition","setLastPreviewPosition","getLastInsertText","getLastPosition","hasDecorator","hasInsertText","hasPosition","hasPreviewPosition","createTextEditorDecorationType","opacity","setDecorations","getLastDecorator","getLastPreviewPosition","storage","codeSnippets","lruCache","maxAge","loadCache","cachedData","CACHE_KEY","snippet","id","cleanExpiredCache","retentionPeriod","expiredCount","filter","isExpired","del","saveCache","cacheDocumentChanges","event","isSignificantChange","contentChanges","change","extractContext","tags","extractTags","metadata","frequency","addSnippet","changes","contextStart","start","contextEnd","end","contextRange","lineAt","extractJavaScriptTags","extractPythonTags","extractGenericTags","_code","functionMatch","classMatch","constMatch","letMatch","exec","identifierMatch","identifiers","isCommonKeyword","word","similarSnippet","findSimilarSnippet","tag","existing","calculateSimilarity","code1","code2","distance","calculateLevenshteinDistance","maxLength","findRelevantCode","currentCode","maxResults","scoredSnippets","s","score","calculateRelevanceScore","sort","a","b","duration","toFixed","currentTags","ageInHours","clearCache","reset","getStats","languageStats","snippetCount","hashString","cachedSnippet","existingIndex","findIndex","abs","Buffer","from","createHash","digest","require","createStatusBarItem","StatusBarAlignment","Right","updateStatus","showTemporaryMessage","timeout","originalText","originalTooltip","originalBackground","backgroundColor","showRequestInProgress","showError","errorMessage","ThemeColor","toggleEnabled","isCurrentlyEnabled","updateV1State","rng_js_1","_state","state","rnds","msecs","nsecs","node","clockseq","v1Bytes","RangeError","tl","tmh","isV6","_v6","optionsKeys","keys","rng","sha1_js_1","v5","updateV7State","seq","v7Bytes","v","of","parseInt","native_js_1","debugEnabled","outputChannel","createOutputChannel","instance","log","shouldLog","formatMessage","data","formattedMessage","toISOString","padEnd","stack","appendLine","warn","info","setDebugEnabled","showOutputChannel","MAX","LENGTH","LENGTH_CALCULATOR","ALLOW_STALE","MAX_AGE","DISPOSE","NO_DISPOSE_ON_SET","LRU_LIST","CACHE","UPDATE_AGE_ON_GET","naiveLength","self","doUse","hit","isStale","unshiftNode","diff","tail","prev","removeNode","Entry","forEachStep","thisp","call","Infinity","lc","stale","noDisposeOnSet","updateAgeOnGet","mL","allowStale","mA","lengthCalculator","lC","itemCount","rforEach","toArray","k","values","dump","h","dumpLru","len","unshift","peek","pop","load","l","expiresAt","prune","list","arguments","Node","create","pushNode","res","shift","forEachReverse","getReverse","mapReverse","reduce","initial","acc","reduceReverse","toArrayReverse","to","ret","sliceReverse","splice","deleteCount","nodes","inserted","reverse","p","er","validate","v7","v6ToV1","v6","v4","v1ToV6","v1","NIL","max_js_1","nil_js_1","v1_js_1","v1ToV6_js_1","v3_js_1","v4_js_1","v5_js_1","v6_js_1","v6ToV1_js_1","v7_js_1","version_js_1","getCompletion","buildPrompt","requestData","max_tokens","num_predict","prompt_length","response","fetch","method","headers","body","status","statusText","ok","errorText","responseText","openBraces","closeBraces","hasResponse","completionText","jsonObj","parseError","allResponses","regex","directExtract","extractCompletionDirectly","cleanedJson","cleanJsonResponse","extractAnyContent","firstLineBreak","indexOf","codeBlockHeader","lastCodeBlockEnd","processedCompletion","postProcessCompletion","cleaned","firstLine","combinedJson","validJson","firstObjEnd","matches","content","contentMatch","openBracesCount","closeBracesCount","repeat","lastValidIndex","lastBraceIndex","firstBrace","lastBrace","jsonStart","jsonEnd","textMatch","template","hasChineseContent","textBeforeCursor","commentMode","isInComment","documentText","maxContextLength","previousCompletion","relevantCachedCode","cleanJsonWrappedCode","processedLines","trimmedText","objAccessPattern","multilineObjPattern","objMatch","specificPatternRegex","specificMatch","isInMultilineComment","openTripleQuotes","openTripleDoubleQuotes","cwd","jsonError","models","name","responseError","parts","lastPart","contentPatterns","colonIndex","fetchOptions","matchCount","regex_js_1","v6Bytes","statusBarManager","registerCommands","enableCompletion","bind","disableCompletion","selectModel","showConfig","commandId","handler","entries","disposable","selectedModel","showQuickPick","placeHolder","title","modal","modelsText","configMarkdown","panel","createWebviewPanel","ViewColumn","One","webview","html","markdownToHtml","onDidReceiveMessage","markdown","rnds8Pool","poolPtr","randomFillSync","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}