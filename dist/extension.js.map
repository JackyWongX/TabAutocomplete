{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v3.js","webpack://tab-auto-complete/./src/api/clientFactory.ts","webpack://tab-auto-complete/./src/utils/utils.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/native.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v35.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/stringify.js","webpack://tab-auto-complete/./node_modules/yallist/iterator.js","webpack://tab-auto-complete/./src/extension.ts","webpack://tab-auto-complete/./src/config/configManager.ts","webpack://tab-auto-complete/./src/providers/completionProvider.ts","webpack://tab-auto-complete/./src/cache/cacheManager.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/md5.js","webpack://tab-auto-complete/./src/api/baseClient.ts","webpack://tab-auto-complete/external commonjs \"vscode\"","webpack://tab-auto-complete/./src/ui/statusBar.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v1.js","webpack://tab-auto-complete/./src/api/openaiClient.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v5.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v7.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/parse.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/version.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/nil.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/regex.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v4.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/max.js","webpack://tab-auto-complete/./src/utils/logger.ts","webpack://tab-auto-complete/./src/api/deepseekClient.ts","webpack://tab-auto-complete/./node_modules/lru-cache/index.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/sha1.js","webpack://tab-auto-complete/./node_modules/yallist/yallist.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/index.js","webpack://tab-auto-complete/./src/api/ollamaClient.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/validate.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v1ToV6.js","webpack://tab-auto-complete/./src/ui/commands.ts","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/rng.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v6ToV1.js","webpack://tab-auto-complete/./node_modules/uuid/dist/cjs/v6.js","webpack://tab-auto-complete/external node-commonjs \"crypto\"","webpack://tab-auto-complete/webpack/bootstrap","webpack://tab-auto-complete/webpack/startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.URL = exports.DNS = void 0;\nconst md5_js_1 = require(\"./md5.js\");\nconst v35_js_1 = require(\"./v35.js\");\nvar v35_js_2 = require(\"./v35.js\");\nObject.defineProperty(exports, \"DNS\", { enumerable: true, get: function () { return v35_js_2.DNS; } });\nObject.defineProperty(exports, \"URL\", { enumerable: true, get: function () { return v35_js_2.URL; } });\nfunction v3(value, namespace, buf, offset) {\n    return (0, v35_js_1.default)(0x30, md5_js_1.default, value, namespace, buf, offset);\n}\nv3.DNS = v35_js_1.DNS;\nv3.URL = v35_js_1.URL;\nexports.default = v3;\n","import { ConfigManager } from '../config/configManager';\r\nimport { Logger } from '../utils/logger';\r\nimport { BaseClient, ModelConfig, ModelProvider } from './baseClient';\r\nimport { OllamaClient } from './ollamaClient';\r\nimport { DeepSeekClient } from './deepseekClient';\r\nimport { OpenAIClient } from './openaiClient';\r\n\r\n/**\r\n * API客户端工厂类\r\n * 负责根据配置创建适当的API客户端\r\n */\r\nexport class ClientFactory {\r\n    private logger: Logger;\r\n    \r\n    constructor(private configManager: ConfigManager) {\r\n        this.logger = Logger.getInstance();\r\n    }\r\n    \r\n    /**\r\n     * 创建API客户端\r\n     * @param modelConfig 模型配置\r\n     * @returns API客户端实例\r\n     */\r\n    public createClient(modelConfig: ModelConfig): BaseClient {\r\n        this.logger.debug(`创建API客户端: 提供商=${modelConfig.provider}, 模型=${modelConfig.model}`);\r\n        \r\n        switch (modelConfig.provider) {\r\n            case ModelProvider.OLLAMA:\r\n                return new OllamaClient(this.configManager, modelConfig);\r\n                \r\n            case ModelProvider.DEEPSEEK:\r\n                return new DeepSeekClient(this.configManager, modelConfig);\r\n                \r\n            case ModelProvider.OPENAI:\r\n                return new OpenAIClient(this.configManager, modelConfig);\r\n                \r\n            default:\r\n                this.logger.error(`不支持的模型提供商: ${modelConfig.provider}`);\r\n                throw new Error(`不支持的模型提供商: ${modelConfig.provider}`);\r\n        }\r\n    }\r\n} ","/**\r\n * utils.ts - 工具函数集合\r\n */\r\n\r\n/**\r\n * 防抖函数\r\n * 延迟执行函数，避免频繁调用\r\n * @param fn 要执行的函数\r\n * @param delay 延迟时间（毫秒）\r\n */\r\nexport function debounce<T extends (...args: any[]) => Promise<any>>(fn: T, delay: number): (...args: any[]) => Promise<any> {\r\n    let timer: NodeJS.Timeout | null = null;\r\n    \r\n    return function(...args: any[]): Promise<any> {\r\n        return new Promise((resolve) => {\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n            \r\n            timer = setTimeout(async () => {\r\n                const result = await fn(...args);\r\n                resolve(result);\r\n            }, delay);\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * 节流函数\r\n * 限制函数执行频率\r\n * @param fn 要执行的函数\r\n * @param limit 限制时间（毫秒）\r\n */\r\nexport function throttle<T extends (...args: any[]) => any>(fn: T, limit: number): (...args: Parameters<T>) => ReturnType<T> | undefined {\r\n    let lastCall = 0;\r\n    let lastResult: ReturnType<T>;\r\n    \r\n    return function(this: any, ...args: Parameters<T>): ReturnType<T> | undefined {\r\n        const now = Date.now();\r\n        if (now - lastCall >= limit) {\r\n            lastCall = now;\r\n            lastResult = fn.apply(this, args);\r\n            return lastResult;\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\n\r\n/**\r\n * 格式化代码\r\n * 美化代码显示\r\n * @param code 代码文本\r\n * @param _language 编程语言(重命名为_language表示不使用)\r\n */\r\nexport function formatCode(code: string, _language: string): string {\r\n    // 简单的代码格式化，真实场景可能需要使用专门的格式化库\r\n    return code.trim();\r\n}\r\n\r\n/**\r\n * 计算文本的相似度\r\n * 使用Levenshtein距离算法\r\n * @param str1 第一个字符串\r\n * @param str2 第二个字符串\r\n */\r\nexport function calculateLevenshteinDistance(str1: string, str2: string): number {\r\n    const m = str1.length;\r\n    const n = str2.length;\r\n    \r\n    // 创建距离矩阵\r\n    const dist: number[][] = [];\r\n    for (let i = 0; i <= m; i++) {\r\n        dist[i] = [];\r\n        dist[i][0] = i;\r\n    }\r\n    \r\n    for (let j = 0; j <= n; j++) {\r\n        dist[0][j] = j;\r\n    }\r\n    \r\n    // 计算距离\r\n    for (let i = 1; i <= m; i++) {\r\n        for (let j = 1; j <= n; j++) {\r\n            const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n            dist[i][j] = Math.min(\r\n                dist[i - 1][j] + 1,      // 删除\r\n                dist[i][j - 1] + 1,      // 插入\r\n                dist[i - 1][j - 1] + cost // 替换或匹配\r\n            );\r\n        }\r\n    }\r\n    \r\n    return dist[m][n];\r\n}\r\n\r\n/**\r\n * 生成唯一ID\r\n */\r\nexport function generateUniqueId(): string {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2, 5);\r\n}\r\n\r\n/**\r\n * 安全解析JSON\r\n * @param text JSON字符串\r\n * @param defaultValue 解析失败时的默认值\r\n */\r\nexport function safeParseJSON<T>(text: string, defaultValue: T): T {\r\n    try {\r\n        return JSON.parse(text) as T;\r\n    } catch (e) {\r\n        return defaultValue;\r\n    }\r\n}\r\n\r\n/**\r\n * 从路径中提取文件扩展名\r\n * @param filePath 文件路径\r\n */\r\nexport function getFileExtension(filePath: string): string {\r\n    const match = filePath.match(/\\.([^.]+)$/);\r\n    return match ? match[1] : '';\r\n}\r\n\r\n/**\r\n * 从路径中提取文件名\r\n * @param filePath 文件路径\r\n */\r\nexport function getFileName(filePath: string): string {\r\n    const match = filePath.match(/([^/\\\\]+)$/);\r\n    return match ? match[1] : '';\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nexports.default = { randomUUID: crypto_1.randomUUID };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.URL = exports.DNS = exports.stringToBytes = void 0;\nconst parse_js_1 = require(\"./parse.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nfunction stringToBytes(str) {\n    str = unescape(encodeURIComponent(str));\n    const bytes = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; ++i) {\n        bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n}\nexports.stringToBytes = stringToBytes;\nexports.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nfunction v35(version, hash, value, namespace, buf, offset) {\n    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;\n    const namespaceBytes = typeof namespace === 'string' ? (0, parse_js_1.default)(namespace) : namespace;\n    if (typeof namespace === 'string') {\n        namespace = (0, parse_js_1.default)(namespace);\n    }\n    if (namespace?.length !== 16) {\n        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n    let bytes = new Uint8Array(16 + valueBytes.length);\n    bytes.set(namespaceBytes);\n    bytes.set(valueBytes, namespaceBytes.length);\n    bytes = hash(bytes);\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(bytes);\n}\nexports.default = v35;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unsafeStringify = void 0;\nconst validate_js_1 = require(\"./validate.js\");\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nexports.unsafeStringify = unsafeStringify;\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexports.default = stringify;\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","import * as vscode from 'vscode';\r\nimport { CompletionProvider } from './providers/completionProvider';\r\nimport { ConfigManager } from './config/configManager';\r\nimport { CacheManager } from './cache/cacheManager';\r\nimport { StatusBarManager } from './ui/statusBar';\r\nimport { Logger, LogLevel } from './utils/logger';\r\nimport { CommandManager } from './ui/commands';\r\nimport { ClientFactory } from './api/clientFactory';\r\n\r\n/**\r\n * 激活插件\r\n * @param context 扩展上下文\r\n */\r\nexport async function activate(context: vscode.ExtensionContext) {\r\n    // 初始化日志系统\r\n    const logger = Logger.getInstance();\r\n    \r\n    // 注册显示日志命令\r\n    const showLogsCommand = vscode.commands.registerCommand('tabAutoComplete.showLogs', () => {\r\n        logger.showOutputChannel();\r\n    });\r\n    context.subscriptions.push(showLogsCommand);\r\n    \r\n    try {\r\n        // 初始化配置管理器\r\n        const configManager = new ConfigManager();\r\n        \r\n        // 设置日志级别\r\n        logger.setLogLevel(configManager.getLogLevel());\r\n        logger.info('TabAutoComplete 插件已激活');\r\n        \r\n        // 验证配置\r\n        const selectedModel = configManager.getSelectedModelConfig();\r\n        if (!selectedModel) {\r\n            vscode.window.showErrorMessage('未找到可用的模型配置，请在设置中添加模型');\r\n            return;\r\n        }\r\n        \r\n        // 初始化缓存管理器\r\n        const cacheManager = new CacheManager(context.globalState, configManager);\r\n        \r\n        // 初始化客户端工厂\r\n        const clientFactory = new ClientFactory(configManager);\r\n        \r\n        // 测试API连接\r\n        try {\r\n            const client = clientFactory.createClient(selectedModel);\r\n            const connectionTest = await client.testConnection();\r\n            \r\n            if (!connectionTest.success) {\r\n                vscode.window.showWarningMessage(`无法连接到${selectedModel.provider}模型API: ${connectionTest.message}。请检查配置并确保服务正在运行。`);\r\n            } else {\r\n                logger.info(`成功连接到${selectedModel.provider}模型API: ${selectedModel.model}`);\r\n            }\r\n        } catch (error) {\r\n            vscode.window.showWarningMessage(`连接测试出错: ${error.message}`);\r\n        }\r\n        \r\n        // 初始化状态栏\r\n        const statusBar = new StatusBarManager(configManager);\r\n        context.subscriptions.push(statusBar);\r\n        \r\n        // 创建诊断集合\r\n        const diagnosticsCollection = vscode.languages.createDiagnosticCollection('tabAutoComplete');\r\n        context.subscriptions.push(diagnosticsCollection);\r\n        \r\n        // 初始化补全提供程序\r\n        const completionProvider = new CompletionProvider(\r\n            configManager,\r\n            logger,\r\n            cacheManager,\r\n            statusBar.getStatusBarItem(),\r\n            diagnosticsCollection,\r\n            context\r\n        );\r\n\r\n        // 注册补全提供程序\r\n        const supportedLanguages = ['javascript', 'typescript', 'python', 'java', 'c', 'cpp', 'csharp', 'go', 'rust', 'php', 'ruby', 'html', 'css', 'markdown'];\r\n        \r\n        // 确保为每种语言正确注册\r\n        for (const language of supportedLanguages) {\r\n            const selector: vscode.DocumentSelector = { language, scheme: 'file' };\r\n            const provider = vscode.languages.registerCompletionItemProvider(\r\n                selector,\r\n                completionProvider,\r\n                ...completionProvider.getTriggerCharacters()\r\n            );\r\n            context.subscriptions.push(provider);\r\n        }\r\n        \r\n        // 初始化命令管理器\r\n        const commandManager = new CommandManager(\r\n            configManager,\r\n            cacheManager,\r\n            completionProvider,\r\n            context\r\n        );\r\n        context.subscriptions.push(commandManager);\r\n\r\n        // 监听编辑器内容变化事件，实现内联预览功能\r\n        let debounceTimer: NodeJS.Timeout | null = null;\r\n        let isProcessingCompletion = false;\r\n        let lastChangeTime = Date.now();\r\n\r\n        // 监听键盘事件\r\n        const keyPressListener = vscode.commands.registerCommand('type', async (args: { text: string }) => {\r\n            // 获取活动编辑器\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (!editor) {\r\n                await vscode.commands.executeCommand('default:type', args);\r\n                return;\r\n            }\r\n\r\n            // 检查输入的字符\r\n            const inputChar = args.text;\r\n            logger.debug('输入字符', inputChar);\r\n  \r\n            // 过滤掉控制字符和特殊按键\r\n            if (!isValidInputChar(inputChar)) {\r\n                await vscode.commands.executeCommand('default:type', args);\r\n                logger.debug('特殊字符不处理', inputChar);\r\n                return;\r\n            }\r\n\r\n            // 如果插件被禁用，直接执行默认输入\r\n            if (!configManager.isEnabled()) {\r\n                await vscode.commands.executeCommand('default:type', args);\r\n                return;\r\n            }\r\n\r\n            // 先执行默认的输入操作\r\n            await vscode.commands.executeCommand('default:type', args);\r\n\r\n            // 若又请求则取消\r\n            completionProvider.cancel();\r\n\r\n            // 若有预览则清除\r\n            completionProvider.clearPreview();\r\n\r\n            // 更新最后变更时间\r\n            lastChangeTime = Date.now();\r\n\r\n            // 清除之前的定时器\r\n            if (debounceTimer) {\r\n                clearTimeout(debounceTimer);\r\n            }\r\n\r\n            // 设置新的定时器，等待用户停止输入\r\n            debounceTimer = setTimeout(async () => {\r\n                try {\r\n                    // 再次检查是否经过了足够的防抖时间\r\n                    const timeSinceLastChange = Date.now() - lastChangeTime;\r\n                    const debounceDelay = configManager.getDebounceDelay();\r\n                    if (timeSinceLastChange < debounceDelay) {\r\n                        return;\r\n                    }\r\n\r\n                    // 检查文件类型是否支持\r\n                    if (!completionProvider.isFileTypeSupported(editor.document)) {\r\n                        return;\r\n                    }\r\n\r\n                    // 标记开始处理补全\r\n                    isProcessingCompletion = true;\r\n\r\n                    // 获取当前光标位置\r\n                    const position = editor.selection.active;\r\n\r\n                    // 创建取消令牌\r\n                    const cancellationTokenSource = new vscode.CancellationTokenSource();\r\n\r\n                    // 请求补全项\r\n                    const completionItems = await completionProvider.provideCompletionItems(\r\n                        editor.document,\r\n                        position,\r\n                        cancellationTokenSource.token,\r\n                        { triggerKind: vscode.CompletionTriggerKind.TriggerCharacter, triggerCharacter: inputChar }\r\n                    );\r\n\r\n                    // 如果有补全项，显示第一个\r\n                    if (completionItems) {\r\n                        let items: vscode.CompletionItem[] = [];\r\n                        if (Array.isArray(completionItems)) {\r\n                            items = completionItems;\r\n                        } else {\r\n                            items = completionItems.items;\r\n                        }\r\n\r\n                        if (items.length > 0) {\r\n                            const item = items[0];\r\n                            const insertText = typeof item.insertText === 'string' ?\r\n                                item.insertText : item.insertText?.value || '';\r\n\r\n                            // 设置预览\r\n                            await completionProvider.setPreview(insertText, position);\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    logger.error('处理键盘输入时出错', error);\r\n                } finally {\r\n                    isProcessingCompletion = false;\r\n                }\r\n            }, configManager.getDebounceDelay());\r\n        });\r\n        context.subscriptions.push(keyPressListener);\r\n\r\n        /**\r\n         * 检查是否是有效的输入字符\r\n         */\r\n        function isValidInputChar(char: string): boolean {\r\n            // 如果是空字符串或长度不为1，返回false\r\n            if (!char || char.length !== 1) {\r\n                return false;\r\n            }\r\n\r\n            // 获取字符的Unicode码点\r\n            const code = char.charCodeAt(0);\r\n\r\n            // 检查是否是可打印字符或常用标点符号\r\n            const isPrintable = code > 31 && code < 127;  // ASCII可打印字符\r\n            const isChineseChar = code >= 0x4E00 && code <= 0x9FFF;  // 基本汉字范围\r\n            const isCommonPunctuation = [\r\n                '.', ',', ':', ';', '!', '?', '\"', \"'\", '`',\r\n                '(', ')', '[', ']', '{', '}',\r\n                '+', '-', '*', '/', '=', '<', '>', '_',\r\n                '@', '#', '$', '%', '^', '&', '|', '\\\\',\r\n                '~'\r\n            ].includes(char);\r\n\r\n            // 检查是否是空格或换行（作为特殊的触发字符）\r\n            const isSpecialTrigger = [' ', '\\n'].includes(char);\r\n\r\n            return isPrintable || isChineseChar || isCommonPunctuation || isSpecialTrigger;\r\n        }\r\n\r\n        // 监听编辑器选择变化事件，处理ESC键\r\n        const selectionChangeListener = vscode.window.onDidChangeTextEditorSelection(event => {\r\n            // 检查是否按下了ESC键（通过检查最近的按键事件）\r\n            if (completionProvider.hasActivePreview()) {\r\n                // 当有活跃预览时，监听键盘事件\r\n                const activeEditor = vscode.window.activeTextEditor;\r\n                if (activeEditor && event.textEditor === activeEditor) {\r\n                    // 清除预览并取消补全请求\r\n                    // 注意：这里我们不能直接检测ESC键，但可以在选择变化时检查是否需要清除预览\r\n                    if (event.kind === vscode.TextEditorSelectionChangeKind.Keyboard) {\r\n                        completionProvider.clearPreview();\r\n                        completionProvider.cancel();\r\n                        completionProvider.lastShownCompletion = null;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        context.subscriptions.push(selectionChangeListener);\r\n        \r\n        // 监听文档变化事件，用于缓存\r\n        const documentChangeListener = vscode.workspace.onDidChangeTextDocument(event => {\r\n            if (shouldCacheChanges(event, configManager)) {\r\n                cacheManager.cacheDocumentChanges(event);\r\n            }\r\n        });\r\n        context.subscriptions.push(documentChangeListener);\r\n\r\n        // 标记补全提供程序为已注册\r\n        completionProvider.setRegistered(true);\r\n\r\n        // 显示欢迎信息 - 修改消息内容，删除连续补全的描述\r\n        //vscode.window.showInformationMessage('tabAutoComplete代码补全扩展已激活。');\r\n        \r\n    } catch (err) {\r\n        logger.error('激活插件时发生错误', err);\r\n        vscode.window.showErrorMessage('激活插件时发生错误，请检查日志输出。');\r\n    }\r\n}\r\n\r\n/**\r\n * 判断是否应该缓存文档变更\r\n */\r\nfunction shouldCacheChanges(\r\n    event: vscode.TextDocumentChangeEvent,\r\n    configManager: ConfigManager\r\n): boolean {\r\n    // 检查文件类型是否在启用列表中\r\n    const fileName = event.document.fileName;\r\n    const enabledTypes = configManager.getEnabledFileTypes();\r\n    const disabledTypes = configManager.getDisabledFileTypes();\r\n    \r\n    // 检查扩展名\r\n    const fileExt = fileName.substring(fileName.lastIndexOf('.'));\r\n    \r\n    // 如果明确禁用，则不缓存\r\n    if (disabledTypes.includes(fileExt)) {\r\n        return false;\r\n    }\r\n    \r\n    // 如果明确启用或设置为所有文件类型(*)，则缓存\r\n    return enabledTypes.includes(fileExt) || enabledTypes.includes('*');\r\n}\r\n\r\n/**\r\n * 停用插件\r\n */\r\nexport function deactivate() {\r\n    // 不需要日志输出\r\n} ","import * as vscode from 'vscode';\r\nimport { Logger, LogLevel } from '../utils/logger';\r\nimport { ModelConfig, ModelProvider } from '../api/baseClient';\r\n\r\n/**\r\n * 配置管理器\r\n * 负责读取和管理插件配置项\r\n */\r\nexport class ConfigManager {\r\n    // 配置前缀\r\n    private readonly configPrefix = 'tabAutoComplete';\r\n    \r\n    // 缓存配置值\r\n    private cachedConfig: {\r\n        enabled: boolean;\r\n        triggerDelay: number;\r\n        temperature: number;\r\n        maxTokens: number;\r\n        maxContextLines: number;\r\n        includeImports: boolean;\r\n        includeComments: boolean;\r\n        cacheEnabled: boolean;\r\n        retentionPeriodHours: number;\r\n        maxSnippets: number;\r\n        enabledFileTypes: string[] | string;\r\n        disabledFileTypes: string[] | string;\r\n        logLevel: LogLevel;\r\n        adaptToProjectSize: boolean;\r\n        models: ModelConfig[];\r\n        selectedModelIndex: number;\r\n        selectedModelName: string;\r\n    } = {\r\n        enabled: true,\r\n        triggerDelay: 300,\r\n        temperature: 0.3,\r\n        maxTokens: 3000,\r\n        maxContextLines: 2000,\r\n        includeImports: true,\r\n        includeComments: true,\r\n        cacheEnabled: true,\r\n        retentionPeriodHours: 24,\r\n        maxSnippets: 1000,\r\n        enabledFileTypes: ['.js', '.ts', '.jsx', '.tsx', '.py', '.java', '.c', '.cpp', '.cs', '.go', '.rs', '.php', '.rb', '.html', '.css', '.md', '*'],\r\n        disabledFileTypes: ['.txt', '.log', '.json', '.yml', '.yaml'],\r\n        logLevel: LogLevel.ERROR,\r\n        adaptToProjectSize: true,\r\n        models: [],\r\n        selectedModelIndex: 0,\r\n        selectedModelName: 'qwen2.5-coder:7b'\r\n    };\r\n    \r\n    private logger: Logger;\r\n    private configChangeListener: vscode.Disposable;\r\n    \r\n    constructor() {\r\n        this.logger = Logger.getInstance();\r\n        // 在构造函数中加载配置\r\n        this.loadConfiguration();\r\n        \r\n        // 监听配置变更\r\n        this.configChangeListener = vscode.workspace.onDidChangeConfiguration(e => {\r\n            if (e.affectsConfiguration(this.configPrefix)) {\r\n                this.loadConfiguration();\r\n            }\r\n        });\r\n        \r\n        this.logger.debug('ConfigManager初始化完成');\r\n    }\r\n    \r\n    /**\r\n     * 加载配置\r\n     */\r\n    private loadConfiguration(): void {\r\n        const config = vscode.workspace.getConfiguration(this.configPrefix);\r\n        \r\n        // 加载通用设置\r\n        this.cachedConfig.enabled = config.get<boolean>('general.enabled', true);\r\n        this.cachedConfig.triggerDelay = config.get<number>('general.triggerDelay', 300);\r\n        \r\n        // 加载模型设置\r\n        this.cachedConfig.temperature = config.get<number>('model.temperature', 0.3);\r\n        this.cachedConfig.maxTokens = config.get<number>('model.maxTokens', 300);\r\n        \r\n        // 上下文设置\r\n        this.cachedConfig.maxContextLines = config.get<number>('context.maxLines', 100);\r\n        this.cachedConfig.includeImports = config.get<boolean>('context.includeImports', true);\r\n        this.cachedConfig.includeComments = config.get<boolean>('context.includeComments', true);\r\n        \r\n        // 缓存设置\r\n        this.cachedConfig.cacheEnabled = config.get<boolean>('cache.enabled', true);\r\n        this.cachedConfig.retentionPeriodHours = config.get<number>('cache.retentionPeriodHours', 24);\r\n        this.cachedConfig.maxSnippets = config.get<number>('cache.maxSnippets', 1000);\r\n        \r\n        // 文件类型设置\r\n        this.cachedConfig.enabledFileTypes = config.get<string[]>('fileTypes.enabled', ['.js', '.ts', '.jsx', '.tsx', '.py', '.java', '.c', '.cpp', '.cs', '.go', '.rs', '.php', '.rb', '.html', '.css', '.md', '*']);\r\n        this.cachedConfig.disabledFileTypes = config.get<string[]>('fileTypes.disabled', ['.txt', '.log', '.json', '.yml', '.yaml']);\r\n        \r\n        // 日志级别\r\n        const logLevel = config.get<string>('logging.level', 'error');\r\n        this.cachedConfig.logLevel = this.parseLogLevel(logLevel);\r\n        \r\n        // 高级设置\r\n        this.cachedConfig.adaptToProjectSize = config.get<boolean>('advanced.adaptToProjectSize', true);\r\n        \r\n        // 加载模型配置\r\n        this.cachedConfig.models = config.get<ModelConfig[]>('models', []);\r\n        \r\n        // 如果没有模型配置，添加默认模型\r\n        if (this.cachedConfig.models.length === 0) {\r\n            this.cachedConfig.models = [\r\n                {\r\n                    title: \"默认Ollama模型\",\r\n                    model: \"qwen2.5-coder:7b\",\r\n                    provider: ModelProvider.OLLAMA,\r\n                    apiBase: 'http://localhost:11434'\r\n                }\r\n            ];\r\n        }\r\n        \r\n        // 加载选择的模型索引\r\n        this.cachedConfig.selectedModelIndex = config.get<number>('selectedModelIndex', 0);\r\n        \r\n        // 加载选择的模型名称\r\n        this.cachedConfig.selectedModelName = config.get<string>('model.selectedModelName', '');\r\n        \r\n        // 如果selectedModelName为空，则使用索引对应的模型名称\r\n        if (!this.cachedConfig.selectedModelName && this.cachedConfig.models.length > 0) {\r\n            const index = Math.min(this.cachedConfig.selectedModelIndex, this.cachedConfig.models.length - 1);\r\n            this.cachedConfig.selectedModelName = this.cachedConfig.models[index].title;\r\n            this.logger.info(`未设置模型名称，使用索引 ${index} 对应的模型: ${this.cachedConfig.selectedModelName}`);\r\n        }\r\n        \r\n        // 根据selectedModelName查找对应的索引并更新selectedModelIndex\r\n        const modelIndex = this.cachedConfig.models.findIndex(model => model.title === this.cachedConfig.selectedModelName);\r\n        if (modelIndex !== -1) {\r\n            this.cachedConfig.selectedModelIndex = modelIndex;\r\n            this.logger.debug(`找到模型 \"${this.cachedConfig.selectedModelName}\" 的索引: ${modelIndex}`);\r\n        } else if (this.cachedConfig.models.length > 0) {\r\n            // 如果找不到匹配的模型名称，使用第一个模型\r\n            this.logger.warn(`未找到名为 \"${this.cachedConfig.selectedModelName}\" 的模型，使用第一个可用模型`);\r\n            this.cachedConfig.selectedModelName = this.cachedConfig.models[0].title;\r\n            this.cachedConfig.selectedModelIndex = 0;\r\n        } else {\r\n            this.logger.warn('没有可用的模型配置');\r\n        }\r\n        \r\n        // 确保选择的模型索引有效\r\n        if (this.cachedConfig.selectedModelIndex >= this.cachedConfig.models.length) {\r\n            this.logger.warn(`模型索引 ${this.cachedConfig.selectedModelIndex} 超出范围，重置为0`);\r\n            this.cachedConfig.selectedModelIndex = 0;\r\n            if (this.cachedConfig.models.length > 0) {\r\n                this.cachedConfig.selectedModelName = this.cachedConfig.models[0].title;\r\n            }\r\n        }\r\n        \r\n        // 更新Logger的日志级别\r\n        this.logger.setLogLevel(this.cachedConfig.logLevel);\r\n        \r\n        this.logger.debug('配置已重新加载');\r\n    }\r\n    \r\n    /**\r\n     * 将字符串转换为LogLevel枚举\r\n     */\r\n    private parseLogLevel(level: string): LogLevel {\r\n        switch (level.toLowerCase()) {\r\n            case 'debug':\r\n                return LogLevel.DEBUG;\r\n            case 'info':\r\n                return LogLevel.INFO;\r\n            case 'warn':\r\n                return LogLevel.WARN;\r\n            case 'error':\r\n                return LogLevel.ERROR;\r\n            case 'none':\r\n                return LogLevel.NONE;\r\n            default:\r\n                return LogLevel.ERROR;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 获取日志级别\r\n     */\r\n    public getLogLevel(): LogLevel {\r\n        return this.cachedConfig.logLevel;\r\n    }\r\n    \r\n    /**\r\n     * 设置日志级别\r\n     */\r\n    public async setLogLevel(level: LogLevel): Promise<void> {\r\n        const levelStr = LogLevel[level].toLowerCase();\r\n        await this.updateConfigValue('logging.level', levelStr);\r\n        this.logger.setLogLevel(level);\r\n    }\r\n    \r\n    /**\r\n     * 重新加载配置\r\n     */\r\n    public reloadConfig(): void {\r\n        this.loadConfiguration();\r\n    }\r\n    \r\n    /**\r\n     * 更新配置值\r\n     */\r\n    public async updateConfigValue<T>(key: string, value: T, global: boolean = true): Promise<void> {\r\n        const config = vscode.workspace.getConfiguration(this.configPrefix);\r\n        await config.update(key, value, global);\r\n        this.reloadConfig();\r\n    }\r\n    \r\n    /**\r\n     * 是否启用插件\r\n     */\r\n    public isEnabled(): boolean {\r\n        return this.cachedConfig.enabled;\r\n    }\r\n    \r\n    /**\r\n     * 设置插件启用状态\r\n     */\r\n    public async setEnabled(enabled: boolean): Promise<void> {\r\n        await this.updateConfigValue('general.enabled', enabled);\r\n    }\r\n    \r\n    /**\r\n     * 获取触发补全的延迟时间\r\n     */\r\n    public getTriggerDelay(): number {\r\n        return this.cachedConfig.triggerDelay;\r\n    }\r\n    \r\n    /**\r\n     * 获取API URL\r\n     */\r\n    public getApiUrl(): string {\r\n        // 使用当前选择的模型的apiBase\r\n        const selectedModel = this.getSelectedModelConfig();\r\n        if (!selectedModel.apiBase) {\r\n            this.logger.warn(`模型 ${selectedModel.title} 未设置API地址，使用默认地址`);\r\n            return 'http://localhost:11434';\r\n        }\r\n        return selectedModel.apiBase;\r\n    }\r\n    \r\n    /**\r\n     * 获取模型名称\r\n     */\r\n    public getModelName(): string {\r\n        // 返回当前选择的模型的model属性\r\n        const selectedModel = this.getSelectedModelConfig();\r\n        return selectedModel.model;\r\n    }\r\n    \r\n    /**\r\n     * 设置模型名称\r\n     * @deprecated 使用 setSelectedModelName 代替\r\n     */\r\n    public async setModelName(modelName: string): Promise<void> {\r\n        this.logger.warn('setModelName 方法已弃用，请使用 setSelectedModelName 代替');\r\n        \r\n        // 查找匹配的模型\r\n        const modelIndex = this.cachedConfig.models.findIndex(m => m.model === modelName);\r\n        if (modelIndex >= 0) {\r\n            await this.setSelectedModelIndex(modelIndex);\r\n        } else {\r\n            this.logger.warn(`未找到模型: ${modelName}`);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 获取温度参数\r\n     * 较低的温度生成更可预测的文本，较高的温度允许更多创造性\r\n     */\r\n    public getTemperature(): number {\r\n        // 检查项目类型并适当调整温度\r\n        const baseTemperature = this.cachedConfig.temperature;\r\n        \r\n        // 如果配置了自适应项目大小，则进行调整\r\n        if (this.shouldAdaptToProjectSize()) {\r\n            const projectSize = this.estimateProjectSize();\r\n            this.logger.debug(`估计项目大小: ${projectSize}`);\r\n            \r\n            // 大型项目降低一点温度以保持一致性\r\n            if (projectSize === 'large') {\r\n                return Math.max(0.2, baseTemperature - 0.05);\r\n            }\r\n            // 小型项目可以增加一点温度以提高创造性\r\n            else if (projectSize === 'small') {\r\n                return Math.min(0.7, baseTemperature + 0.05);\r\n            }\r\n        }\r\n        \r\n        return baseTemperature;\r\n    }\r\n    \r\n    /**\r\n     * 获取最大生成token数\r\n     */\r\n    public getMaxTokens(): number {\r\n        const baseMaxTokens = this.cachedConfig.maxTokens;\r\n        \r\n        // 如果配置了自适应项目大小，则进行调整\r\n        if (this.shouldAdaptToProjectSize()) {\r\n            const projectSize = this.estimateProjectSize();\r\n            \r\n            // 大型项目增加token数以包含更多上下文\r\n            if (projectSize === 'large') {\r\n                return Math.min(500, baseMaxTokens + 100);\r\n            }\r\n            // 小型项目可以使用基本设置\r\n            else if (projectSize === 'small') {\r\n                return baseMaxTokens;\r\n            }\r\n        }\r\n        \r\n        return baseMaxTokens;\r\n    }\r\n    \r\n    /**\r\n     * 获取最大上下文行数\r\n     */\r\n    public getMaxContextLines(): number {\r\n        return this.cachedConfig.maxContextLines;\r\n    }\r\n    \r\n    /**\r\n     * 是否包含导入语句\r\n     */\r\n    public shouldIncludeImports(): boolean {\r\n        return this.cachedConfig.includeImports;\r\n    }\r\n    \r\n    /**\r\n     * 是否包含注释\r\n     */\r\n    public shouldIncludeComments(): boolean {\r\n        return this.cachedConfig.includeComments;\r\n    }\r\n    \r\n    /**\r\n     * 是否启用缓存\r\n     */\r\n    public isCacheEnabled(): boolean {\r\n        return this.cachedConfig.cacheEnabled;\r\n    }\r\n    \r\n    /**\r\n     * 获取缓存保留时间（小时）\r\n     */\r\n    public getRetentionPeriodHours(): number {\r\n        return this.cachedConfig.retentionPeriodHours;\r\n    }\r\n    \r\n    /**\r\n     * 获取最大缓存条目数\r\n     */\r\n    public getMaxSnippets(): number {\r\n        return this.cachedConfig.maxSnippets;\r\n    }\r\n    \r\n    /**\r\n     * 获取启用的文件类型\r\n     */\r\n    public getEnabledFileTypes(): string[] {\r\n        const types = this.cachedConfig.enabledFileTypes;\r\n        \r\n        // 确保返回数组\r\n        if (Array.isArray(types)) {\r\n            return types;\r\n        } else if (typeof types === 'string') {\r\n            // 处理字符串情况\r\n            if (types.includes(',')) {\r\n                return types.split(',').map(t => t.trim());\r\n            } else {\r\n                return [types];\r\n            }\r\n        }\r\n        \r\n        // 默认返回所有类型\r\n        return ['*'];\r\n    }\r\n    \r\n    /**\r\n     * 给定文件扩展名是否适用于针对指定语言的规则\r\n     * @param fileExt 文件扩展名\r\n     * @param language 语言标识符\r\n     */\r\n    private isFileExtApplicableForLanguage(fileExt: string, language: string): boolean {\r\n        const languageExtMap: {[key: string]: string[]} = {\r\n            'javascript': ['.js', '.jsx'],\r\n            'typescript': ['.ts', '.tsx'],\r\n            'python': ['.py', '.pyw'],\r\n            'java': ['.java'],\r\n            'csharp': ['.cs'],\r\n            'cpp': ['.cpp', '.cc', '.cxx', '.h', '.hpp'],\r\n            'c': ['.c', '.h'],\r\n            'go': ['.go'],\r\n            'rust': ['.rs'],\r\n            'php': ['.php'],\r\n            'ruby': ['.rb'],\r\n            'html': ['.html', '.htm'],\r\n            'css': ['.css'],\r\n            'markdown': ['.md']\r\n        };\r\n        \r\n        return languageExtMap[language]?.includes(fileExt) || false;\r\n    }\r\n    \r\n    /**\r\n     * 根据提供的模式检查文件类型\r\n     * @param fileType 文件类型（扩展名或语言标识符）\r\n     * @param patterns 要检查的模式数组\r\n     */\r\n    private matchesFileTypePatterns(fileType: string, patterns: string[]): boolean {\r\n        return patterns.some(pattern => {\r\n            // 精确匹配\r\n            if (pattern === fileType) {\r\n                return true;\r\n            }\r\n            \r\n            // 通配符匹配所有\r\n            if (pattern === '*' || pattern === 'all') {\r\n                return true;\r\n            }\r\n            \r\n            // 通配符匹配特定扩展名前缀\r\n            if (pattern.endsWith('*') && fileType.startsWith(pattern.slice(0, -1))) {\r\n                return true;\r\n            }\r\n            \r\n            return false;\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * 获取禁用的文件类型\r\n     */\r\n    public getDisabledFileTypes(): string[] {\r\n        const types = this.cachedConfig.disabledFileTypes;\r\n        \r\n        // 确保返回数组\r\n        if (Array.isArray(types)) {\r\n            return types;\r\n        } else if (typeof types === 'string') {\r\n            // 处理字符串情况\r\n            if (types.includes(',')) {\r\n                return types.split(',').map(t => t.trim());\r\n            } else {\r\n                return [types];\r\n            }\r\n        }\r\n        \r\n        // 默认禁用列表\r\n        return ['.txt', '.log'];\r\n    }\r\n    \r\n    /**\r\n     * 获取完整配置\r\n     */\r\n    public getFullConfig(): any {\r\n        return { ...this.cachedConfig };\r\n    }\r\n\r\n    /**\r\n     * 是否启用调试日志\r\n     */\r\n    public isDebugEnabled(): boolean {\r\n        return this.getLogLevel() === LogLevel.DEBUG;\r\n    }\r\n    \r\n    /**\r\n     * 是否应根据项目大小自适应调整参数\r\n     */\r\n    private shouldAdaptToProjectSize(): boolean {\r\n        return this.cachedConfig.adaptToProjectSize;\r\n    }\r\n    \r\n    /**\r\n     * 估计项目大小\r\n     * @returns 'small', 'medium', 或 'large'\r\n     */\r\n    private estimateProjectSize(): 'small' | 'medium' | 'large' {\r\n        try {\r\n            // 获取当前打开的所有文件数量作为简单估计\r\n            const openedFileCount = vscode.workspace.textDocuments.length;\r\n            \r\n            // 阈值可以根据需要调整\r\n            if (openedFileCount > 20) {\r\n                return 'large';\r\n            } else if (openedFileCount > 8) {\r\n                return 'medium';\r\n            } else {\r\n                return 'small';\r\n            }\r\n        } catch (error) {\r\n            // 如果无法估计，默认为中型项目\r\n            return 'medium';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否启用自适应项目大小\r\n     */\r\n    public isAdaptToProjectSizeEnabled(): boolean {\r\n        return this.cachedConfig.adaptToProjectSize;\r\n    }\r\n\r\n    /**\r\n     * 设置自适应项目大小功能\r\n     */\r\n    public async setAdaptToProjectSize(enabled: boolean): Promise<void> {\r\n        this.logger.debug(`${enabled ? '启用' : '禁用'}自适应项目大小功能`);\r\n        await this.updateConfigValue('advanced.adaptToProjectSize', enabled);\r\n    }\r\n\r\n    /**\r\n     * 获取防抖延迟时间（毫秒）\r\n     */\r\n    public getDebounceDelay(): number {\r\n        return vscode.workspace.getConfiguration('tabAutoComplete').get('debounceDelay', 300);\r\n    }\r\n\r\n    /**\r\n     * 获取代码补全提示模板\r\n     */\r\n    public getPromptTemplate(): string {\r\n        return vscode.workspace.getConfiguration('tabAutoComplete').get('prompt.template', \r\n            '你是一个智能代码补全助手。请根据以下上下文补全代码，只需要补全光标处的代码且只返回补全的代码，不要包含任何解释或注释，补全的内容不要包含上下文中已存在的重复的内容。\\n\\n上下文:\\n```\\n${prefix}\\n```\\n\\n请直接补全代码:');\r\n    }\r\n\r\n    /**\r\n     * 获取当前选择的模型配置\r\n     */\r\n    public getSelectedModelConfig(): ModelConfig {\r\n        if (this.cachedConfig.models.length === 0) {\r\n            // 如果没有模型配置，返回默认配置\r\n            return {\r\n                title: \"默认Ollama模型\",\r\n                model: \"qwen2.5-coder:7b\",\r\n                provider: ModelProvider.OLLAMA,\r\n                apiBase: 'http://localhost:11434'\r\n            };\r\n        }\r\n        \r\n        // 返回当前选择的模型\r\n        return this.cachedConfig.models[this.cachedConfig.selectedModelIndex];\r\n    }\r\n    \r\n    /**\r\n     * 设置当前选择的模型索引\r\n     */\r\n    public async setSelectedModelIndex(index: number): Promise<void> {\r\n        if (index >= 0 && index < this.cachedConfig.models.length) {\r\n            await this.updateConfigValue('selectedModelIndex', index);\r\n            \r\n            // 同时更新selectedModelName\r\n            const modelName = this.cachedConfig.models[index].title;\r\n            await this.updateConfigValue('model.selectedModelName', modelName);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 获取当前选择的模型名称\r\n     */\r\n    public getSelectedModelName(): string {\r\n        return this.cachedConfig.selectedModelName;\r\n    }\r\n    \r\n    /**\r\n     * 设置当前选择的模型名称\r\n     */\r\n    public async setSelectedModelName(modelName: string): Promise<void> {\r\n        // 查找模型在数组中的索引\r\n        const index = this.cachedConfig.models.findIndex(m => m.title === modelName);\r\n        \r\n        if (index >= 0) {\r\n            // 如果找到了模型，设置选择的索引和名称\r\n            await this.updateConfigValue('model.selectedModelName', modelName);\r\n            await this.updateConfigValue('selectedModelIndex', index);\r\n        } else if (this.cachedConfig.models.length > 0) {\r\n            // 如果没有找到模型，使用第一个模型\r\n            await this.updateConfigValue('model.selectedModelName', this.cachedConfig.models[0].title);\r\n            await this.updateConfigValue('selectedModelIndex', 0);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 获取所有可用的模型配置\r\n     */\r\n    public getAvailableModels(): ModelConfig[] {\r\n        return this.cachedConfig.models;\r\n    }\r\n    \r\n    /**\r\n     * 添加模型配置\r\n     */\r\n    public async addModelConfig(modelConfig: ModelConfig): Promise<void> {\r\n        const models = [...this.cachedConfig.models, modelConfig];\r\n        await this.updateConfigValue('models', models);\r\n    }\r\n    \r\n    /**\r\n     * 更新模型配置\r\n     */\r\n    public async updateModelConfig(index: number, modelConfig: ModelConfig): Promise<void> {\r\n        const models = [...this.cachedConfig.models];\r\n        models[index] = modelConfig;\r\n        await this.updateConfigValue('models', models);\r\n    }\r\n    \r\n    /**\r\n     * 删除模型配置\r\n     */\r\n    public async deleteModelConfig(index: number): Promise<void> {\r\n        const models = this.cachedConfig.models.filter((_, i) => i !== index);\r\n        await this.updateConfigValue('models', models);\r\n        \r\n        // 如果删除的是当前选择的模型，重置选择的索引\r\n        if (index === this.cachedConfig.selectedModelIndex) {\r\n            await this.setSelectedModelIndex(0);\r\n        } else if (index < this.cachedConfig.selectedModelIndex) {\r\n            // 如果删除的模型在当前选择的模型之前，调整索引\r\n            await this.setSelectedModelIndex(this.cachedConfig.selectedModelIndex - 1);\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.configChangeListener) {\r\n            this.configChangeListener.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置当前选择的模型配置\r\n     */\r\n    public async setSelectedModelConfig(modelConfig: ModelConfig): Promise<void> {\r\n        // 查找模型在数组中的索引\r\n        const index = this.cachedConfig.models.findIndex(m => \r\n            m.title === modelConfig.title && \r\n            m.model === modelConfig.model && \r\n            m.provider === modelConfig.provider\r\n        );\r\n        \r\n        if (index >= 0) {\r\n            // 如果找到了模型，设置选择的索引\r\n            await this.setSelectedModelIndex(index);\r\n        } else {\r\n            // 如果没有找到模型，添加到数组并设置为当前选择\r\n            await this.addModelConfig(modelConfig);\r\n            await this.setSelectedModelIndex(this.cachedConfig.models.length - 1);\r\n        }\r\n    }\r\n} ","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport { Logger } from '../utils/logger';\r\nimport { CacheManager } from '../cache/cacheManager';\r\nimport { BaseClient } from '../api/baseClient';\r\nimport { ClientFactory } from '../api/clientFactory';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * 代码补全提供程序\r\n * 负责分析用户代码，收集上下文，请求模型生成补全，并将补全内容应用到编辑器中\r\n */\r\nexport class CompletionProvider implements vscode.CompletionItemProvider, vscode.Disposable {\r\n    private client: BaseClient;\r\n    private configManager: ConfigManager;\r\n    private logger: Logger;\r\n    private cacheManager: CacheManager;\r\n    private statusBarItem: vscode.StatusBarItem;\r\n    private diagnosticsCollection: vscode.DiagnosticCollection;\r\n    private clientFactory: ClientFactory;\r\n\r\n    // 跟踪状态\r\n    private isRegisteredFlag: boolean = false;\r\n    private lastCompletionResult: string | null = null;\r\n    private lastContext: string = '';\r\n    private lastPosition: vscode.Position | null = null;\r\n    private errorsShown: Set<string> = new Set();\r\n    private abortControllers: Map<string, AbortController> = new Map();\r\n    public lastShownCompletion: any = undefined;\r\n    \r\n    // 预览相关属性\r\n    private lastDecorator: vscode.TextEditorDecorationType | null = null;\r\n    private lastInsertText: string | null = null;\r\n    private lastPreviewPosition: vscode.Position | null = null;\r\n    private temporaryLines: number = 0;  // 跟踪临时插入的空行数量\r\n    private originalPosition: vscode.Position | null = null;  // 记录原始光标位置\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor(\r\n        configManager: ConfigManager, \r\n        logger: Logger, \r\n        cacheManager: CacheManager,\r\n        statusBarItem: vscode.StatusBarItem,\r\n        diagnosticsCollection: vscode.DiagnosticCollection,\r\n        _context: vscode.ExtensionContext\r\n    ) {\r\n        this.configManager = configManager;\r\n        this.logger = logger;\r\n        this.cacheManager = cacheManager;\r\n        this.statusBarItem = statusBarItem;\r\n        this.diagnosticsCollection = diagnosticsCollection;\r\n        \r\n        // 创建客户端工厂\r\n        this.clientFactory = new ClientFactory(configManager);\r\n        \r\n        // 创建API客户端\r\n        this.client = this.clientFactory.createClient(configManager.getSelectedModelConfig());\r\n        \r\n        // 监听配置变更，更新客户端\r\n        vscode.workspace.onDidChangeConfiguration(e => {\r\n            if (e.affectsConfiguration('tabAutoComplete.selectedModelIndex') || \r\n                e.affectsConfiguration('tabAutoComplete.models')) {\r\n                this.updateClient();\r\n            }\r\n        });\r\n        \r\n        this.logger.debug('CompletionProvider 已初始化');\r\n    }\r\n\r\n    /**\r\n     * 更新API客户端\r\n     */\r\n    private updateClient(): void {\r\n        this.client = this.clientFactory.createClient(this.configManager.getSelectedModelConfig());\r\n        this.logger.debug('已更新API客户端');\r\n    }\r\n\r\n    /**\r\n     * 处理错误\r\n     */\r\n    private onError(e: any) {\r\n        // 忽略一些常见的预期错误\r\n        const ERRORS_TO_IGNORE = [\r\n            \"unexpected server status\",\r\n            \"operation was aborted\",\r\n        ];\r\n\r\n        if (ERRORS_TO_IGNORE.some((err) => \r\n            typeof e === \"string\" ? e.includes(err) : e?.message?.includes(err))) {\r\n            return;\r\n        }\r\n\r\n        this.logger.error('生成代码补全时出错', e);\r\n        \r\n        if (!this.errorsShown.has(e.message)) {\r\n            this.errorsShown.add(e.message);\r\n            \r\n            let options = [\"文档\"];\r\n            if (e.message.includes(\"Ollama可能未安装\")) {\r\n                options.push(\"下载Ollama\");\r\n            } else if (e.message.includes(\"Ollama可能未运行\")) {\r\n                options = [\"启动Ollama\"];\r\n            }\r\n            \r\n            vscode.window.showErrorMessage(e.message, ...options).then((val) => {\r\n                if (val === \"文档\") {\r\n                    vscode.env.openExternal(vscode.Uri.parse(\"https://github.com/ollama/ollama\"));\r\n                } else if (val === \"下载Ollama\") {\r\n                    vscode.env.openExternal(vscode.Uri.parse(\"https://ollama.ai/download\"));\r\n                } else if (val === \"启动Ollama\") {\r\n                    // 启动Ollama的逻辑\r\n                    this.startOllama();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启动Ollama服务\r\n     */\r\n    private async startOllama() {\r\n        // 根据平台选择不同的启动命令\r\n        let command = '';\r\n        if (process.platform === 'win32') {\r\n            command = 'start ollama serve';\r\n        } else if (process.platform === 'darwin') {\r\n            command = 'open -a Ollama';\r\n        } else {\r\n            command = 'ollama serve';\r\n        }\r\n\r\n        try {\r\n            // 使用VS Code的终端执行命令\r\n            const terminal = vscode.window.createTerminal('Ollama');\r\n            terminal.sendText(command);\r\n            terminal.show();\r\n            \r\n            this.logger.debug('已尝试启动Ollama服务');\r\n            vscode.window.showInformationMessage('正在尝试启动Ollama服务，请稍候...');\r\n            \r\n            // 等待几秒钟后测试连接\r\n            setTimeout(async () => {\r\n                const result = await this.client.testConnection();\r\n                if (result.success) {\r\n                    vscode.window.showInformationMessage('Ollama服务已成功启动！');\r\n                } else {\r\n                    vscode.window.showErrorMessage('Ollama服务启动失败，请手动启动Ollama。');\r\n                }\r\n            }, 5000);\r\n        } catch (error) {\r\n            this.logger.error('启动Ollama服务失败', error);\r\n            vscode.window.showErrorMessage('启动Ollama服务失败，请手动启动Ollama。');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取消当前的补全请求\r\n     */\r\n    public cancel() {\r\n        this.abortControllers.forEach((controller) => {\r\n            controller.abort();\r\n        });\r\n        this.abortControllers.clear();\r\n    }\r\n\r\n    /**\r\n     * 创建中止控制器\r\n     */\r\n    private createAbortController(completionId: string): AbortController {\r\n        const controller = new AbortController();\r\n        this.abortControllers.set(completionId, controller);\r\n        return controller;\r\n    }\r\n\r\n    /**\r\n     * 删除中止控制器\r\n     */\r\n    private deleteAbortController(completionId: string) {\r\n        this.abortControllers.delete(completionId);\r\n    }\r\n\r\n    /**\r\n     * 接受补全\r\n     */\r\n    public async accept(completionId?: string): Promise<void> {\r\n        this.logger.debug(`接受补全: ${completionId || '无ID'}`);\r\n        \r\n        try {\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (!editor) {\r\n                this.logger.debug('没有活动的编辑器，无法接受补全');\r\n                return;\r\n            }\r\n\r\n            // 检查是否有必要的状态\r\n            if (!this.lastInsertText || !this.originalPosition) {\r\n                this.logger.debug('缺少必要的状态信息，无法接受补全');\r\n                await this.clearPreview();\r\n                return;\r\n            }\r\n\r\n            // 计算要删除的范围\r\n            const lines = this.lastInsertText.split('\\n');\r\n            const endPosition = new vscode.Position(\r\n                this.originalPosition.line + lines.length - 1,\r\n                lines[lines.length - 1].length + (lines.length === 1 ? this.originalPosition.character : 0)\r\n            );\r\n            const range = new vscode.Range(this.originalPosition, endPosition);\r\n\r\n            // 保存当前的预览内容\r\n            const textToInsert = this.lastInsertText;\r\n\r\n            // 清理装饰器（如果存在）\r\n            if (this.lastDecorator) {\r\n                this.lastDecorator.dispose();\r\n                this.lastDecorator = null;\r\n            }\r\n\r\n            // 删除预览内容并重新插入\r\n            const success = await editor.edit(editBuilder => {\r\n                editBuilder.delete(range);\r\n                editBuilder.insert(this.originalPosition, textToInsert);\r\n            });\r\n\r\n            if (!success) {\r\n                this.logger.debug('编辑操作失败');\r\n                return;\r\n            }\r\n\r\n            // 等待文档保存\r\n            if (editor.document.isDirty) {\r\n                await editor.document.save();\r\n            }\r\n\r\n            // 将接受的补全内容保存到缓存\r\n            if (this.configManager.isCacheEnabled() && this.lastContext && textToInsert) {\r\n                this.logger.debug('将已接受的补全内容保存到缓存');\r\n                try {\r\n                    await this.cacheManager.put(this.lastContext, textToInsert);\r\n                } catch (error) {\r\n                    this.logger.debug(`保存补全内容到缓存时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n                }\r\n            }\r\n\r\n            // 移动光标到插入内容的末尾\r\n            const newPosition = new vscode.Position(\r\n                this.originalPosition.line + lines.length - 1,\r\n                lines[lines.length - 1].length + (lines.length === 1 ? this.originalPosition.character : 0)\r\n            );\r\n            editor.selection = new vscode.Selection(newPosition, newPosition);\r\n            \r\n            // 重置所有状态\r\n            this.lastDecorator = null;\r\n            this.lastInsertText = null;\r\n            this.lastPreviewPosition = null;\r\n            this.lastPosition = null;\r\n            this.originalPosition = null;\r\n            this.lastShownCompletion = null;\r\n\r\n            this.logger.debug('补全内容已成功应用');\r\n        } catch (error) {\r\n            this.logger.error('接受补全时出错', error);\r\n            // 如果出错，确保清除所有状态\r\n            await this.clearPreview();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 标记补全已显示\r\n     */\r\n    public markDisplayed(completionId: string, outcome: any) {\r\n        this.logger.debug(`标记补全已显示: ${completionId}`);\r\n        // 记录outcome相关信息\r\n        if (outcome) {\r\n            this.logger.debug(`补全长度: ${outcome.completion?.length || 0}, 是否来自缓存: ${outcome.cacheHit || false}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 应用补全内容到编辑器\r\n     */\r\n    public async applyCompletion(editor: vscode.TextEditor, position: vscode.Position, text: string): Promise<void> {\r\n        try {\r\n            if (!text || text.trim().length === 0) {\r\n                this.logger.debug('补全内容为空，不应用');\r\n                return;\r\n            }\r\n\r\n            // 处理补全内容\r\n            let processedText = text;\r\n            \r\n            // 移除可能存在的代码块标记\r\n            if (processedText.startsWith('```')) {\r\n                const langMatch = processedText.match(/^```(\\w+)\\n/);\r\n                if (langMatch) {\r\n                    processedText = processedText.substring(langMatch[0].length);\r\n                } else {\r\n                    processedText = processedText.substring(3);\r\n                }\r\n            }\r\n            if (processedText.endsWith('```')) {\r\n                processedText = processedText.substring(0, processedText.length - 3);\r\n            }\r\n            \r\n            // 编辑文档插入补全内容\r\n            const success = await editor.edit(editBuilder => {\r\n                editBuilder.insert(position, processedText);\r\n            });\r\n\r\n            if (success) {\r\n                // 应用成功，将光标移动到插入的文本末尾\r\n                const insertedLines = processedText.split('\\n');\r\n                const lastLineLength = insertedLines[insertedLines.length - 1].length;\r\n                \r\n                let newPosition;\r\n                if (insertedLines.length > 1) {\r\n                    // 插入了多行文本\r\n                    newPosition = new vscode.Position(\r\n                        position.line + insertedLines.length - 1,\r\n                        insertedLines.length > 1 ? lastLineLength : position.character + lastLineLength\r\n                    );\r\n                } else {\r\n                    // 插入了单行文本\r\n                    newPosition = new vscode.Position(position.line, position.character + processedText.length);\r\n                }\r\n                \r\n                // 设置新的光标位置\r\n                editor.selection = new vscode.Selection(newPosition, newPosition);\r\n                \r\n                // 确保编辑器视图能看到新的光标位置\r\n                editor.revealRange(new vscode.Range(newPosition, newPosition));\r\n                \r\n                // 更新最后位置\r\n                this.lastPosition = newPosition;\r\n            } else {\r\n                this.logger.debug('应用补全内容失败，编辑操作返回false');\r\n            }\r\n        } catch (error) {\r\n            this.logger.error('应用补全时出错', error);\r\n            throw error; // 重新抛出错误以便调用者处理\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取触发字符\r\n     */\r\n    public getTriggerCharacters(): string[] {\r\n        return ['.', '(', '{', '[', ',', ' ', '\\n'];\r\n    }\r\n\r\n    /**\r\n     * 提供代码补全项\r\n     */\r\n    public async provideCompletionItems(\r\n        document: vscode.TextDocument,\r\n        position: vscode.Position,\r\n        token: vscode.CancellationToken,\r\n        context: vscode.CompletionContext\r\n    ): Promise<vscode.CompletionItem[] | vscode.CompletionList | null> {\r\n        try {\r\n            // 记录触发信息\r\n            this.logger.debug(`触发补全，类型: ${context.triggerKind}, 字符: ${context.triggerCharacter || 'none'}`);\r\n\r\n            // 检查是否启用了代码补全\r\n            if (!this.configManager.isEnabled()) {\r\n                this.logger.debug('代码补全功能已禁用，不提供补全');\r\n                return null;\r\n            }\r\n\r\n            // 检查文件类型是否支持\r\n            if (!this.isFileTypeSupported(document)) {\r\n                this.logger.debug(`文件类型不支持: ${document.languageId}, 文件: ${document.fileName}`);\r\n                return null;\r\n            }\r\n\r\n            // 不要在SCM视图中补全\r\n            if (document.uri.scheme === \"vscode-scm\") {\r\n                this.logger.debug('SCM视图中不提供补全');\r\n                return null;\r\n            }\r\n\r\n            // 不要在多光标模式下补全\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (editor && editor.selections.length > 1) {\r\n                this.logger.debug('多光标模式下不提供补全');\r\n                return null;\r\n            }\r\n\r\n            // 创建中止信号\r\n            const completionId = uuidv4();\r\n            const controller = this.createAbortController(completionId);\r\n            const signal = controller.signal;\r\n            this.logger.debug(`创建补全请求: ${completionId}`);\r\n            \r\n            // 如果传入了token，监听取消事件\r\n            if (token) {\r\n                token.onCancellationRequested(() => controller.abort());\r\n            }\r\n\r\n            // 更新状态栏\r\n            this.statusBarItem.text = \"$(sync~spin) 生成补全...\";\r\n            this.statusBarItem.tooltip = \"正在生成代码补全\";\r\n            this.statusBarItem.show();\r\n\r\n            const startTime = Date.now();\r\n\r\n            // 收集上下文\r\n            const contextData = this.collectContext(document, position);\r\n            this.logger.debug(`收集上下文完成，前缀长度: ${contextData.prefix.length}, 后缀长度: ${contextData.suffix.length}`);\r\n            \r\n            // 从缓存中查找\r\n            let completion: string | null = null;\r\n            let cacheHit = false;\r\n            \r\n            if (this.configManager.isCacheEnabled()) {\r\n                this.logger.debug('缓存已启用，尝试从缓存获取补全');\r\n                try {\r\n                    const cachedCompletion = await this.cacheManager.get(contextData.prefix);\r\n                    if (cachedCompletion) {\r\n                        completion = cachedCompletion;\r\n                        cacheHit = true;\r\n                        contextData.cacheHit = true;  // 添加缓存命中标记到上下文\r\n                        this.logger.debug('使用缓存的补全结果');\r\n                    } else {\r\n                        this.logger.debug('缓存未命中');\r\n                    }\r\n                } catch (error) {\r\n                    this.logger.debug(`从缓存获取补全时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n                }\r\n            } else {\r\n                this.logger.debug('缓存已禁用');\r\n            }\r\n\r\n            // 如果缓存中没有，则请求模型生成\r\n            if (!completion) {\r\n                try {\r\n                    // 准备提示\r\n                    const prompt = this.preparePrompt(contextData);\r\n                    this.logger.debug(`准备提示完成，提示长度: ${prompt.length}`);\r\n                    \r\n                    // 获取API配置\r\n                    const selectedModelConfig = this.configManager.getSelectedModelConfig();\r\n                    const modelName = selectedModelConfig.model;\r\n                    const temperature = selectedModelConfig.temperature || this.configManager.getTemperature();\r\n                    const maxTokens = selectedModelConfig.maxTokens || this.configManager.getMaxTokens();\r\n                    this.logger.debug(`API配置: 提供商=${selectedModelConfig.provider}, 模型=${modelName}, 温度=${temperature}, 最大token=${maxTokens}, API基础URL=${selectedModelConfig.apiBase}`);\r\n                    \r\n                    // 请求模型生成补全\r\n                    this.logger.debug('开始调用模型生成补全');\r\n                    completion = await this.client.generateCompletion(\r\n                        prompt,\r\n                        {\r\n                            temperature: temperature,\r\n                            maxTokens: maxTokens,\r\n                            model: modelName\r\n                        },\r\n                        signal\r\n                    );\r\n                    \r\n                    // 如果请求被中止，返回null\r\n                    if (signal.aborted) {\r\n                        this.logger.debug('补全请求被中止');\r\n                        this.statusBarItem.text = \"$(code) 补全\";\r\n                        this.statusBarItem.tooltip = \"Ollama代码补全\";\r\n                        return null;\r\n                    }\r\n                    \r\n                    if (completion) {\r\n                        this.logger.debug(`模型生成补全成功，原始补全长度: ${completion.length}`);\r\n                    } else {\r\n                        this.logger.debug('模型返回空补全');\r\n                    }\r\n                    \r\n                    // 处理补全结果\r\n                    completion = this.processCompletionResult(completion, contextData);\r\n                    \r\n                    if (completion) {\r\n                        this.logger.debug(`处理后的补全长度: ${completion.length}`);\r\n                    } else {\r\n                        this.logger.debug('处理后补全为空');\r\n                    }\r\n                    \r\n                    // 保存到缓存\r\n                    if (this.configManager.isCacheEnabled() && completion) {\r\n                        this.logger.debug('将补全结果保存到缓存');\r\n                        await this.cacheManager.put(contextData.prefix, completion);\r\n                    }\r\n                } catch (error) {\r\n                    if (signal.aborted) {\r\n                        this.logger.debug('补全请求被中止');\r\n                        this.statusBarItem.text = \"$(code) 补全\";\r\n                        this.statusBarItem.tooltip = \"Ollama代码补全\";\r\n                        return null;\r\n                    }\r\n                    \r\n                    this.logger.error(`生成补全时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n                    this.onError(error);\r\n                    this.statusBarItem.text = \"$(code) 补全\";\r\n                    this.statusBarItem.tooltip = \"Ollama代码补全\";\r\n                    return null;\r\n                }\r\n            } else {\r\n                // 如果是缓存的结果，也需要处理\r\n                completion = this.processCompletionResult(completion, contextData);\r\n            }\r\n\r\n            // 如果没有生成补全内容，返回null\r\n            if (!completion) {\r\n                this.logger.debug('没有生成补全内容，返回null');\r\n                this.statusBarItem.text = \"$(code) 补全\";\r\n                this.statusBarItem.tooltip = \"Ollama代码补全\";\r\n                return null;\r\n            }\r\n\r\n            // 记录结果\r\n            this.lastCompletionResult = completion;\r\n            this.lastContext = contextData.prefix;\r\n            this.lastPosition = position;\r\n            this.logger.debug(`记录补全结果，长度: ${completion.length}`);\r\n\r\n            // 构建补全结果对象\r\n            const outcome = {\r\n                time: Date.now() - startTime,\r\n                completion,\r\n                prefix: contextData.prefix,\r\n                suffix: contextData.suffix,\r\n                prompt: contextData.prompt,\r\n                modelProvider: this.configManager.getSelectedModelConfig().provider,\r\n                modelName: this.configManager.getSelectedModelConfig().model,\r\n                cacheHit,\r\n                filepath: document.uri.toString(),\r\n                numLines: completion.split(\"\\n\").length,\r\n                completionId,\r\n                timestamp: Date.now(),\r\n            };\r\n\r\n            // 标记为已显示\r\n            this.markDisplayed(completionId, outcome);\r\n            this.lastShownCompletion = outcome;\r\n\r\n            // 创建补全项\r\n            const item = new vscode.CompletionItem(\r\n                completion.split('\\n')[0] + '...',\r\n                vscode.CompletionItemKind.Snippet\r\n            );\r\n            \r\n            // 设置插入文本\r\n            item.insertText = completion;\r\n            \r\n            // 设置详细信息\r\n            item.detail = '基于上下文的AI补全';\r\n            \r\n            // 设置文档\r\n            item.documentation = new vscode.MarkdownString(\r\n                '```' + document.languageId + '\\n' + completion + '\\n```'\r\n            );\r\n            \r\n            // 设置排序文本，确保我们的补全项排在前面\r\n            item.sortText = '0';\r\n            \r\n            // 更新状态栏\r\n            this.statusBarItem.text = \"TabAutocomplete\";\r\n            this.statusBarItem.tooltip = \"TabAutocomplete代码补全\";\r\n            this.logger.debug('成功创建补全项，返回补全结果');\r\n\r\n            // 设置预览\r\n            await this.setPreview(completion, position);\r\n\r\n            return [item];\r\n        } catch (error) {\r\n            this.logger.error(`provideCompletionItems方法出错: ${error instanceof Error ? error.message : String(error)}`);\r\n            this.onError(error);\r\n            return null;\r\n        } finally {\r\n            this.statusBarItem.text = \"TabAutocomplete\";\r\n            this.statusBarItem.tooltip = \"TabAutocomplete代码补全\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 准备提示\r\n     */\r\n    private preparePrompt(contextData: any): string {\r\n        // 获取提示模板并替换占位符\r\n        const template = this.configManager.getPromptTemplate();\r\n        return template.replace('${prefix}', contextData.prefix+\"TODO\"+contextData.suffix+\"\\n从TODO这一行开始补全，不要返回上下文中重复的内容\");\r\n    }\r\n\r\n    /**\r\n     * 处理补全结果\r\n     */\r\n    private processCompletionResult(completion: string | null, contextData: any): string | null {\r\n        if (!completion) {\r\n            return null;\r\n        }\r\n        \r\n        // 移除可能的代码块标记\r\n        let processedText = completion;\r\n        this.logger.debug('补全的内容如下\\n', processedText);\r\n        if (processedText.startsWith('```')) {\r\n            const langMatch = processedText.match(/^```(\\w+)\\n/);\r\n            if (langMatch) {\r\n                processedText = processedText.substring(langMatch[0].length);\r\n            } else {\r\n                processedText = processedText.substring(3);\r\n            }\r\n        }\r\n        if (processedText.endsWith('```')) {\r\n            processedText = processedText.substring(0, processedText.length - 3);\r\n        }\r\n        processedText = processedText.replace(/^\\n+|\\n+$/g, '');\r\n        const processedTextlines = processedText.split('\\n');\r\n\r\n        // 检查是否为单行补全\r\n        if (processedTextlines.length == 1) {\r\n            // 获取当前行的内容\r\n            const currentLine = contextData.prefix.split('\\n').pop() || '';\r\n            // 如果补全内容以当前行结尾，说明是重复的\r\n            if (processedText.endsWith(currentLine)) {\r\n                this.logger.debug('跳过重复的单行补全内容');\r\n                return null;\r\n            }\r\n            // 如果补全内容包含当前行，移除重复部分\r\n            if (processedText.includes(currentLine)) {\r\n                processedText = processedText.substring(currentLine.length);\r\n                this.logger.debug('移除单行补全中的重复内容');\r\n            }\r\n\r\n            // 检查当前行的最后一个单词是否与补全内容的开头重复\r\n            const currentWords = currentLine.trim().split(/\\s+/);\r\n            const lastWord = currentWords[currentWords.length - 1];\r\n            if (lastWord && processedText.trimStart().startsWith(lastWord)) {\r\n                processedText = processedText.trimStart().substring(lastWord.length).trimStart();\r\n                this.logger.debug(`移除重复的开头单词: ${lastWord}`);\r\n            }\r\n            \r\n            // 检查当前行尾部和补全内容开头的重复\r\n            let maxOverlap = 0;\r\n            for (let i = 1; i <= Math.min(currentLine.length, processedText.length); i++) {\r\n                const suffix = currentLine.slice(-i);\r\n                const prefix = processedText.slice(0, i);\r\n                if (suffix === prefix) {\r\n                    maxOverlap = i;\r\n                }\r\n            }\r\n            if (maxOverlap > 0) {\r\n                processedText = processedText.slice(maxOverlap);\r\n                this.logger.debug(`移除重复的重叠部分，长度: ${maxOverlap}`);\r\n            }\r\n        } else {\r\n            // 多行补全的重复检查\r\n            let text = contextData.prefix + contextData.suffix;\r\n            const textlines = text.split('\\n');\r\n            const textlinesset = new Set<string>();\r\n            for(const line of textlines){\r\n                textlinesset.add(line.trim());\r\n            }\r\n\r\n            // 获取当前行的内容和缩进\r\n            const currentLine = contextData.prefix.split('\\n').pop() || '';\r\n            const currentIndent = currentLine.match(/^[\\s\\t]*/)?.[0] || '';\r\n            const currentWords = currentLine.trim().split(/\\s+/);\r\n            const lastWord = currentWords[currentWords.length - 1];\r\n\r\n            // 检查第一行是否与当前行的最后一个单词重复\r\n            if (lastWord && processedTextlines[0].trimStart().startsWith(lastWord)) {\r\n                processedTextlines[0] = processedTextlines[0].trimStart().substring(lastWord.length).trimStart();\r\n                this.logger.debug(`移除多行补全第一行中重复的开头单词: ${lastWord}`);\r\n            }\r\n\r\n            // 检查每一行是否完全重复\r\n            const newLines: string[] = [];\r\n\r\n            // 处理所有行，第一行使用当前缩进，后续行增加一级缩进\r\n            for (let i = 0; i < processedTextlines.length; i++) {\r\n                const line = processedTextlines[i];\r\n                if (!textlinesset.has(line.trim())) {\r\n                    if (i === 0) {\r\n                        // 第一行使用当前行的缩进\r\n                        newLines.push(line);\r\n                    } else {\r\n                        // 后续行增加一级缩进（在当前缩进基础上再加一个缩进）\r\n                        newLines.push(currentIndent + line);\r\n                    }\r\n                } else {\r\n                    this.logger.debug(`跳过重复的行: ${line.trim()}`);\r\n                }\r\n            }\r\n\r\n            // 如果所有行都被移除了，返回null\r\n            if (newLines.length === 0) {\r\n                this.logger.debug('所有行都是重复的，跳过补全');\r\n                return null;\r\n            }\r\n\r\n            // 更新处理后的文本\r\n            processedText = newLines.join('\\n');\r\n        }\r\n\r\n        return processedText;\r\n    }\r\n\r\n    /**\r\n     * 收集上下文\r\n     */\r\n    private collectContext(\r\n        document: vscode.TextDocument,\r\n        position: vscode.Position\r\n    ): any {\r\n        // 获取当前文件的内容\r\n        const text = document.getText();\r\n        const offset = document.offsetAt(position);\r\n        \r\n        // 获取上下文行数\r\n        const maxContextLines = this.configManager.getMaxContextLines();\r\n\r\n        // 分割前缀和后缀\r\n        const prefix = text.substring(-maxContextLines, offset);\r\n        const suffix = text.substring(offset,maxContextLines);\r\n        \r\n        // 获取导入语句\r\n        const imports = this.getImportStatements(document);\r\n        \r\n        // 构建上下文\r\n        const context = {\r\n            prefix,\r\n            suffix,\r\n            prompt: '',\r\n            imports,\r\n            language: document.languageId,\r\n            lineCount: document.lineCount,\r\n            fileName: document.fileName\r\n        };\r\n        \r\n        return context;\r\n    }\r\n\r\n    /**\r\n     * 获取导入语句\r\n     */\r\n    private getImportStatements(document: vscode.TextDocument): string[] {\r\n        const text = document.getText();\r\n        const lines = text.split('\\n');\r\n        const imports: string[] = [];\r\n        \r\n        // 根据语言类型识别导入语句\r\n        const language = document.languageId;\r\n        \r\n        // 正则表达式匹配不同语言的导入语句\r\n        let importRegex: RegExp;\r\n        \r\n        switch (language) {\r\n            case 'javascript':\r\n            case 'typescript':\r\n            case 'javascriptreact':\r\n            case 'typescriptreact':\r\n                importRegex = /^(import|export)\\s+.*/;\r\n                break;\r\n            case 'python':\r\n                importRegex = /^(import|from)\\s+.*/;\r\n                break;\r\n            case 'java':\r\n            case 'kotlin':\r\n                importRegex = /^import\\s+.*/;\r\n                break;\r\n            case 'go':\r\n                importRegex = /^import\\s+[\\(\\\"].*[\\)\\\"]$/;\r\n                break;\r\n            case 'rust':\r\n                importRegex = /^(use|extern crate)\\s+.*/;\r\n                break;\r\n            case 'c':\r\n            case 'cpp':\r\n            case 'csharp':\r\n                importRegex = /^#include\\s+.*/;\r\n                break;\r\n            case 'php':\r\n                importRegex = /^(use|require|include|require_once|include_once)\\s+.*/;\r\n                break;\r\n            case 'ruby':\r\n                importRegex = /^(require|include|extend|load|autoload)\\s+.*/;\r\n                break;\r\n            default:\r\n                // 默认匹配常见的导入关键字\r\n                importRegex = /^(import|export|require|include|use|from)\\s+.*/;\r\n        }\r\n        \r\n        // 收集导入语句\r\n        for (const line of lines) {\r\n            if (importRegex.test(line.trim())) {\r\n                imports.push(line);\r\n            }\r\n        }\r\n        \r\n        return imports;\r\n    }\r\n\r\n    /**\r\n     * 检查文件类型是否支持\r\n     */\r\n    public isFileTypeSupported(document: vscode.TextDocument): boolean {\r\n        try {\r\n            // 获取文件扩展名和语言ID\r\n            const fileName = document.fileName;\r\n            const fileExt = fileName.substring(fileName.lastIndexOf('.'));\r\n            const languageId = document.languageId;\r\n            \r\n            // 常见编程语言列表 - 如果用户没有明确配置，这些语言默认支持\r\n            const commonLanguages = [\r\n                'javascript', 'typescript', 'python', 'java', 'c', 'cpp', \r\n                'csharp', 'go', 'rust', 'php', 'ruby', 'html', 'css'\r\n            ];\r\n            \r\n            // 记录调试信息\r\n            this.logger.debug(`检查文件类型支持: 扩展名=${fileExt}, 语言ID=${languageId}`);\r\n            \r\n            // 1. 首先检查全局启用状态\r\n            if (!this.configManager.isEnabled()) {\r\n                this.logger.debug('插件全局禁用');\r\n                return false;\r\n            }\r\n            \r\n            // 2. 检查是否在禁用列表中\r\n            try {\r\n                const disabledTypesArr = this.configManager.getDisabledFileTypes();\r\n                const disabledTypes = Array.isArray(disabledTypesArr) ? disabledTypesArr : [];\r\n                \r\n                if (disabledTypes.includes(fileExt) || disabledTypes.includes(languageId)) {\r\n                    this.logger.debug(`文件类型在禁用列表中: ${disabledTypes.join(',')}`);\r\n                    return false;\r\n                }\r\n            } catch (error) {\r\n                this.logger.debug(`获取禁用类型时出错: ${error}`);\r\n            }\r\n            \r\n            // 3. 检查是否在启用列表中\r\n            try {\r\n                const enabledTypesArr = this.configManager.getEnabledFileTypes();\r\n                \r\n                // 确保我们有一个数组\r\n                const enabledTypes = Array.isArray(enabledTypesArr) ? enabledTypesArr : [];\r\n                \r\n                // 记录启用类型\r\n                this.logger.debug(`启用类型: ${JSON.stringify(enabledTypes)}`);\r\n                \r\n                // 如果启用了所有类型\r\n                if (enabledTypes.includes('*') || enabledTypes.includes('all')) {\r\n                    this.logger.debug('支持所有文件类型');\r\n                    return true;\r\n                }\r\n                \r\n                // 检查扩展名或语言ID是否明确启用\r\n                if (enabledTypes.includes(fileExt) || enabledTypes.includes(languageId)) {\r\n                    this.logger.debug(`文件类型明确启用: ${fileExt} 或 ${languageId}`);\r\n                    return true;\r\n                }\r\n                \r\n                // 如果是常见编程语言，但没有明确禁用，则支持\r\n                if (commonLanguages.includes(languageId)) {\r\n                    this.logger.debug(`常见编程语言自动支持: ${languageId}`);\r\n                    return true;\r\n                }\r\n            } catch (error) {\r\n                this.logger.debug(`获取启用类型时出错: ${error}`);\r\n                \r\n                // 如果出错，默认支持常见编程语言\r\n                if (commonLanguages.includes(languageId)) {\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n            this.logger.debug(`文件类型不支持: ${languageId}, ${fileExt}`);\r\n            return false;\r\n        } catch (error) {\r\n            this.logger.error(`检查文件类型支持时出错: ${error}`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查是否已注册\r\n     */\r\n    public isRegistered(): boolean {\r\n        return this.isRegisteredFlag;\r\n    }\r\n\r\n    /**\r\n     * 设置注册状态\r\n     */\r\n    public setRegistered(value: boolean): void {\r\n        this.isRegisteredFlag = value;\r\n    }\r\n\r\n    /**\r\n     * 释放资源\r\n     */\r\n    public dispose(): void {\r\n        this.cancel();\r\n        this.logger.debug('CompletionProvider 已释放');\r\n    }\r\n\r\n    /**\r\n     * 设置最后使用的装饰器\r\n     */\r\n    public setLastDecorator(decorator: vscode.TextEditorDecorationType): void {\r\n        // 如果已经有装饰器，先清除它\r\n        this.clearPreview();\r\n        this.lastDecorator = decorator;\r\n    }\r\n\r\n    /**\r\n     * 设置最后的插入文本\r\n     */\r\n    public setLastInsertText(text: string): void {\r\n        this.lastInsertText = text;\r\n    }\r\n\r\n    /**\r\n     * 设置最后的位置\r\n     */\r\n    public setLastPosition(position: vscode.Position): void {\r\n        this.lastPosition = position;\r\n    }\r\n\r\n    /**\r\n     * 设置最后的预览位置\r\n     */\r\n    public setLastPreviewPosition(position: vscode.Position | null): void {\r\n        this.lastPreviewPosition = position;\r\n    }\r\n\r\n    /**\r\n     * 获取最后的插入文本\r\n     */\r\n    public getLastInsertText(): string | null {\r\n        return this.lastInsertText;\r\n    }\r\n\r\n    /**\r\n     * 获取最后的位置\r\n     */\r\n    public getLastPosition(): vscode.Position | null {\r\n        return this.lastPosition;\r\n    }\r\n\r\n    /**\r\n     * 检查是否有活动的预览\r\n     */\r\n    public hasActivePreview(): boolean {\r\n        // 检查所有必要的预览状态\r\n        const hasDecorator = this.lastDecorator !== null;\r\n        const hasInsertText = this.lastInsertText !== null && this.lastInsertText.length > 0;\r\n        const hasPosition = this.lastPosition !== null;\r\n        const hasPreviewPosition = this.lastPreviewPosition !== null;\r\n        \r\n        // 确保编辑器中的装饰器仍然存在\r\n        const editor = vscode.window.activeTextEditor;\r\n        \r\n        // 所有条件都必须满足才认为有活动预览\r\n        return hasDecorator && hasInsertText && hasPosition && hasPreviewPosition && editor !== undefined;\r\n    }\r\n\r\n    /**\r\n     * 清除预览\r\n     */\r\n    public async clearPreview(): Promise<void> {\r\n        if(this.lastDecorator == null){\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const editor = vscode.window.activeTextEditor;\r\n            \r\n            // 先清除装饰器\r\n            if (this.lastDecorator) {\r\n                this.lastDecorator.dispose();\r\n                this.lastDecorator = null;\r\n            }\r\n            \r\n            // 如果有插入的内容，需要删除它\r\n            if (this.lastInsertText && editor && this.originalPosition) {                \r\n                const lines = this.lastInsertText.split('\\n');\r\n                const endPosition = new vscode.Position(\r\n                    this.originalPosition.line + lines.length - 1,\r\n                    lines[lines.length - 1].length + (lines.length === 1 ? this.originalPosition.character : 0)\r\n                );\r\n                \r\n                await editor.edit(editBuilder => {\r\n                    const range = new vscode.Range(this.originalPosition, endPosition);\r\n                    editBuilder.delete(range);\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.logger.error('清除预览时出错', error);\r\n        }\r\n\r\n        this.lastDecorator = null;\r\n        this.lastInsertText = null;\r\n        this.lastPreviewPosition = null;\r\n        this.lastPosition = null;\r\n        this.originalPosition = null;\r\n        //this.lastShownCompletion = null;\r\n    }\r\n\r\n    /**\r\n     * 设置预览\r\n     */\r\n    public async setPreview(text: string, position: vscode.Position): Promise<void> {\r\n        try {\r\n            const editor = vscode.window.activeTextEditor;\r\n            if (!editor) {\r\n                return;\r\n            }\r\n\r\n            // 确保完全清除之前的预览\r\n            await this.clearPreview();\r\n            \r\n            // 等待一下确保清除操作完成\r\n            await new Promise(resolve => setTimeout(resolve, 50));\r\n            \r\n            // 将文本分割成行\r\n            const lines = text.split('\\n');\r\n\r\n            // 创建新的装饰器，使插入的内容看起来像预览\r\n            this.lastDecorator = vscode.window.createTextEditorDecorationType({\r\n                opacity: '0.6'\r\n            });\r\n\r\n            // 直接将补全内容插入到文档中\r\n            await editor.edit(editBuilder => {\r\n                editBuilder.insert(position, text);\r\n            });\r\n\r\n            // 计算装饰范围\r\n            const endPosition = new vscode.Position(\r\n                position.line + lines.length - 1,\r\n                lines[lines.length - 1].length + (lines.length === 1 ? position.character : 0)\r\n            );\r\n            const range = new vscode.Range(position, endPosition);\r\n\r\n            // 应用装饰器\r\n            editor.setDecorations(this.lastDecorator, [{ range }]);\r\n\r\n            // 保存状态\r\n            this.lastInsertText = text;\r\n            this.lastPosition = position;\r\n            this.lastPreviewPosition = position;\r\n            this.originalPosition = position;\r\n            \r\n            // 将光标设置到预览内容的开头\r\n            editor.selection = new vscode.Selection(position, position);\r\n            \r\n            // 确保编辑器视图能看到光标位置\r\n            editor.revealRange(new vscode.Range(position, position));\r\n            \r\n            this.logger.debug(`预览已设置，直接插入了${lines.length}行内容`);\r\n        } catch (error) {\r\n            this.logger.error('设置预览时出错', error);\r\n            await this.clearPreview();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取最后使用的装饰器\r\n     */\r\n    public getLastDecorator(): vscode.TextEditorDecorationType | null {\r\n        return this.lastDecorator;\r\n    }\r\n\r\n    /**\r\n     * 获取最后的预览位置\r\n     */\r\n    public getLastPreviewPosition(): vscode.Position | null {\r\n        return this.lastPreviewPosition;\r\n    }\r\n}\r\n","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport LRUCache from 'lru-cache';\r\nimport { Logger } from '../utils/logger';\r\nimport { calculateLevenshteinDistance } from '../utils/utils';\r\n\r\n/**\r\n * 代码片段接口\r\n */\r\ninterface CodeSnippet {\r\n    id: string;              // 唯一标识符\r\n    code: string;            // 代码内容\r\n    language: string;        // 编程语言\r\n    timestamp: number;       // 创建时间戳\r\n    context: string;         // 上下文信息（如函数名、类名）\r\n    filePath: string;        // 文件路径\r\n    metadata: {              // 元数据\r\n        tags: string[];      // 关键词标签\r\n        frequency: number;   // 使用频率\r\n    };\r\n}\r\n\r\n/**\r\n * 缓存管理器\r\n * 负责存储和检索用户最近的代码片段，用于提高补全的相关性\r\n */\r\nexport class CacheManager {\r\n    private static readonly CACHE_KEY = 'ollamaCodeCompletionCache';\r\n    private codeSnippets: CodeSnippet[] = [];\r\n    private lruCache: LRUCache<string, CodeSnippet>;\r\n    private logger: Logger;\r\n    \r\n    constructor(\r\n        private storage: vscode.Memento, \r\n        private configManager: ConfigManager\r\n    ) {\r\n        this.logger = Logger.getInstance();\r\n        \r\n        // 初始化LRU缓存\r\n        this.lruCache = new LRUCache<string, CodeSnippet>({\r\n            max: this.configManager.getMaxSnippets(),\r\n            maxAge: this.configManager.getRetentionPeriodHours() * 60 * 60 * 1000, // 转换为毫秒\r\n        });\r\n        \r\n        this.logger.debug(`初始化缓存管理器, 最大条目数: ${this.configManager.getMaxSnippets()}, 保留时间: ${this.configManager.getRetentionPeriodHours()}小时`);\r\n        \r\n        // 从存储中加载缓存\r\n        this.loadCache();\r\n    }\r\n    \r\n    /**\r\n     * 从存储中加载缓存\r\n     */\r\n    private loadCache(): void {\r\n        this.logger.debug('从存储中加载缓存');\r\n        const cachedData = this.storage.get<CodeSnippet[]>(CacheManager.CACHE_KEY, []);\r\n        \r\n        if (cachedData && cachedData.length) {\r\n            this.codeSnippets = cachedData;\r\n            \r\n            // 将缓存的代码片段添加到LRU缓存\r\n            for (const snippet of this.codeSnippets) {\r\n                this.lruCache.set(snippet.id, snippet);\r\n            }\r\n            \r\n            this.logger.debug(`已加载 ${this.codeSnippets.length} 个缓存的代码片段`);\r\n            \r\n            // 清理过期的缓存\r\n            this.cleanExpiredCache();\r\n        } else {\r\n            this.logger.debug('没有找到缓存的代码片段');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 清理过期的缓存\r\n     */\r\n    private cleanExpiredCache(): void {\r\n        this.logger.debug('清理过期的缓存片段');\r\n        const now = Date.now();\r\n        const retentionPeriod = this.configManager.getRetentionPeriodHours() * 60 * 60 * 1000; // 转换为毫秒\r\n        \r\n        let expiredCount = 0;\r\n        this.codeSnippets = this.codeSnippets.filter(snippet => {\r\n            const isExpired = (now - snippet.timestamp) > retentionPeriod;\r\n            if (isExpired) {\r\n                expiredCount++;\r\n                // 从LRU缓存中移除\r\n                this.lruCache.del(snippet.id);\r\n            }\r\n            return !isExpired;\r\n        });\r\n        \r\n        if (expiredCount > 0) {\r\n            this.logger.debug(`已清理 ${expiredCount} 个过期的缓存片段`);\r\n            this.saveCache();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 保存缓存到存储\r\n     */\r\n    private saveCache(): void {\r\n        this.logger.debug(`保存 ${this.codeSnippets.length} 个代码片段到存储`);\r\n        this.storage.update(CacheManager.CACHE_KEY, this.codeSnippets);\r\n    }\r\n    \r\n    /**\r\n     * 缓存文档变化\r\n     * 当文档变化时调用此方法，提取并缓存有意义的代码片段\r\n     */\r\n    public cacheDocumentChanges(event: vscode.TextDocumentChangeEvent): void {\r\n        if (!this.configManager.isCacheEnabled()) {\r\n            return;\r\n        }\r\n        \r\n        // 检查变更是否有意义\r\n        if (!this.isSignificantChange(event.contentChanges)) {\r\n            return;\r\n        }\r\n        \r\n        this.logger.debug(`处理文档变更: ${event.document.fileName}`);\r\n        \r\n        try {\r\n            for (const change of event.contentChanges) {\r\n                const range = change.range;\r\n                \r\n                // 获取更改行的上下文\r\n                const context = this.extractContext(event.document, range);\r\n                \r\n                // 如果上下文为空，跳过\r\n                if (!context) {\r\n                    continue;\r\n                }\r\n                \r\n                // 提取标签（关键词）\r\n                const language = event.document.languageId;\r\n                const code = change.text;\r\n                \r\n                if (code.length < 10) {\r\n                    this.logger.debug('代码片段过短，忽略');\r\n                    continue; // 忽略过短的代码片段\r\n                }\r\n                \r\n                const tags = this.extractTags(code, context, language);\r\n                \r\n                if (tags.length === 0) {\r\n                    this.logger.debug('无法提取标签，忽略代码片段');\r\n                    continue; // 如果没有提取到标签，忽略\r\n                }\r\n                \r\n                // 创建代码片段对象\r\n                const snippet: CodeSnippet = {\r\n                    id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n                    code,\r\n                    language,\r\n                    timestamp: Date.now(),\r\n                    context,\r\n                    filePath: event.document.fileName,\r\n                    metadata: {\r\n                        tags,\r\n                        frequency: 1\r\n                    }\r\n                };\r\n                \r\n                // 添加到缓存\r\n                this.addSnippet(snippet);\r\n                \r\n                this.logger.debug(`缓存了新的代码片段，ID: ${snippet.id}, 语言: ${language}, 标签: ${tags.join(', ')}`);\r\n            }\r\n        } catch (error) {\r\n            this.logger.error(`缓存文档变更时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 判断是否为有意义的变更\r\n     */\r\n    private isSignificantChange(changes: readonly vscode.TextDocumentContentChangeEvent[]): boolean {\r\n        // 检查是否有足够长度的文本变更\r\n        for (const change of changes) {\r\n            // 忽略仅包含空格、换行或单个字符的变更\r\n            if (change.text.trim().length > 3) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * 提取变更的上下文信息\r\n     */\r\n    private extractContext(document: vscode.TextDocument, range: vscode.Range): string {\r\n        // 尝试获取包含变更的更大范围（如函数、类定义）\r\n        let contextStart = Math.max(0, range.start.line - 10);\r\n        let contextEnd = Math.min(document.lineCount - 1, range.end.line + 5);\r\n        \r\n        // 获取上下文文本\r\n        const contextRange = new vscode.Range(\r\n            new vscode.Position(contextStart, 0),\r\n            new vscode.Position(contextEnd, document.lineAt(contextEnd).text.length)\r\n        );\r\n        \r\n        return document.getText(contextRange);\r\n    }\r\n    \r\n    /**\r\n     * 提取代码中的关键词标签\r\n     */\r\n    private extractTags(code: string, context: string, language: string): string[] {\r\n        const tags: string[] = [];\r\n        \r\n        // 根据语言提取不同的关键词\r\n        switch (language) {\r\n            case 'javascript':\r\n            case 'typescript':\r\n                this.extractJavaScriptTags(code, context, tags);\r\n                break;\r\n            case 'python':\r\n                this.extractPythonTags(code, context, tags);\r\n                break;\r\n            // 可以添加更多语言的支持\r\n            default:\r\n                this.extractGenericTags(code, context, tags);\r\n                break;\r\n        }\r\n        \r\n        this.logger.debug(`提取的标签: ${tags.join(', ')}`);\r\n        return tags;\r\n    }\r\n    \r\n    /**\r\n     * 从JavaScript/TypeScript代码中提取标签\r\n     */\r\n    private extractJavaScriptTags(_code: string, context: string, tags: string[]): void {\r\n        // 提取函数名和类名\r\n        const functionMatch = /function\\s+([a-zA-Z0-9_]+)\\s*\\(/g;\r\n        const classMatch = /class\\s+([a-zA-Z0-9_]+)\\s*/g;\r\n        const constMatch = /const\\s+([a-zA-Z0-9_]+)\\s*=/g;\r\n        const letMatch = /let\\s+([a-zA-Z0-9_]+)\\s*=/g;\r\n        \r\n        let match;\r\n        \r\n        while ((match = functionMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n        \r\n        while ((match = classMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n        \r\n        while ((match = constMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n        \r\n        while ((match = letMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 从Python代码中提取标签\r\n     */\r\n    private extractPythonTags(_code: string, context: string, tags: string[]): void {\r\n        // 提取函数名和类名\r\n        const functionMatch = /def\\s+([a-zA-Z0-9_]+)\\s*\\(/g;\r\n        const classMatch = /class\\s+([a-zA-Z0-9_]+)\\s*\\(?/g;\r\n        \r\n        let match;\r\n        \r\n        while ((match = functionMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n        \r\n        while ((match = classMatch.exec(context)) !== null) {\r\n            if (match[1] && !tags.includes(match[1])) {\r\n                tags.push(match[1]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 从通用代码中提取标签\r\n     */\r\n    private extractGenericTags(_code: string, context: string, tags: string[]): void {\r\n        // 提取所有可能的标识符\r\n        const identifierMatch = /\\b([a-zA-Z][a-zA-Z0-9_]{2,})\\b/g;\r\n        \r\n        let match;\r\n        const identifiers = new Set<string>();\r\n        \r\n        while ((match = identifierMatch.exec(context)) !== null) {\r\n            if (match[1] && !identifiers.has(match[1])) {\r\n                identifiers.add(match[1]);\r\n                \r\n                // 只将重要标识符（长度大于3的非关键字）添加为标签\r\n                if (match[1].length > 3 && !this.isCommonKeyword(match[1])) {\r\n                    tags.push(match[1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 检查是否为常见的编程关键字\r\n     */\r\n    private isCommonKeyword(word: string): boolean {\r\n        const commonKeywords = [\r\n            'function', 'class', 'const', 'let', 'var', 'if', 'else', 'for', 'while', \r\n            'return', 'import', 'export', 'from', 'async', 'await', 'try', 'catch',\r\n            'switch', 'case', 'break', 'default', 'continue', 'new', 'this', 'super',\r\n            'extends', 'implements', 'interface', 'typeof', 'instanceof'\r\n        ];\r\n        \r\n        return commonKeywords.includes(word.toLowerCase());\r\n    }\r\n    \r\n    /**\r\n     * 将代码片段添加到缓存\r\n     */\r\n    public addSnippet(snippet: CodeSnippet): void {\r\n        // 检查是否已有类似片段\r\n        const similarSnippet = this.findSimilarSnippet(snippet);\r\n        \r\n        if (similarSnippet) {\r\n            // 更新已有片段\r\n            this.logger.debug(`找到类似的片段，更新而不是添加新的`);\r\n            similarSnippet.timestamp = Date.now();\r\n            similarSnippet.metadata.frequency++;\r\n            \r\n            // 合并标签\r\n            for (const tag of snippet.metadata.tags) {\r\n                if (!similarSnippet.metadata.tags.includes(tag)) {\r\n                    similarSnippet.metadata.tags.push(tag);\r\n                }\r\n            }\r\n        } else {\r\n            // 添加新片段\r\n            this.codeSnippets.push(snippet);\r\n            this.lruCache.set(snippet.id, snippet);\r\n            \r\n            // 如果缓存已满，LRU缓存会自动删除最旧的项\r\n            this.logger.debug(`添加新片段到缓存，当前缓存大小: ${this.codeSnippets.length}`);\r\n        }\r\n        \r\n        // 保存到持久化存储\r\n        this.saveCache();\r\n    }\r\n    \r\n    /**\r\n     * 寻找相似的代码片段\r\n     */\r\n    private findSimilarSnippet(snippet: CodeSnippet): CodeSnippet | undefined {\r\n        for (const existing of this.codeSnippets) {\r\n            // 如果语言不同，跳过\r\n            if (existing.language !== snippet.language) {\r\n                continue;\r\n            }\r\n            \r\n            // 计算相似度\r\n            const similarity = this.calculateSimilarity(existing.code, snippet.code);\r\n            if (similarity > 0.8) { // 80%相似度阈值\r\n                return existing;\r\n            }\r\n        }\r\n        \r\n        return undefined;\r\n    }\r\n    \r\n    /**\r\n     * 计算两段代码的相似度 (0-1)\r\n     */\r\n    private calculateSimilarity(code1: string, code2: string): number {\r\n        // 简化的相似度计算，基于最长公共子序列\r\n        const distance = calculateLevenshteinDistance(code1, code2);\r\n        const maxLength = Math.max(code1.length, code2.length);\r\n        \r\n        return maxLength === 0 ? 1 : 1 - (distance / maxLength);\r\n    }\r\n    \r\n    /**\r\n     * 查找与当前上下文相关的代码\r\n     */\r\n    public findRelevantCode(\r\n        currentCode: string, \r\n        language: string, \r\n        maxResults: number = 3\r\n    ): string[] {\r\n        this.logger.debug(`查找相关代码，语言: ${language}`);\r\n        const startTime = Date.now();\r\n        \r\n        if (this.codeSnippets.length === 0) {\r\n            this.logger.debug('缓存为空，没有找到相关代码');\r\n            return [];\r\n        }\r\n        \r\n        // 提取当前代码的标签\r\n        const context = currentCode; // 使用当前代码作为上下文\r\n        const tags = this.extractTags(currentCode, context, language);\r\n        \r\n        if (tags.length === 0) {\r\n            this.logger.debug('无法从当前代码提取标签，无法找到相关代码');\r\n            return [];\r\n        }\r\n        \r\n        this.logger.debug(`当前代码标签: ${tags.join(', ')}`);\r\n        \r\n        // 对所有缓存的代码片段评分\r\n        const scoredSnippets = this.codeSnippets\r\n            .filter(s => s.language === language) // 仅考虑相同语言的片段\r\n            .map(snippet => {\r\n                const score = this.calculateRelevanceScore(snippet, tags, currentCode);\r\n                return { snippet, score };\r\n            })\r\n            .filter(item => item.score > 0) // 过滤掉不相关的片段\r\n            .sort((a, b) => b.score - a.score) // 按评分降序排序\r\n            .slice(0, maxResults); // 取前N个结果\r\n        \r\n        const result = scoredSnippets.map(item => item.snippet.code);\r\n        \r\n        const duration = Date.now() - startTime;\r\n        this.logger.debug(`找到 ${result.length} 个相关代码片段，耗时: ${duration}ms`);\r\n        if (result.length > 0) {\r\n            this.logger.debug(`最佳匹配得分: ${scoredSnippets[0].score.toFixed(2)}`);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * 计算代码片段与当前上下文的相关性评分\r\n     */\r\n    private calculateRelevanceScore(\r\n        snippet: CodeSnippet,\r\n        currentTags: string[],\r\n        currentCode: string\r\n    ): number {\r\n        let score = 0;\r\n        \r\n        // 1. 标签匹配度\r\n        for (const tag of currentTags) {\r\n            if (snippet.metadata.tags.includes(tag)) {\r\n                score += 0.2; // 每个匹配标签增加权重\r\n            }\r\n        }\r\n        \r\n        // 2. 代码相似度\r\n        const similarity = this.calculateSimilarity(snippet.code, currentCode);\r\n        score += similarity * 0.3;\r\n        \r\n        // 3. 使用频率\r\n        score += Math.min(snippet.metadata.frequency / 10, 0.3); // 最多加0.3分\r\n        \r\n        // 4. 时间衰减因子 (最近的代码片段得分更高)\r\n        const ageInHours = (Date.now() - snippet.timestamp) / (1000 * 60 * 60);\r\n        const recencyScore = Math.max(0, 0.2 - (ageInHours / 240) * 0.2); // 10天后降为0\r\n        score += recencyScore;\r\n        \r\n        return score;\r\n    }\r\n    \r\n    /**\r\n     * 清空缓存\r\n     */\r\n    public clearCache(): void {\r\n        this.logger.debug('清空所有缓存的代码片段');\r\n        this.codeSnippets = [];\r\n        this.lruCache.reset();\r\n        this.saveCache();\r\n    }\r\n    \r\n    /**\r\n     * 获取缓存的统计信息\r\n     */\r\n    public getStats(): { snippetCount: number; languageStats: Record<string, number> } {\r\n        const languageStats: Record<string, number> = {};\r\n        \r\n        for (const snippet of this.codeSnippets) {\r\n            if (!languageStats[snippet.language]) {\r\n                languageStats[snippet.language] = 0;\r\n            }\r\n            languageStats[snippet.language]++;\r\n        }\r\n        \r\n        return {\r\n            snippetCount: this.codeSnippets.length,\r\n            languageStats\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取缓存的补全内容\r\n     * @param prefix 前缀文本\r\n     * @returns 缓存的补全内容，如果没有找到则返回undefined\r\n     */\r\n    public async get(prefix: string): Promise<string | undefined> {\r\n        if (!this.configManager.isCacheEnabled()) {\r\n            return undefined;\r\n        }\r\n\r\n        this.logger.debug(`尝试从缓存中获取补全内容，前缀长度: ${prefix.length}`);\r\n        \r\n        // 使用前缀的哈希作为键\r\n        const key = this.hashString(prefix);\r\n        \r\n        // 从LRU缓存中获取\r\n        const cachedSnippet = this.lruCache.get(key);\r\n        \r\n        if (cachedSnippet) {\r\n            this.logger.debug(`缓存命中，返回缓存的补全内容`);\r\n            return cachedSnippet.code;\r\n        }\r\n        \r\n        this.logger.debug(`缓存未命中`);\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * 将补全内容存储到缓存中\r\n     * @param prefix 前缀文本\r\n     * @param completion 补全内容\r\n     */\r\n    public async put(prefix: string, completion: string): Promise<void> {\r\n        if (!this.configManager.isCacheEnabled() || !completion || completion.trim().length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.logger.debug(`将补全内容存储到缓存中，前缀长度: ${prefix.length}, 补全长度: ${completion.length}`);\r\n        \r\n        // 使用前缀的哈希作为键\r\n        const key = this.hashString(prefix);\r\n        \r\n        // 创建代码片段对象\r\n        const snippet: CodeSnippet = {\r\n            id: key,\r\n            code: completion,\r\n            language: 'unknown', // 这里可以传入实际的语言\r\n            timestamp: Date.now(),\r\n            context: prefix.slice(-200), // 存储前缀的最后200个字符作为上下文\r\n            filePath: '',\r\n            metadata: {\r\n                tags: [],\r\n                frequency: 1\r\n            }\r\n        };\r\n        \r\n        // 添加到LRU缓存\r\n        this.lruCache.set(key, snippet);\r\n        \r\n        // 添加到代码片段列表\r\n        const existingIndex = this.codeSnippets.findIndex(s => s.id === key);\r\n        if (existingIndex >= 0) {\r\n            this.codeSnippets[existingIndex] = snippet;\r\n        } else {\r\n            this.codeSnippets.push(snippet);\r\n        }\r\n        \r\n        // 保存缓存\r\n        this.saveCache();\r\n    }\r\n\r\n    /**\r\n     * 计算字符串的哈希值\r\n     * @param str 要哈希的字符串\r\n     * @returns 哈希字符串\r\n     */\r\n    private hashString(str: string): string {\r\n        let hash = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            const char = str.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash; // Convert to 32bit integer\r\n        }\r\n        return `hash_${Math.abs(hash).toString(16)}`;\r\n    }\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nfunction md5(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    }\n    else if (typeof bytes === 'string') {\n        bytes = Buffer.from(bytes, 'utf8');\n    }\n    return (0, crypto_1.createHash)('md5').update(bytes).digest();\n}\nexports.default = md5;\n","import * as vscode from 'vscode';\r\n\r\n/**\r\n * 模型提供商类型\r\n */\r\nexport enum ModelProvider {\r\n    OLLAMA = 'ollama',\r\n    DEEPSEEK = 'deepseek',\r\n    OPENAI = 'openai',\r\n    SILICONFLOW = 'siliconflow',\r\n    // 可以添加更多提供商\r\n}\r\n\r\n/**\r\n * 模型配置接口\r\n */\r\nexport interface ModelConfig {\r\n    title: string;\r\n    model: string;\r\n    provider: ModelProvider;\r\n    apiKey?: string;\r\n    apiBase?: string;\r\n    contextLength?: number;\r\n    temperature?: number;\r\n    maxTokens?: number;\r\n}\r\n\r\n/**\r\n * 基础API客户端接口\r\n * 所有模型提供商的客户端都应实现此接口\r\n */\r\nexport interface BaseClient {\r\n    /**\r\n     * 获取代码补全\r\n     * @param context 上下文信息\r\n     * @returns 补全结果文本\r\n     */\r\n    getCompletion(context: any): Promise<string | null>;\r\n    \r\n    /**\r\n     * 测试与API的连接\r\n     * @returns 连接测试结果\r\n     */\r\n    testConnection(): Promise<{success: boolean, message: string, models?: string[]}>;\r\n    \r\n    /**\r\n     * 生成补全\r\n     * @param prompt 提示词\r\n     * @param options 选项\r\n     * @param signal 中止信号\r\n     * @returns 生成的补全文本\r\n     */\r\n    generateCompletion(\r\n        prompt: string, \r\n        options: { temperature?: number; maxTokens?: number; model?: string }, \r\n        signal?: AbortSignal\r\n    ): Promise<string | null>;\r\n} ","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\n\r\n/**\r\n * 状态栏管理器\r\n * 在VSCode状态栏显示插件状态和提供快速操作\r\n */\r\nexport class StatusBarManager {\r\n    private statusBarItem: vscode.StatusBarItem;\r\n    \r\n    constructor(private configManager: ConfigManager) {\r\n        // 创建状态栏项\r\n        this.statusBarItem = vscode.window.createStatusBarItem(\r\n            vscode.StatusBarAlignment.Right,\r\n            100 // 优先级\r\n        );\r\n        \r\n        // 设置命令\r\n        this.statusBarItem.command = 'tabAutoComplete.toggleEnabled';\r\n        \r\n        // 初始化显示\r\n        this.updateStatus();\r\n        \r\n        // 显示状态栏\r\n        this.statusBarItem.show();\r\n    }\r\n    \r\n    /**\r\n     * 更新状态栏显示\r\n     */\r\n    public updateStatus(): void {\r\n        const isEnabled = this.configManager.isEnabled();\r\n        this.statusBarItem.text = isEnabled ? '$(sparkle) TabAutoComplete' : '$(stop) TabAutoComplete';\r\n        this.statusBarItem.tooltip = isEnabled ? 'TabAutoComplete已启用 (点击禁用)' : 'TabAutoComplete已禁用 (点击启用)';\r\n    }\r\n    \r\n    /**\r\n     * 获取状态栏项\r\n     * @returns 状态栏项对象\r\n     */\r\n    public getStatusBarItem(): vscode.StatusBarItem {\r\n        return this.statusBarItem;\r\n    }\r\n    \r\n    /**\r\n     * 显示临时信息\r\n     * @param message 要显示的消息\r\n     * @param timeout 显示时间（毫秒）\r\n     */\r\n    public showTemporaryMessage(message: string, timeout: number = 3000): void {\r\n        const originalText = this.statusBarItem.text;\r\n        const originalTooltip = this.statusBarItem.tooltip;\r\n        const originalBackground = this.statusBarItem.backgroundColor;\r\n        \r\n        // 显示临时消息\r\n        this.statusBarItem.text = `$(info) ${message}`;\r\n        this.statusBarItem.tooltip = message;\r\n        \r\n        // 一段时间后恢复原状态\r\n        setTimeout(() => {\r\n            this.statusBarItem.text = originalText;\r\n            this.statusBarItem.tooltip = originalTooltip;\r\n            this.statusBarItem.backgroundColor = originalBackground;\r\n        }, timeout);\r\n    }\r\n    \r\n    /**\r\n     * 显示请求中的状态\r\n     * @param show 是否显示请求中状态\r\n     */\r\n    public showRequestInProgress(show: boolean): void {\r\n        if (show) {\r\n            this.statusBarItem.text = `$(sync~spin) TabAutoComplete 请求中...`;\r\n            this.statusBarItem.tooltip = '正在发送请求';\r\n        } else {\r\n            this.updateStatus(); // 恢复正常状态\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 显示错误状态\r\n     * @param errorMessage 错误消息\r\n     */\r\n    public showError(errorMessage: string): void {\r\n        this.statusBarItem.text = `$(error) TabAutoComplete 错误`;\r\n        this.statusBarItem.tooltip = errorMessage;\r\n        this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.errorBackground');\r\n        \r\n        // 5秒后恢复正常状态\r\n        setTimeout(() => {\r\n            this.updateStatus();\r\n        }, 5000);\r\n    }\r\n    \r\n    /**\r\n     * 切换启用状态\r\n     */\r\n    public async toggleEnabled(): Promise<void> {\r\n        const isCurrentlyEnabled = this.configManager.isEnabled();\r\n        await this.configManager.setEnabled(!isCurrentlyEnabled);\r\n        this.updateStatus();\r\n        \r\n        // 显示通知\r\n        vscode.window.showInformationMessage(\r\n            isCurrentlyEnabled \r\n                ? 'TabAutoComplete已禁用' \r\n                : 'TabAutoComplete已启用'\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * 释放资源\r\n     */\r\n    public dispose(): void {\r\n        this.statusBarItem.dispose();\r\n    }\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateV1State = void 0;\nconst rng_js_1 = require(\"./rng.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nconst _state = {};\nfunction v1(options, buf, offset) {\n    let bytes;\n    const isV6 = options?._v6 ?? false;\n    if (options) {\n        const optionsKeys = Object.keys(options);\n        if (optionsKeys.length === 1 && optionsKeys[0] === '_v6') {\n            options = undefined;\n        }\n    }\n    if (options) {\n        bytes = v1Bytes(options.random ?? options.rng?.() ?? (0, rng_js_1.default)(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);\n    }\n    else {\n        const now = Date.now();\n        const rnds = (0, rng_js_1.default)();\n        updateV1State(_state, now, rnds);\n        bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? undefined : _state.clockseq, isV6 ? undefined : _state.node, buf, offset);\n    }\n    return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);\n}\nfunction updateV1State(state, now, rnds) {\n    state.msecs ??= -Infinity;\n    state.nsecs ??= 0;\n    if (now === state.msecs) {\n        state.nsecs++;\n        if (state.nsecs >= 10000) {\n            state.node = undefined;\n            state.nsecs = 0;\n        }\n    }\n    else if (now > state.msecs) {\n        state.nsecs = 0;\n    }\n    else if (now < state.msecs) {\n        state.node = undefined;\n    }\n    if (!state.node) {\n        state.node = rnds.slice(10, 16);\n        state.node[0] |= 0x01;\n        state.clockseq = ((rnds[8] << 8) | rnds[9]) & 0x3fff;\n    }\n    state.msecs = now;\n    return state;\n}\nexports.updateV1State = updateV1State;\nfunction v1Bytes(rnds, msecs, nsecs, clockseq, node, buf, offset = 0) {\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    if (!buf) {\n        buf = new Uint8Array(16);\n        offset = 0;\n    }\n    else {\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n    }\n    msecs ??= Date.now();\n    nsecs ??= 0;\n    clockseq ??= ((rnds[8] << 8) | rnds[9]) & 0x3fff;\n    node ??= rnds.slice(10, 16);\n    msecs += 12219292800000;\n    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    buf[offset++] = (tl >>> 24) & 0xff;\n    buf[offset++] = (tl >>> 16) & 0xff;\n    buf[offset++] = (tl >>> 8) & 0xff;\n    buf[offset++] = tl & 0xff;\n    const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;\n    buf[offset++] = (tmh >>> 8) & 0xff;\n    buf[offset++] = tmh & 0xff;\n    buf[offset++] = ((tmh >>> 24) & 0xf) | 0x10;\n    buf[offset++] = (tmh >>> 16) & 0xff;\n    buf[offset++] = (clockseq >>> 8) | 0x80;\n    buf[offset++] = clockseq & 0xff;\n    for (let n = 0; n < 6; ++n) {\n        buf[offset++] = node[n];\n    }\n    return buf;\n}\nexports.default = v1;\n","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport { Logger } from '../utils/logger';\r\nimport { BaseClient, ModelConfig, ModelProvider } from './baseClient';\r\n\r\n/**\r\n * OpenAI API客户端\r\n * 负责与OpenAI API通信，发送代码补全请求\r\n */\r\nexport class OpenAIClient implements BaseClient {\r\n    private logger: Logger;\r\n    private modelConfig: ModelConfig;\r\n    private readonly DEFAULT_API_BASE = 'https://api.openai.com/v1';\r\n\r\n    constructor(\r\n        private configManager: ConfigManager,\r\n        modelConfig: ModelConfig\r\n    ) {\r\n        this.logger = Logger.getInstance();\r\n        this.modelConfig = modelConfig;\r\n        \r\n        if (!this.modelConfig.apiBase) {\r\n            this.modelConfig.apiBase = this.DEFAULT_API_BASE;\r\n        }\r\n        \r\n        if (!this.modelConfig.apiKey) {\r\n            throw new Error('OpenAI API需要API密钥');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取代码补全\r\n     * @param context 上下文信息\r\n     * @returns 补全结果文本\r\n     */\r\n    public async getCompletion(context: any): Promise<string | null> {\r\n        try {\r\n            const prompt = this.buildPrompt(context);\r\n            \r\n            // 记录提示词（仅在调试模式下）\r\n            if (this.configManager.isDebugEnabled()) {\r\n                this.logger.debug(`完整提示词:\\n${prompt}`);\r\n            } else {\r\n                // 仅记录提示词的前100个字符\r\n                this.logger.debug(`提示词前100个字符: ${prompt.substring(0, 100)}...`);\r\n            }\r\n            \r\n            const temperature = this.modelConfig.temperature || this.configManager.getTemperature();\r\n            const maxTokens = this.modelConfig.maxTokens || this.configManager.getMaxTokens();\r\n            \r\n            // 构建请求数据\r\n            const requestData = {\r\n                model: this.modelConfig.model,\r\n                messages: [\r\n                    { role: \"user\", content: prompt }\r\n                ],\r\n                temperature: temperature,\r\n                max_tokens: maxTokens\r\n            };\r\n            \r\n            // 发送请求\r\n            this.logger.debug(`发送请求到 OpenAI API: ${this.modelConfig.apiBase}/chat/completions`);\r\n            \r\n            const response = await fetch(`${this.modelConfig.apiBase}/chat/completions`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${this.modelConfig.apiKey}`\r\n                },\r\n                body: JSON.stringify(requestData)\r\n            });\r\n            \r\n            // 检查响应状态\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.logger.error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n                return null;\r\n            }\r\n            \r\n            // 解析响应\r\n            const responseData = await response.json();\r\n            \r\n            // 提取补全文本\r\n            const completionText = responseData.choices[0]?.message?.content;\r\n            \r\n            if (!completionText) {\r\n                this.logger.error('API响应中没有找到补全文本');\r\n                return null;\r\n            }\r\n            \r\n            // 处理补全结果\r\n            return this.processCompletionResult(completionText, context);\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`获取补全时出错: ${error}`);\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 测试与API的连接\r\n     * @returns 连接测试结果\r\n     */\r\n    public async testConnection(): Promise<{success: boolean, message: string, models?: string[]}> {\r\n        this.logger.info(`测试与 OpenAI API 的连接`);\r\n        \r\n        try {\r\n            // 发送简单的模型列表请求\r\n            const response = await fetch(`${this.modelConfig.apiBase}/models`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.modelConfig.apiKey}`\r\n                }\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                return {\r\n                    success: false,\r\n                    message: `连接失败: ${response.status} ${response.statusText} - ${errorText}`\r\n                };\r\n            }\r\n            \r\n            const data = await response.json();\r\n            const models = data.data.map((model: any) => model.id);\r\n            \r\n            return {\r\n                success: true,\r\n                message: '连接成功',\r\n                models: models\r\n            };\r\n            \r\n        } catch (error) {\r\n            return {\r\n                success: false,\r\n                message: `连接失败: ${error}`\r\n            };\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 生成补全\r\n     * @param prompt 提示词\r\n     * @param options 选项\r\n     * @param signal 中止信号\r\n     * @returns 生成的补全文本\r\n     */\r\n    public async generateCompletion(\r\n        prompt: string, \r\n        options: { temperature?: number; maxTokens?: number; model?: string }, \r\n        signal?: AbortSignal\r\n    ): Promise<string | null> {\r\n        try {\r\n            const modelName = options.model || this.modelConfig.model;\r\n            const temperature = options.temperature !== undefined ? options.temperature : this.modelConfig.temperature || this.configManager.getTemperature();\r\n            const maxTokens = options.maxTokens || this.modelConfig.maxTokens || this.configManager.getMaxTokens();\r\n            \r\n            this.logger.debug(`生成补全: 模型=${modelName}, 温度=${temperature}, 最大令牌数=${maxTokens}`);\r\n            \r\n            // 构建请求数据\r\n            const requestData = {\r\n                model: modelName,\r\n                messages: [\r\n                    { role: \"user\", content: prompt }\r\n                ],\r\n                temperature: temperature,\r\n                max_tokens: maxTokens\r\n            };\r\n            \r\n            // 创建请求控制器\r\n            const controller = signal ? undefined : new AbortController();\r\n            const requestSignal = signal || controller?.signal;\r\n            \r\n            // 发送请求\r\n            const response = await fetch(`${this.modelConfig.apiBase}/chat/completions`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${this.modelConfig.apiKey}`\r\n                },\r\n                body: JSON.stringify(requestData),\r\n                signal: requestSignal\r\n            });\r\n            \r\n            // 检查响应状态\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.logger.error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n                return null;\r\n            }\r\n            \r\n            // 解析响应\r\n            const responseData = await response.json();\r\n            \r\n            // 提取补全文本\r\n            const completionText = responseData.choices[0]?.message?.content;\r\n            \r\n            if (!completionText) {\r\n                this.logger.error('API响应中没有找到补全文本');\r\n                return null;\r\n            }\r\n            \r\n            return completionText;\r\n            \r\n        } catch (error) {\r\n            if (error.name === 'AbortError') {\r\n                this.logger.info('请求被中止');\r\n                return null;\r\n            }\r\n            \r\n            this.logger.error(`生成补全时出错: ${error}`);\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 构建提示词\r\n     * @param context 上下文信息\r\n     * @returns 构建的提示词\r\n     */\r\n    private buildPrompt(context: any): string {\r\n        // 使用配置管理器中的提示模板\r\n        let promptTemplate = this.configManager.getPromptTemplate();\r\n        \r\n        // 替换模板中的占位符\r\n        return promptTemplate.replace('${prefix}', context.prefix);\r\n    }\r\n    \r\n    /**\r\n     * 处理补全结果\r\n     * @param completionText 补全文本\r\n     * @param _context 上下文信息\r\n     * @returns 处理后的补全文本\r\n     */\r\n    private processCompletionResult(completionText: string, _context: any): string | null {\r\n        if (!completionText) {\r\n            return null;\r\n        }\r\n        \r\n        // 清理补全文本，移除可能的代码块标记\r\n        let cleanedText = completionText;\r\n        \r\n        // 如果补全文本包含代码块标记，提取其中的代码\r\n        const codeBlockRegex = /```(?:\\w*\\n)?([\\s\\S]*?)```/;\r\n        const match = cleanedText.match(codeBlockRegex);\r\n        if (match && match[1]) {\r\n            cleanedText = match[1].trim();\r\n        }\r\n        \r\n        return cleanedText;\r\n    }\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.URL = exports.DNS = void 0;\nconst sha1_js_1 = require(\"./sha1.js\");\nconst v35_js_1 = require(\"./v35.js\");\nvar v35_js_2 = require(\"./v35.js\");\nObject.defineProperty(exports, \"DNS\", { enumerable: true, get: function () { return v35_js_2.DNS; } });\nObject.defineProperty(exports, \"URL\", { enumerable: true, get: function () { return v35_js_2.URL; } });\nfunction v5(value, namespace, buf, offset) {\n    return (0, v35_js_1.default)(0x50, sha1_js_1.default, value, namespace, buf, offset);\n}\nv5.DNS = v35_js_1.DNS;\nv5.URL = v35_js_1.URL;\nexports.default = v5;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateV7State = void 0;\nconst rng_js_1 = require(\"./rng.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nconst _state = {};\nfunction v7(options, buf, offset) {\n    let bytes;\n    if (options) {\n        bytes = v7Bytes(options.random ?? options.rng?.() ?? (0, rng_js_1.default)(), options.msecs, options.seq, buf, offset);\n    }\n    else {\n        const now = Date.now();\n        const rnds = (0, rng_js_1.default)();\n        updateV7State(_state, now, rnds);\n        bytes = v7Bytes(rnds, _state.msecs, _state.seq, buf, offset);\n    }\n    return buf ?? (0, stringify_js_1.unsafeStringify)(bytes);\n}\nfunction updateV7State(state, now, rnds) {\n    state.msecs ??= -Infinity;\n    state.seq ??= 0;\n    if (now > state.msecs) {\n        state.seq = (rnds[6] << 23) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];\n        state.msecs = now;\n    }\n    else {\n        state.seq = (state.seq + 1) | 0;\n        if (state.seq === 0) {\n            state.msecs++;\n        }\n    }\n    return state;\n}\nexports.updateV7State = updateV7State;\nfunction v7Bytes(rnds, msecs, seq, buf, offset = 0) {\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    if (!buf) {\n        buf = new Uint8Array(16);\n        offset = 0;\n    }\n    else {\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n    }\n    msecs ??= Date.now();\n    seq ??= ((rnds[6] * 0x7f) << 24) | (rnds[7] << 16) | (rnds[8] << 8) | rnds[9];\n    buf[offset++] = (msecs / 0x10000000000) & 0xff;\n    buf[offset++] = (msecs / 0x100000000) & 0xff;\n    buf[offset++] = (msecs / 0x1000000) & 0xff;\n    buf[offset++] = (msecs / 0x10000) & 0xff;\n    buf[offset++] = (msecs / 0x100) & 0xff;\n    buf[offset++] = msecs & 0xff;\n    buf[offset++] = 0x70 | ((seq >>> 28) & 0x0f);\n    buf[offset++] = (seq >>> 20) & 0xff;\n    buf[offset++] = 0x80 | ((seq >>> 14) & 0x3f);\n    buf[offset++] = (seq >>> 6) & 0xff;\n    buf[offset++] = ((seq << 2) & 0xff) | (rnds[10] & 0x03);\n    buf[offset++] = rnds[11];\n    buf[offset++] = rnds[12];\n    buf[offset++] = rnds[13];\n    buf[offset++] = rnds[14];\n    buf[offset++] = rnds[15];\n    return buf;\n}\nexports.default = v7;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_js_1 = require(\"./validate.js\");\nfunction parse(uuid) {\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    let v;\n    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, ((v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000) & 0xff, (v / 0x100000000) & 0xff, (v >>> 24) & 0xff, (v >>> 16) & 0xff, (v >>> 8) & 0xff, v & 0xff);\n}\nexports.default = parse;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_js_1 = require(\"./validate.js\");\nfunction version(uuid) {\n    if (!(0, validate_js_1.default)(uuid)) {\n        throw TypeError('Invalid UUID');\n    }\n    return parseInt(uuid.slice(14, 15), 16);\n}\nexports.default = version;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = '00000000-0000-0000-0000-000000000000';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst native_js_1 = require(\"./native.js\");\nconst rng_js_1 = require(\"./rng.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nfunction v4(options, buf, offset) {\n    if (native_js_1.default.randomUUID && !buf && !options) {\n        return native_js_1.default.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? (0, rng_js_1.default)();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(rnds);\n}\nexports.default = v4;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = 'ffffffff-ffff-ffff-ffff-ffffffffffff';\n","import * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as vscode from 'vscode';\r\nimport { getFileName } from './utils';\r\n\r\n/**\r\n * 日志级别枚举\r\n * 按照标准日志级别从低到高排序：DEBUG < INFO < WARN < ERROR\r\n */\r\nexport enum LogLevel {\r\n    NONE = 0,    // 不输出任何日志\r\n    DEBUG = 1,   // 调试信息\r\n    INFO = 2,    // 一般信息\r\n    WARN = 3,    // 警告信息\r\n    ERROR = 4    // 错误信息\r\n}\r\n\r\n/**\r\n * 日志管理器\r\n * 负责记录和管理日志，支持输出到文件和控制台\r\n */\r\nexport class Logger {\r\n    private static instance: Logger;\r\n    private outputChannel: vscode.OutputChannel;\r\n    private logLevel: LogLevel = LogLevel.NONE;\r\n    private debugEnabled: boolean = false;\r\n\r\n    private constructor() {\r\n        this.outputChannel = vscode.window.createOutputChannel('TabAutoComplete');\r\n    }\r\n\r\n    public static getInstance(): Logger {\r\n        if (!Logger.instance) {\r\n            Logger.instance = new Logger();\r\n        }\r\n        return Logger.instance;\r\n    }\r\n\r\n    public setLogLevel(level: LogLevel): void {\r\n        this.logLevel = level;\r\n        this.log(LogLevel.INFO, `日志级别已设置为: ${LogLevel[level]}`);\r\n    }\r\n\r\n    private shouldLog(level: LogLevel): boolean {\r\n        if (level === LogLevel.DEBUG && this.debugEnabled) {\r\n            return true;\r\n        }\r\n        return this.logLevel !== LogLevel.NONE && level <= this.logLevel;\r\n    }\r\n\r\n    private formatMessage(level: LogLevel, message: string, data?: any): string {\r\n        const timestamp = new Date().toISOString();\r\n        const levelStr = LogLevel[level].padEnd(5);\r\n        let formattedMessage = `[${timestamp}] [${levelStr}] ${message}`;\r\n        \r\n        if (data) {\r\n            if (data instanceof Error) {\r\n                formattedMessage += `\\n    ${data.stack || data.message}`;\r\n            } else if (typeof data === 'object') {\r\n                try {\r\n                    formattedMessage += `\\n    ${JSON.stringify(data, null, 2)}`;\r\n                } catch (e) {\r\n                    formattedMessage += `\\n    [无法序列化的对象]`;\r\n                }\r\n            } else {\r\n                formattedMessage += `\\n    ${data}`;\r\n            }\r\n        }\r\n        \r\n        return formattedMessage;\r\n    }\r\n\r\n    private log(level: LogLevel, message: string, data?: any): void {\r\n        if(level < this.logLevel){return;}\r\n        // 确保警告和错误日志始终被记录，无论日志级别如何设置\r\n        const shouldLogMessage = this.shouldLog(level) || level === LogLevel.ERROR || level === LogLevel.WARN;\r\n        \r\n        if (shouldLogMessage) {\r\n            const formattedMessage = this.formatMessage(level, message, data);\r\n            this.outputChannel.appendLine(formattedMessage);\r\n            \r\n            // 对于警告和错误，同时输出到控制台\r\n            if (level === LogLevel.ERROR) {\r\n                console.error(formattedMessage);\r\n            } else if (level === LogLevel.WARN) {\r\n                console.warn(formattedMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    public debug(message: string, data?: any): void {\r\n        this.log(LogLevel.DEBUG, message, data);\r\n    }\r\n\r\n    public info(message: string, data?: any): void {\r\n        this.log(LogLevel.INFO, message, data);\r\n    }\r\n\r\n    public warn(message: string, data?: any): void {\r\n        this.log(LogLevel.WARN, message, data);\r\n        // 显示警告通知并在输出窗口中显示\r\n        if (this.shouldLog(LogLevel.WARN)) {\r\n            vscode.window.showWarningMessage(message);\r\n            this.outputChannel.show(true); // 保持焦点在编辑器\r\n        }\r\n    }\r\n\r\n    public error(message: string, error?: any): void {\r\n        this.log(LogLevel.ERROR, message, error);\r\n        // 显示错误通知并在输出窗口中显示\r\n        vscode.window.showErrorMessage(message);\r\n        this.outputChannel.show(true); // 保持焦点在编辑器\r\n    }\r\n\r\n    public setDebugEnabled(enabled: boolean): void {\r\n        this.debugEnabled = enabled;\r\n        this.log(LogLevel.INFO, `调试模式已${enabled ? '启用' : '禁用'}`);\r\n    }\r\n\r\n    public showOutputChannel(): void {\r\n        this.outputChannel.show();\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.outputChannel.dispose();\r\n    }\r\n} ","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport { Logger } from '../utils/logger';\r\nimport { BaseClient, ModelConfig, ModelProvider } from './baseClient';\r\n\r\n/**\r\n * DeepSeek API客户端\r\n * 负责与DeepSeek API通信，发送代码补全请求\r\n */\r\nexport class DeepSeekClient implements BaseClient {\r\n    private logger: Logger;\r\n    private modelConfig: ModelConfig;\r\n    private readonly DEFAULT_API_BASE = 'https://api.deepseek.com/v1';\r\n\r\n    constructor(\r\n        private configManager: ConfigManager,\r\n        modelConfig: ModelConfig\r\n    ) {\r\n        this.logger = Logger.getInstance();\r\n        this.modelConfig = modelConfig;\r\n        \r\n        if (!this.modelConfig.apiBase) {\r\n            this.modelConfig.apiBase = this.DEFAULT_API_BASE;\r\n        }\r\n        \r\n        if (!this.modelConfig.apiKey) {\r\n            throw new Error('DeepSeek API需要API密钥');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取代码补全\r\n     * @param context 上下文信息\r\n     * @returns 补全结果文本\r\n     */\r\n    public async getCompletion(context: any): Promise<string | null> {\r\n        try {\r\n            const prompt = this.buildPrompt(context);\r\n            \r\n            // 记录提示词（仅在调试模式下）\r\n            if (this.configManager.isDebugEnabled()) {\r\n                this.logger.debug(`完整提示词:\\n${prompt}`);\r\n            } else {\r\n                // 仅记录提示词的前100个字符\r\n                this.logger.debug(`提示词前100个字符: ${prompt.substring(0, 100)}...`);\r\n            }\r\n            \r\n            const temperature = this.modelConfig.temperature || this.configManager.getTemperature();\r\n            const maxTokens = this.modelConfig.maxTokens || this.configManager.getMaxTokens();\r\n            \r\n            // 构建请求数据\r\n            const requestData = {\r\n                model: this.modelConfig.model,\r\n                messages: [\r\n                    { role: \"user\", content: prompt }\r\n                ],\r\n                temperature: temperature,\r\n                max_tokens: maxTokens\r\n            };\r\n            \r\n            // 发送请求\r\n            this.logger.debug(`发送请求到 DeepSeek API: ${this.modelConfig.apiBase}/chat/completions`);\r\n            \r\n            const response = await fetch(`${this.modelConfig.apiBase}/chat/completions`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${this.modelConfig.apiKey}`\r\n                },\r\n                body: JSON.stringify(requestData)\r\n            });\r\n            \r\n            // 检查响应状态\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.logger.error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n                return null;\r\n            }\r\n            \r\n            // 解析响应\r\n            const responseData = await response.json();\r\n            \r\n            // 提取补全文本\r\n            const completionText = responseData.choices[0]?.message?.content;\r\n            \r\n            if (!completionText) {\r\n                this.logger.error('API响应中没有找到补全文本');\r\n                return null;\r\n            }\r\n            \r\n            // 处理补全结果\r\n            return this.processCompletionResult(completionText, context);\r\n            \r\n        } catch (error) {\r\n            this.logger.error(`获取补全时出错: ${error}`);\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 测试与API的连接\r\n     * @returns 连接测试结果\r\n     */\r\n    public async testConnection(): Promise<{success: boolean, message: string, models?: string[]}> {\r\n        this.logger.info(`测试与 DeepSeek API 的连接`);\r\n        \r\n        try {\r\n            // 发送简单的模型列表请求\r\n            const response = await fetch(`${this.modelConfig.apiBase}/models`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.modelConfig.apiKey}`\r\n                }\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                return {\r\n                    success: false,\r\n                    message: `连接失败: ${response.status} ${response.statusText} - ${errorText}`\r\n                };\r\n            }\r\n            \r\n            const data = await response.json();\r\n            const models = data.data.map((model: any) => model.id);\r\n            \r\n            return {\r\n                success: true,\r\n                message: '连接成功',\r\n                models: models\r\n            };\r\n            \r\n        } catch (error) {\r\n            return {\r\n                success: false,\r\n                message: `连接失败: ${error}`\r\n            };\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 生成补全\r\n     * @param prompt 提示词\r\n     * @param options 选项\r\n     * @param signal 中止信号\r\n     * @returns 生成的补全文本\r\n     */\r\n    public async generateCompletion(\r\n        prompt: string, \r\n        options: { temperature?: number; maxTokens?: number; model?: string }, \r\n        signal?: AbortSignal\r\n    ): Promise<string | null> {\r\n        try {\r\n            const modelName = options.model || this.modelConfig.model;\r\n            const temperature = options.temperature !== undefined ? options.temperature : this.modelConfig.temperature || this.configManager.getTemperature();\r\n            const maxTokens = options.maxTokens || this.modelConfig.maxTokens || this.configManager.getMaxTokens();\r\n            \r\n            this.logger.debug(`生成补全: 模型=${modelName}, 温度=${temperature}, 最大令牌数=${maxTokens}`);\r\n            \r\n            // 构建请求数据\r\n            const requestData = {\r\n                model: modelName,\r\n                messages: [\r\n                    { role: \"user\", content: prompt }\r\n                ],\r\n                temperature: temperature,\r\n                max_tokens: maxTokens\r\n            };\r\n            \r\n            // 创建请求控制器\r\n            const controller = signal ? undefined : new AbortController();\r\n            const requestSignal = signal || controller?.signal;\r\n            \r\n            // 发送请求\r\n            const response = await fetch(`${this.modelConfig.apiBase}/chat/completions`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${this.modelConfig.apiKey}`\r\n                },\r\n                body: JSON.stringify(requestData),\r\n                signal: requestSignal\r\n            });\r\n            \r\n            // 检查响应状态\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.logger.error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n                return null;\r\n            }\r\n            \r\n            // 解析响应\r\n            const responseData = await response.json();\r\n            \r\n            // 提取补全文本\r\n            const completionText = responseData.choices[0]?.message?.content;\r\n            \r\n            if (!completionText) {\r\n                this.logger.error('API响应中没有找到补全文本');\r\n                return null;\r\n            }\r\n            \r\n            return completionText;\r\n            \r\n        } catch (error) {\r\n            if (error.name === 'AbortError') {\r\n                this.logger.info('请求被中止');\r\n                return null;\r\n            }\r\n            \r\n            this.logger.error(`生成补全时出错: ${error}`);\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 构建提示词\r\n     * @param context 上下文信息\r\n     * @returns 构建的提示词\r\n     */\r\n    private buildPrompt(context: any): string {\r\n        // 使用配置管理器中的提示模板\r\n        let promptTemplate = this.configManager.getPromptTemplate();\r\n        \r\n        // 替换模板中的占位符\r\n        return promptTemplate.replace('${prefix}', context.prefix);\r\n    }\r\n    \r\n    /**\r\n     * 处理补全结果\r\n     * @param completionText 补全文本\r\n     * @param _context 上下文信息\r\n     * @returns 处理后的补全文本\r\n     */\r\n    private processCompletionResult(completionText: string, _context: any): string | null {\r\n        if (!completionText) {\r\n            return null;\r\n        }\r\n        \r\n        // 清理补全文本，移除可能的代码块标记\r\n        let cleanedText = completionText;\r\n        \r\n        // 如果补全文本包含代码块标记，提取其中的代码\r\n        const codeBlockRegex = /```(?:\\w*\\n)?([\\s\\S]*?)```/;\r\n        const match = cleanedText.match(codeBlockRegex);\r\n        if (match && match[1]) {\r\n            cleanedText = match[1].trim();\r\n        }\r\n        \r\n        return cleanedText;\r\n    }\r\n} ","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nfunction sha1(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    }\n    else if (typeof bytes === 'string') {\n        bytes = Buffer.from(bytes, 'utf8');\n    }\n    return (0, crypto_1.createHash)('sha1').update(bytes).digest();\n}\nexports.default = sha1;\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = exports.validate = exports.v7 = exports.v6ToV1 = exports.v6 = exports.v5 = exports.v4 = exports.v3 = exports.v1ToV6 = exports.v1 = exports.stringify = exports.parse = exports.NIL = exports.MAX = void 0;\nvar max_js_1 = require(\"./max.js\");\nObject.defineProperty(exports, \"MAX\", { enumerable: true, get: function () { return max_js_1.default; } });\nvar nil_js_1 = require(\"./nil.js\");\nObject.defineProperty(exports, \"NIL\", { enumerable: true, get: function () { return nil_js_1.default; } });\nvar parse_js_1 = require(\"./parse.js\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parse_js_1.default; } });\nvar stringify_js_1 = require(\"./stringify.js\");\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return stringify_js_1.default; } });\nvar v1_js_1 = require(\"./v1.js\");\nObject.defineProperty(exports, \"v1\", { enumerable: true, get: function () { return v1_js_1.default; } });\nvar v1ToV6_js_1 = require(\"./v1ToV6.js\");\nObject.defineProperty(exports, \"v1ToV6\", { enumerable: true, get: function () { return v1ToV6_js_1.default; } });\nvar v3_js_1 = require(\"./v3.js\");\nObject.defineProperty(exports, \"v3\", { enumerable: true, get: function () { return v3_js_1.default; } });\nvar v4_js_1 = require(\"./v4.js\");\nObject.defineProperty(exports, \"v4\", { enumerable: true, get: function () { return v4_js_1.default; } });\nvar v5_js_1 = require(\"./v5.js\");\nObject.defineProperty(exports, \"v5\", { enumerable: true, get: function () { return v5_js_1.default; } });\nvar v6_js_1 = require(\"./v6.js\");\nObject.defineProperty(exports, \"v6\", { enumerable: true, get: function () { return v6_js_1.default; } });\nvar v6ToV1_js_1 = require(\"./v6ToV1.js\");\nObject.defineProperty(exports, \"v6ToV1\", { enumerable: true, get: function () { return v6ToV1_js_1.default; } });\nvar v7_js_1 = require(\"./v7.js\");\nObject.defineProperty(exports, \"v7\", { enumerable: true, get: function () { return v7_js_1.default; } });\nvar validate_js_1 = require(\"./validate.js\");\nObject.defineProperty(exports, \"validate\", { enumerable: true, get: function () { return validate_js_1.default; } });\nvar version_js_1 = require(\"./version.js\");\nObject.defineProperty(exports, \"version\", { enumerable: true, get: function () { return version_js_1.default; } });\n","import axios from 'axios';\r\nimport * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport { Logger } from '../utils/logger';\r\nimport { BaseClient, ModelConfig, ModelProvider } from './baseClient';\r\n\r\n/**\r\n * Ollama API客户端\r\n * 负责与本地运行的Ollama服务通信，发送代码补全请求\r\n */\r\nexport class OllamaClient implements BaseClient {\r\n    private logger: Logger;\r\n    private modelConfig: ModelConfig;\r\n\r\n    constructor(\r\n        private configManager: ConfigManager,\r\n        modelConfig?: ModelConfig\r\n    ) {\r\n        this.logger = Logger.getInstance();\r\n        this.modelConfig = modelConfig || {\r\n            title: configManager.getModelName(),\r\n            model: configManager.getModelName(),\r\n            provider: ModelProvider.OLLAMA,\r\n            apiBase: configManager.getApiUrl(),\r\n            temperature: configManager.getTemperature(),\r\n            maxTokens: configManager.getMaxTokens()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取代码补全\r\n     * @param context 上下文信息\r\n     * @returns 补全结果文本\r\n     */\r\n    public async getCompletion(context: any): Promise<string | null> {\r\n        try {\r\n            const apiUrl = this.modelConfig.apiBase || this.configManager.getApiUrl();\r\n            const modelName = this.modelConfig.model || this.configManager.getModelName();\r\n            const temperature = this.modelConfig.temperature || this.configManager.getTemperature();\r\n            const maxTokens = this.modelConfig.maxTokens || this.configManager.getMaxTokens();\r\n            \r\n            this.logger.debug(`使用模型: ${modelName}, 温度: ${temperature}, 最大令牌数: ${maxTokens}`);\r\n            \r\n            // 构建提示词\r\n            const prompt = this.buildPrompt(context);\r\n            \r\n            // 记录完整提示词（仅在调试模式下）\r\n            if (this.configManager.isDebugEnabled()) {\r\n                this.logger.debug(`完整提示词:\\n${prompt}`);\r\n            } else {\r\n                // 仅记录提示词的前100个字符\r\n                this.logger.debug(`提示词前100个字符: ${prompt.substring(0, 100)}...`);\r\n            }\r\n            \r\n            // 构建请求数据\r\n            const requestData = {\r\n                model: modelName,\r\n                prompt: prompt,\r\n                temperature: temperature,\r\n                max_tokens: maxTokens,\r\n                options: {\r\n                    num_predict: maxTokens\r\n                }\r\n            };\r\n            \r\n            // 请求信息日志\r\n            this.logger.debug(`发送请求到 Ollama API: ${apiUrl}/api/generate`);\r\n            this.logger.debug(`请求内容: ${JSON.stringify({\r\n                model: modelName,\r\n                temperature: temperature,\r\n                max_tokens: maxTokens,\r\n                prompt_length: prompt.length\r\n            })}`);\r\n            \r\n            // 发送请求\r\n            this.logger.debug(`开始fetch请求...`);\r\n            this.logger.debug(`请求体大小: ${JSON.stringify(requestData).length} 字符`);\r\n            \r\n            const response = await fetch(`${apiUrl}/api/generate`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestData)\r\n            });\r\n            \r\n            // 记录响应状态和头部\r\n            this.logger.debug(`Ollama API 响应状态: ${response.status} ${response.statusText}`);\r\n            const headers: Record<string, string> = {};\r\n            response.headers.forEach((value, key) => {\r\n                headers[key] = value;\r\n            });\r\n            this.logger.debug(`响应头: ${JSON.stringify(headers)}`);\r\n            \r\n            // 检查响应状态\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.logger.error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n                return null;\r\n            }\r\n            \r\n            // 获取响应文本\r\n            const responseText = await response.text();\r\n            \r\n            // 记录原始响应\r\n            //this.logger.debug(`原始API响应:\\n${responseText}`);\r\n            //this.logger.debug(`响应内容长度: ${responseText.length} 字符`);\r\n            //this.logger.debug(`响应内容前100字符: ${responseText}`);\r\n            \r\n            // 检查响应是否包含有效的JSON\r\n            const openBraces = (responseText.match(/\\{/g) || []).length;\r\n            const closeBraces = (responseText.match(/\\}/g) || []).length;\r\n            this.logger.debug(`响应是否包含JSON标记: { 出现 ${openBraces} 次, } 出现 ${closeBraces} 次`);\r\n            \r\n            // 检查是否包含response字段\r\n            const hasResponse = responseText.includes('\"response\"');\r\n            this.logger.debug(`响应是否包含response字段: ${hasResponse}`);\r\n            \r\n            // 处理流式JSON响应\r\n            let completionText = '';\r\n            \r\n            // 拆分响应并收集所有的response字段内容\r\n            if (responseText.includes('\"response\"')) {\r\n                try {\r\n                    // 按行拆分响应\r\n                    const lines = responseText.split('\\n').filter(line => line.trim() !== '');\r\n                    \r\n                    // 从每行提取response字段内容并合并\r\n                    for (const line of lines) {\r\n                        try {\r\n                            const jsonObj = JSON.parse(line);\r\n                            if (jsonObj && jsonObj.response) {\r\n                                completionText += jsonObj.response;\r\n                            }\r\n                        } catch (parseError) {\r\n                            this.logger.debug(`解析响应行时出错: ${parseError.message}, 行内容: ${line.substring(0, 50)}...`);\r\n                        }\r\n                    }\r\n                    \r\n                    this.logger.debug(`从流式响应中提取的完整内容, 长度: ${completionText.length}`);\r\n                    \r\n                    // 检查是否为空或者只有代码块标记\r\n                    if (completionText.trim() === '```' || completionText.trim() === '``' || completionText.trim().length <= 3) {\r\n                        this.logger.debug(`流式响应提取内容过短或只有代码块标记，尝试备用方法`);\r\n                        completionText = '';\r\n                    }\r\n                } catch (error) {\r\n                    this.logger.error(`处理流式响应时出错: ${error.message}`);\r\n                    completionText = '';\r\n                }\r\n            }\r\n            \r\n            // 如果流式处理失败，尝试使用正则表达式提取所有响应\r\n            if (!completionText || completionText.trim().length <= 5) {\r\n                this.logger.debug(`尝试使用正则表达式提取所有响应`);\r\n                try {\r\n                    // 提取所有response值\r\n                    let allResponses = '';\r\n                    const regex = /\"response\":[ ]*\"([^\"]*)\"/g;\r\n                    let match;\r\n                    \r\n                    while ((match = regex.exec(responseText)) !== null) {\r\n                        if (match[1]) {\r\n                            // 处理转义字符\r\n                            const responseValue = match[1].replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r').replace(/\\\\\"/g, '\"');\r\n                            allResponses += responseValue;\r\n                        }\r\n                    }\r\n                    \r\n                    if (allResponses.length > 0) {\r\n                        this.logger.debug(`正则提取成功，提取长度: ${allResponses.length}`);\r\n                        completionText = allResponses;\r\n                    }\r\n                } catch (error) {\r\n                    this.logger.debug(`正则提取失败: ${error.message}`);\r\n                }\r\n            }\r\n            \r\n            // 如果提取内容还是为空，尝试直接从响应文本中提取\r\n            if (!completionText || completionText.trim().length === 0) {\r\n                // 如果无法从流中提取内容，尝试清理和修复JSON响应\r\n                this.logger.debug('尝试直接从响应文本提取内容');\r\n                const directExtract = this.extractCompletionDirectly(responseText);\r\n                if (directExtract) {\r\n                    completionText = directExtract;\r\n                    this.logger.debug(`直接提取到内容，长度: ${completionText.length}`);\r\n                } else {\r\n                    // 尝试使用cleanJsonResponse方法\r\n                    try {\r\n                        const cleanedJson = this.cleanJsonResponse(responseText);\r\n                        const jsonObj = JSON.parse(cleanedJson);\r\n                        if (jsonObj.response) {\r\n                            completionText = jsonObj.response;\r\n                            this.logger.debug(`从清理后的JSON中提取到response，长度: ${completionText.length}`);\r\n                        } else {\r\n                            // 如果没有response字段，尝试提取任何内容\r\n                            completionText = this.extractAnyContent(responseText);\r\n                            this.logger.debug(`尝试提取任何内容，结果长度: ${completionText ? completionText.length : 0}`);\r\n                        }\r\n                    } catch (error) {\r\n                        this.logger.error(`清理JSON响应后解析失败: ${error.message}`);\r\n                        // 最后尝试直接提取任何内容\r\n                        completionText = this.extractAnyContent(responseText);\r\n                        this.logger.debug(`最后尝试提取任何内容，结果长度: ${completionText ? completionText.length : 0}`);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // 对补全结果进行后处理\r\n            this.logger.debug(`对补全结果进行后处理`);\r\n            \r\n            // 去除Markdown代码块标记\r\n            if (completionText.startsWith('```')) {\r\n                const firstLineBreak = completionText.indexOf('\\n');\r\n                if (firstLineBreak !== -1) {\r\n                    // 移除开头的```python或```等标记\r\n                    const codeBlockHeader = completionText.substring(0, firstLineBreak);\r\n                    this.logger.debug(`移除了前缀: \"${codeBlockHeader}\"`);\r\n                    completionText = completionText.substring(firstLineBreak + 1);\r\n                } else {\r\n                    this.logger.debug(`移除了前缀: \"${completionText}\"`);\r\n                    completionText = '';\r\n                }\r\n                \r\n                // 移除结尾的```\r\n                const lastCodeBlockEnd = completionText.lastIndexOf('```');\r\n                if (lastCodeBlockEnd !== -1) {\r\n                    completionText = completionText.substring(0, lastCodeBlockEnd).trim();\r\n                    this.logger.debug(`移除了结尾的代码块标记\"\\`\\`\\`\"`);\r\n                }\r\n            }\r\n            \r\n            // 后处理完成的补全文本\r\n            const processedCompletion = this.postProcessCompletion(completionText, context);\r\n            \r\n            // 记录最终的补全结果\r\n            if (processedCompletion) {\r\n                this.logger.debug(`最终补全结果长度: ${processedCompletion.length}`);\r\n                this.logger.debug(`最终补全结果前100字符: ${processedCompletion.substring(0, 100)}${processedCompletion.length > 100 ? '...' : ''}`);\r\n            } else {\r\n                this.logger.debug(`没有有效的补全结果`);\r\n            }\r\n            \r\n            return processedCompletion;\r\n        } catch (error) {\r\n            this.logger.error(`获取补全时出错: ${error.message}`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理JSON响应中的格式问题\r\n     */\r\n    private cleanJsonResponse(text: string): string {\r\n        this.logger.debug(`尝试修复JSON，原始长度: ${text.length}`);\r\n        \r\n        // 如果响应为空，返回最小有效JSON\r\n        if (!text || text.trim() === '') {\r\n            return '{\"response\": \"\"}';\r\n        }\r\n        \r\n        // 移除可能导致解析错误的BOM标记\r\n        let cleaned = text.replace(/^\\uFEFF/, '');\r\n        \r\n        // 移除开头和结尾的非JSON字符\r\n        cleaned = cleaned.trim();\r\n        \r\n        // 检查是否有多行响应（Ollama有时会返回多个JSON对象）\r\n        const lines = cleaned.split('\\n');\r\n        if (lines.length > 1) {\r\n            this.logger.debug(`检测到多行响应，行数: ${lines.length}`);\r\n            \r\n            // 尝试解析第一行 - 如果是完整JSON，直接使用\r\n            const firstLine = lines[0].trim();\r\n            if (firstLine.startsWith('{') && firstLine.endsWith('}')) {\r\n                try {\r\n                    JSON.parse(firstLine); // 测试是否为有效JSON\r\n                    this.logger.debug('第一行是有效JSON，直接使用');\r\n                    return firstLine;\r\n                } catch (e) {\r\n                    this.logger.debug('第一行不是有效JSON，继续尝试其他方法');\r\n                }\r\n            }\r\n            \r\n            // 尝试组合前几行形成完整JSON\r\n            let combinedJson = '';\r\n            let openBraces = 0;\r\n            let validJson = false;\r\n            \r\n            for (let i = 0; i < Math.min(lines.length, 5); i++) { // 最多尝试前5行\r\n                combinedJson += lines[i];\r\n                openBraces += (lines[i].match(/{/g) || []).length;\r\n                openBraces -= (lines[i].match(/}/g) || []).length;\r\n                \r\n                if (openBraces === 0 && combinedJson.trim().startsWith('{') && combinedJson.trim().endsWith('}')) {\r\n                    try {\r\n                        JSON.parse(combinedJson);\r\n                        validJson = true;\r\n                        this.logger.debug(`组合了${i+1}行形成有效JSON`);\r\n                        break;\r\n                    } catch (e) {\r\n                        // 继续尝试添加更多行\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (validJson) {\r\n                return combinedJson;\r\n            }\r\n        }\r\n        \r\n        // 如果响应包含多个JSON对象，只保留第一个完整的JSON对象\r\n        const firstObjEnd = cleaned.indexOf('}{');\r\n        if (firstObjEnd > 0) {\r\n            this.logger.debug('检测到多个JSON对象，截取第一个');\r\n            cleaned = cleaned.substring(0, firstObjEnd + 1);\r\n        }\r\n        \r\n        // 处理可能的流对象\r\n        if (cleaned.includes('\"done\":') && !cleaned.includes('\"response\":')) {\r\n            const matches = cleaned.match(/\"content\":\"([^\"]*)\"/g);\r\n            if (matches && matches.length > 0) {\r\n                this.logger.debug('检测到流式响应，合并内容');\r\n                let content = '';\r\n                \r\n                // 提取所有内容并合并\r\n                for (const match of matches) {\r\n                    const contentMatch = match.match(/\"content\":\"([^\"]*)\"/);\r\n                    if (contentMatch && contentMatch[1]) {\r\n                        content += contentMatch[1];\r\n                    }\r\n                }\r\n                \r\n                // 创建有效的response对象\r\n                return `{\"response\": \"${content.replace(/\"/g, '\\\\\"')}\"}`;\r\n            }\r\n        }\r\n        \r\n        // 尝试修复括号不匹配的问题\r\n        const openBracesCount = (cleaned.match(/{/g) || []).length;\r\n        const closeBracesCount = (cleaned.match(/}/g) || []).length;\r\n        \r\n        if (openBracesCount > closeBracesCount) {\r\n            // 添加缺失的结束括号\r\n            this.logger.debug(`添加 ${openBracesCount - closeBracesCount} 个缺失的结束括号`);\r\n            cleaned = cleaned + '}}'.repeat(openBracesCount - closeBracesCount);\r\n        } else if (closeBracesCount > openBracesCount) {\r\n            // 移除多余的结束括号\r\n            this.logger.debug(`移除 ${closeBracesCount - openBracesCount} 个多余的结束括号`);\r\n            const lastValidIndex = cleaned.length;\r\n            for (let i = 0; i < closeBracesCount - openBracesCount; i++) {\r\n                const lastBraceIndex = cleaned.lastIndexOf('}', lastValidIndex - 1);\r\n                if (lastBraceIndex !== -1) {\r\n                    cleaned = cleaned.substring(0, lastBraceIndex) + cleaned.substring(lastBraceIndex + 1);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 确保是一个有效的JSON对象\r\n        if (!cleaned.startsWith('{')) {\r\n            this.logger.debug('添加开始大括号');\r\n            const firstBrace = cleaned.indexOf('{');\r\n            if (firstBrace >= 0) {\r\n                cleaned = cleaned.substring(firstBrace);\r\n            } else {\r\n                cleaned = '{' + cleaned;\r\n            }\r\n        }\r\n        \r\n        if (!cleaned.endsWith('}')) {\r\n            this.logger.debug('添加结束大括号');\r\n            const lastBrace = cleaned.lastIndexOf('}');\r\n            if (lastBrace >= 0) {\r\n                cleaned = cleaned.substring(0, lastBrace + 1);\r\n            } else {\r\n                cleaned = cleaned + '}';\r\n            }\r\n        }\r\n        \r\n        // 提取有效的JSON部分\r\n        const jsonStart = cleaned.indexOf('{');\r\n        const jsonEnd = cleaned.lastIndexOf('}');\r\n        \r\n        if (jsonStart >= 0 && jsonEnd > jsonStart) {\r\n            this.logger.debug(`提取JSON部分: ${jsonStart}-${jsonEnd}`);\r\n            cleaned = cleaned.substring(jsonStart, jsonEnd + 1);\r\n        }\r\n        \r\n        // 检查是否有未转义的特殊字符\r\n        cleaned = cleaned\r\n            .replace(/[\\u0000-\\u001F]+/g, ' ')            // 替换控制字符\r\n            .replace(/([^\\\\])\"/g, '$1\\\\\"')               // 转义未转义的引号\r\n            .replace(/^([^{]*)({.*)$/, '$2')             // 移除前导非JSON文本\r\n            .replace(/^{([^:]*):/, '{\"response\":');      // 尝试修复响应格式\r\n        \r\n        // 确保响应包含response字段\r\n        if (!cleaned.includes('\"response\"')) {\r\n            this.logger.debug('添加缺失的response字段');\r\n            \r\n            // 尝试提取任何文本作为响应\r\n            const textMatch = cleaned.match(/\"([^\"]{5,})\"/);\r\n            if (textMatch && textMatch[1]) {\r\n                cleaned = `{\"response\": \"${textMatch[1].replace(/\"/g, '\\\\\"')}\"}`;\r\n            } else {\r\n                // 如果找不到合适的文本，返回空响应\r\n                cleaned = '{\"response\": \"\"}';\r\n            }\r\n        }\r\n        \r\n        this.logger.debug(`修复后的JSON: ${cleaned.substring(0, Math.min(100, cleaned.length))}...`);\r\n        return cleaned;\r\n    }\r\n\r\n    /**\r\n     * 构建提示词\r\n     */\r\n    private buildPrompt(context: any): string {\r\n        // 更精确地获取语言类型\r\n        const language = context.fileType || context.language || 'javascript';\r\n        this.logger.debug(`为语言 ${language} 构建提示词模板`);\r\n        \r\n        let template = '';\r\n        \r\n        // 检测上下文中是否有中文内容\r\n        const hasChineseContent = context.textBeforeCursor && \r\n                                /[\\u4e00-\\u9fa5]/.test(context.textBeforeCursor);\r\n        if (hasChineseContent) {\r\n            this.logger.debug('检测到中文内容，调整提示词');\r\n        }\r\n        \r\n        // 添加提示词前缀，根据语言类型直接生成\r\n        if (context.commentMode || context.isInComment) {\r\n            // 注释模式的提示词\r\n            template += hasChineseContent \r\n                ? `你是一位专业的${language}程序员。根据上下文继续完成以下文档注释。只需完成注释内容，不要编写任何代码。不要返回JSON格式或obj['complete_code']这样的结构，直接返回纯文本注释。只关注光标位置的注释，不要生成整个文件的注释。请使用中文回复：\\n\\n`\r\n                : `You are an expert ${language} programmer. Continue the following documentation comment based on the context. Only complete the comment, don't write any code. Do NOT return JSON format or structures like obj['complete_code']. ONLY output plain text comment. Focus ONLY on the comment at the cursor position, do not generate documentation for the entire file:\\n\\n`;\r\n        } else {\r\n            // 普通代码补全的提示词\r\n            template += hasChineseContent\r\n                ? `你是一位专业的${language}程序员。请根据上下文完成光标处的${language}代码。直接输出代码，不要添加任何解释、Markdown格式或JSON结构。不要返回obj['complete_code']这样的结构，只输出纯代码。只关注光标位置的代码补全，可以是一个函数、一个类或几行代码，但不要生成整个文件的内容。你的输出应该是可以直接在光标处插入的有效${language}代码：\\n\\n`\r\n                : `You are an expert ${language} programmer. Complete the ${language} code at the cursor position based on the context. Output ONLY valid ${language} code without any explanation, markdown formatting, or JSON structures. Do NOT wrap the code in obj['complete_code'] or any similar structure. Focus ONLY on completing the code at the cursor position - this could be a function, class, or a few lines of code, but do NOT regenerate the entire file. Output should be ONLY plain code that can be directly inserted at the cursor position:\\n\\n`;\r\n        }\r\n        \r\n        // 添加文档内容作为上下文\r\n        if (context.documentText && context.documentText.length > 0) {\r\n            // 只添加一部分文档避免过长\r\n            const maxContextLength = 2000;\r\n            const relevantContext = context.documentText.length > maxContextLength \r\n                ? context.documentText.substring(context.documentText.length - maxContextLength) \r\n                : context.documentText;\r\n            \r\n            template += `# Current file content (for context):\\n${relevantContext}\\n\\n`;\r\n        }\r\n        \r\n        // 添加光标前的文本\r\n        if (context.textBeforeCursor) {\r\n            template += `# Code before cursor:\\n${context.textBeforeCursor}\\n`;\r\n        }\r\n        \r\n        // 如果有之前的补全结果，在连续补全模式中使用\r\n        if (context.previousCompletion) {\r\n            this.logger.debug('包含之前的补全结果');\r\n            template += `\\n# Previously completed part:\\n${context.previousCompletion}\\n`;\r\n        }\r\n        \r\n        // 如果有相关的缓存代码，包含作为额外上下文\r\n        if (context.relevantCachedCode && context.relevantCachedCode.length > 0) {\r\n            this.logger.debug('包含相关的缓存代码');\r\n            template += `\\n\\n# Similar code for reference (don't repeat this):\\n${context.relevantCachedCode}\\n`;\r\n        }\r\n        \r\n        // 添加明确的完成指令\r\n        template += `\\n# Complete ONLY the code at cursor position (${language} code only):\\n`;\r\n        \r\n        return template;\r\n    }\r\n\r\n    /**\r\n     * 对补全结果进行后处理，确保与文件类型匹配\r\n     */\r\n    private postProcessCompletion(completionText: string, context: any): string {\r\n        if (!completionText) {\r\n            return '';\r\n        }\r\n        \r\n        const fileType = context.fileType || 'javascript';\r\n        this.logger.debug(`对补全结果进行后处理`);\r\n        \r\n        // 检查并清理JSON或对象包装的代码\r\n        completionText = this.cleanJsonWrappedCode(completionText);\r\n        \r\n        // 检查内容中是否存在明显的不匹配代码标记\r\n        if (fileType === 'python') {\r\n            // 检查Python文件中是否包含JavaScript代码特征\r\n            const jsFeatures = /function\\s+|var\\s+|let\\s+|const\\s+|===|!==|this\\.|prototype\\.|=>|};/g;\r\n            if (jsFeatures.test(completionText)) {\r\n                this.logger.debug(`检测到Python文件中返回了疑似JavaScript代码，尝试修复`);\r\n                \r\n                // 简单转换尝试 - 实际效果可能有限\r\n                completionText = completionText\r\n                    .replace(/function\\s+([a-zA-Z0-9_]+)\\s*\\(/g, 'def $1(')  // function转def\r\n                    .replace(/var\\s+|let\\s+|const\\s+/g, '')  // 移除变量声明\r\n                    .replace(/this\\./g, 'self.')  // this替换为self\r\n                    .replace(/===|==/g, '==')  // 严格等于转换\r\n                    .replace(/!==|!=/g, '!=')  // 严格不等于转换\r\n                    .replace(/;/g, '')  // 移除分号\r\n                    .replace(/true/g, 'True')  // 布尔值转换\r\n                    .replace(/false/g, 'False')\r\n                    .replace(/null/g, 'None');\r\n            }\r\n        } else if (fileType === 'javascript' || fileType === 'typescript') {\r\n            // 检查JS/TS文件中是否包含Python代码特征\r\n            const pyFeatures = /def\\s+|elif\\s+|self\\.|:\\s*$/m;\r\n            if (pyFeatures.test(completionText)) {\r\n                this.logger.debug(`检测到${fileType}文件中返回了疑似Python代码，尝试修复`);\r\n                \r\n                // 简单转换尝试\r\n                completionText = completionText\r\n                    .replace(/def\\s+([a-zA-Z0-9_]+)\\s*\\(/g, 'function $1(')  // def转function\r\n                    .replace(/elif\\s+/g, 'else if (')  // elif转else if\r\n                    .replace(/self\\./g, 'this.')  // self替换为this\r\n                    .replace(/True/g, 'true')  // 布尔值转换\r\n                    .replace(/False/g, 'false')\r\n                    .replace(/None/g, 'null');\r\n                    \r\n                // 处理Python的冒号结构转JS的大括号结构(简单情况)\r\n                const lines = completionText.split('\\n');\r\n                const processedLines = [];\r\n                for (let i = 0; i < lines.length; i++) {\r\n                    let line = lines[i];\r\n                    if (line.trim().endsWith(':')) {\r\n                        line = line.replace(/:$/, ' {');\r\n                    }\r\n                    processedLines.push(line);\r\n                }\r\n                completionText = processedLines.join('\\n');\r\n            }\r\n        }\r\n        \r\n        return completionText;\r\n    }\r\n\r\n    /**\r\n     * 清理JSON或对象包装的代码\r\n     * 处理如obj['complete_code']格式的输出\r\n     */\r\n    private cleanJsonWrappedCode(text: string): string {\r\n        try {\r\n            // 尝试删除JSON包装\r\n            const trimmedText = text.trim();\r\n            \r\n            // 检查是否是常见的JSON包装模式\r\n            if (trimmedText.startsWith('{') && trimmedText.endsWith('}')) {\r\n                try {\r\n                    // 尝试解析为JSON\r\n                    const jsonObj = JSON.parse(trimmedText);\r\n                    \r\n                    // 如果解析成功，检查是否有代码相关字段\r\n                    for (const key of ['code', 'complete_code', 'completion', 'content', 'result']) {\r\n                        if (jsonObj[key] && typeof jsonObj[key] === 'string') {\r\n                            this.logger.debug(`检测到JSON包装的代码，提取字段: ${key}`);\r\n                            return jsonObj[key];\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // JSON解析失败，继续检查其他模式\r\n                }\r\n            }\r\n            \r\n            // 检查常见的JavaScript对象访问模式\r\n            const objAccessPattern = /^\\s*(?:let|const|var)?\\s*(?:obj|result|response|output|completion)\\s*(?:\\[\\s*['\"](\\w+)['\"]\\s*\\]|\\.(\\w+))\\s*(?:=\\s*)?['\"](.+)['\"]\\s*;?\\s*$/s;\r\n            const multilineObjPattern = /^\\s*(?:let|const|var)?\\s*(?:obj|result|response|output|completion)\\s*(?:\\[\\s*['\"](\\w+)['\"]\\s*\\]|\\.(\\w+))\\s*(?:=\\s*)?['\"](.+)['\"]$/s;\r\n            \r\n            let objMatch = text.match(objAccessPattern) || text.match(multilineObjPattern);\r\n            if (objMatch && objMatch[3]) {\r\n                this.logger.debug(`检测到对象访问模式的代码包装，提取内容`);\r\n                // 使用第三个捕获组（实际内容）\r\n                return objMatch[3].replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n            }\r\n            \r\n            // 检查特定模式 obj['complete_code'] = \"...\"\r\n            const specificPatternRegex = /obj\\s*\\[\\s*['\"]complete_code['\"]\\s*\\]\\s*=?\\s*['\"]([\\s\\S]*?)['\"]/;\r\n            const specificMatch = text.match(specificPatternRegex);\r\n            if (specificMatch && specificMatch[1]) {\r\n                this.logger.debug(`检测到特定的obj['complete_code']模式，提取内容`);\r\n                return specificMatch[1].replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\r\n            }\r\n        } catch (error) {\r\n            this.logger.debug(`清理JSON包装代码时出错: ${error instanceof Error ? error.message : '未知错误'}`);\r\n        }\r\n        \r\n        // 如果没有检测到特殊模式或处理失败，返回原始文本\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * 检测当前是否在多行注释中\r\n     */\r\n    private isInMultilineComment(text: string, language: string): boolean {\r\n        if (['javascript', 'typescript', 'java', 'c', 'cpp', 'csharp'].includes(language)) {\r\n            // 检查是否有未闭合的多行注释\r\n            const openComments = (text.match(/\\/\\*/g) || []).length;\r\n            const closeComments = (text.match(/\\*\\//g) || []).length;\r\n            return openComments > closeComments;\r\n        }\r\n        \r\n        if (language === 'python') {\r\n            // 检查是否有未闭合的三引号\r\n            const openTripleQuotes = (text.match(/'''/g) || []).length;\r\n            const openTripleDoubleQuotes = (text.match(/\"\"\"/g) || []).length;\r\n            \r\n            // 如果三引号数量为奇数，则在多行注释中\r\n            return (openTripleQuotes % 2 !== 0) || (openTripleDoubleQuotes % 2 !== 0);\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 测试与Ollama服务的连接\r\n     */\r\n    public async testConnection(): Promise<{success: boolean, message: string, models?: string[]}> {\r\n        this.logger.info(`测试与 Ollama 服务的连接: ${this.modelConfig.apiBase || this.configManager.getApiUrl()}`);\r\n        \r\n        try {\r\n            const apiUrl = this.modelConfig.apiBase || this.configManager.getApiUrl();\r\n            \r\n            // 添加详细诊断\r\n            this.logger.debug(`系统信息: Node版本: ${process.version}, 平台: ${process.platform}`);\r\n            this.logger.debug(`当前工作目录: ${process.cwd()}`);\r\n            this.logger.debug(`API URL: ${apiUrl}, 测试端点: ${apiUrl}/api/tags`);\r\n            \r\n            this.logger.debug(`开始fetch请求 ${apiUrl}/api/tags`);\r\n            \r\n            // 尝试获取模型列表\r\n            const response = await fetch(`${apiUrl}/api/tags`);\r\n            \r\n            this.logger.debug(`收到响应: 状态码=${response.status}, 状态=${response.statusText}`);\r\n            \r\n            if (response.ok) {\r\n                const responseText = await response.text();\r\n                this.logger.debug(`响应内容: ${responseText}`);\r\n                \r\n                let data;\r\n                try {\r\n                    data = JSON.parse(responseText);\r\n                } catch (jsonError) {\r\n                    this.logger.error(`解析JSON响应时出错: ${jsonError}`);\r\n                    return {\r\n                        success: false,\r\n                        message: `收到无效的JSON响应: ${responseText.substring(0, 100)}...`\r\n                    };\r\n                }\r\n                \r\n                if (data.models) {\r\n                    const models = data.models.map((model: any) => model.name);\r\n                    this.logger.info(`成功连接到 Ollama 服务，发现 ${models.length} 个模型: ${models.join(', ')}`);\r\n                    return {\r\n                        success: true,\r\n                        message: '成功连接到Ollama服务',\r\n                        models\r\n                    };\r\n                } else {\r\n                    this.logger.warn(`响应缺少models字段: ${JSON.stringify(data)}`);\r\n                }\r\n            } else {\r\n                this.logger.warn(`Ollama API响应状态不成功: ${response.status} ${response.statusText}`);\r\n            }\r\n            \r\n            this.logger.warn('已连接到 Ollama 服务，但无法获取模型列表');\r\n            return {\r\n                success: true,\r\n                message: '已连接到Ollama服务，但无法获取模型列表',\r\n                models: []\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(`测试Ollama连接时出错: ${error instanceof Error ? error.message : String(error)}`);\r\n            this.logger.error(`错误堆栈: ${error instanceof Error ? error.stack : '无堆栈'}`);\r\n            \r\n            let errorMessage = '无法连接到Ollama服务';\r\n            \r\n            if (error instanceof Error) {\r\n                const networkError = error as unknown as { code?: string };\r\n                if (networkError.code === 'ECONNREFUSED') {\r\n                    errorMessage = 'Ollama服务未运行或无法访问';\r\n                } else if ('response' in error) {\r\n                    const responseError = error as any;\r\n                    errorMessage = `服务响应错误: ${responseError.response?.status} ${responseError.response?.statusText}`;\r\n                }\r\n            }\r\n            \r\n            return {\r\n                success: false,\r\n                message: errorMessage\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 直接从响应文本中提取补全内容，不依赖JSON解析\r\n     */\r\n    private extractCompletionDirectly(text: string): string | null {\r\n        // 如果不是JSON格式，直接返回文本\r\n        if (!text.includes('{') && !text.includes('}')) {\r\n            return text.trim();\r\n        }\r\n        \r\n        // 尝试找出JSON之外的内容\r\n        const parts = text.split('}');\r\n        if (parts.length > 1) {\r\n            // 检查最后一部分是否包含非JSON文本\r\n            const lastPart = parts[parts.length - 1].trim();\r\n            if (lastPart.length > 0 && !lastPart.includes('{')) {\r\n                return lastPart;\r\n            }\r\n        }\r\n        \r\n        // 尝试匹配可能的补全内容\r\n        const contentPatterns = [\r\n            /\"response\"\\s*:\\s*\"((?:\\\\\"|[^\"])*?)\"/,  // 标准response字段\r\n            /\"content\"\\s*:\\s*\"((?:\\\\\"|[^\"])*?)\"/,   // 流式响应中的content字段\r\n            /\"completion\"\\s*:\\s*\"((?:\\\\\"|[^\"])*?)\"/ // 可能的completion字段\r\n        ];\r\n        \r\n        for (const pattern of contentPatterns) {\r\n            const match = text.match(pattern);\r\n            if (match && match[1]) {\r\n                return match[1].replace(/\\\\\"/g, '\"').replace(/\\\\n/g, '\\n');\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * 从任何响应中提取可能的有用内容\r\n     */\r\n    private extractAnyContent(text: string): string {\r\n        // 1. 移除任何可能的JSON语法\r\n        let content = text.replace(/[{}\\[\\]\"]/g, ' ');\r\n        \r\n        // 2. 找到第一个冒号后的内容\r\n        const colonIndex = content.indexOf(':');\r\n        if (colonIndex > 0) {\r\n            content = content.substring(colonIndex + 1);\r\n        }\r\n        \r\n        // 3. 清理并规范化文本\r\n        content = content\r\n            .replace(/\\\\n/g, '\\n')          // 处理换行符\r\n            .replace(/\\s+/g, ' ')           // 压缩空白字符\r\n            .trim();                         // 修剪两端空白\r\n        \r\n        // 4. 如果内容很短，可能是错误信息，返回空字符串\r\n        if (content.length < 5) {\r\n            return '';\r\n        }\r\n        \r\n        return content;\r\n    }\r\n\r\n    /**\r\n     * 生成代码补全\r\n     * @param prompt 提示词\r\n     * @param options 选项\r\n     * @param signal 中止信号\r\n     * @returns 补全结果文本\r\n     */\r\n    public async generateCompletion(\r\n        prompt: string, \r\n        options: { temperature?: number; maxTokens?: number; model?: string }, \r\n        signal?: AbortSignal\r\n    ): Promise<string | null> {\r\n        try {\r\n            const apiUrl = this.modelConfig.apiBase || this.configManager.getApiUrl();\r\n            const modelName = options.model || this.modelConfig.model || this.configManager.getModelName();\r\n            const temperature = options.temperature !== undefined ? options.temperature : this.modelConfig.temperature || this.configManager.getTemperature();\r\n            const maxTokens = options.maxTokens || this.modelConfig.maxTokens || this.configManager.getMaxTokens();\r\n            \r\n            this.logger.debug(`生成补全: API URL=${apiUrl}, 模型=${modelName}, 温度=${temperature}, 最大令牌数=${maxTokens}`);\r\n            \r\n            // 记录提示词（仅在调试模式下记录完整提示词）\r\n            if (this.configManager.isDebugEnabled()) {\r\n                this.logger.debug(`完整提示词:\\n${prompt}`);\r\n            } else {\r\n                // 仅记录提示词的前100个字符\r\n                this.logger.debug(`提示词前100个字符: ${prompt.substring(0, 100)}...`);\r\n            }\r\n            \r\n            // 构建请求数据\r\n            const requestData = {\r\n                model: modelName,\r\n                prompt: prompt,\r\n                temperature: temperature,\r\n                max_tokens: maxTokens,\r\n                options: {\r\n                    num_predict: maxTokens\r\n                }\r\n            };\r\n            \r\n            // 请求信息日志\r\n            this.logger.debug(`发送请求到Ollama API: ${apiUrl}/api/generate`);\r\n            this.logger.debug(`请求体大小: ${JSON.stringify(requestData).length} 字符`);\r\n            \r\n            // 创建请求选项\r\n            const fetchOptions: RequestInit = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestData),\r\n                signal: signal\r\n            };\r\n            \r\n            // 发送请求\r\n            this.logger.debug('开始发送fetch请求...');\r\n            const response = await fetch(`${apiUrl}/api/generate`, fetchOptions);\r\n            \r\n            // 检查是否被中止\r\n            if (signal?.aborted) {\r\n                this.logger.debug('请求被中止');\r\n                return null;\r\n            }\r\n            \r\n            // 记录响应状态\r\n            this.logger.debug(`Ollama API响应状态: ${response.status} ${response.statusText}`);\r\n            \r\n            // 检查响应状态\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                this.logger.error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n                throw new Error(`API请求失败: ${response.status} ${response.statusText} - ${errorText}`);\r\n            }\r\n            \r\n            // 获取响应文本\r\n            const responseText = await response.text();\r\n            this.logger.debug(`获取到响应文本，长度: ${responseText.length}`);\r\n            \r\n            // 处理流式JSON响应\r\n            let completionText = '';\r\n            \r\n            // 拆分响应并收集所有的response字段内容\r\n            if (responseText.includes('\"response\"')) {\r\n                try {\r\n                    this.logger.debug('检测到response字段，解析流式JSON响应');\r\n                    // 按行拆分响应\r\n                    const lines = responseText.split('\\n').filter(line => line.trim() !== '');\r\n                    this.logger.debug(`响应行数: ${lines.length}`);\r\n                    \r\n                    // 从每行提取response字段内容并合并\r\n                    let processedLines = 0;\r\n                    for (const line of lines) {\r\n                        try {\r\n                            const jsonObj = JSON.parse(line);\r\n                            if (jsonObj && jsonObj.response) {\r\n                                completionText += jsonObj.response;\r\n                                processedLines++;\r\n                            }\r\n                        } catch (parseError) {\r\n                            this.logger.debug(`解析响应行时出错: ${parseError.message}`);\r\n                        }\r\n                    }\r\n                    \r\n                    this.logger.debug(`成功处理的响应行: ${processedLines}/${lines.length}`);\r\n                    this.logger.debug(`从流式响应中提取的完整内容长度: ${completionText.length}`);\r\n                } catch (error) {\r\n                    this.logger.error(`处理流式响应时出错: ${error.message}`);\r\n                    completionText = '';\r\n                }\r\n            } else {\r\n                this.logger.debug('未检测到response字段，尝试其他方法解析响应');\r\n            }\r\n            \r\n            // 如果流式处理失败，尝试使用正则表达式提取所有响应\r\n            if (!completionText || completionText.trim().length === 0) {\r\n                this.logger.debug(`尝试使用正则表达式提取所有响应`);\r\n                try {\r\n                    // 提取所有response值\r\n                    let allResponses = '';\r\n                    const regex = /\"response\":[ ]*\"([^\"]*)\"/g;\r\n                    let match;\r\n                    let matchCount = 0;\r\n                    \r\n                    while ((match = regex.exec(responseText)) !== null) {\r\n                        if (match[1]) {\r\n                            // 处理转义字符\r\n                            const responseValue = match[1].replace(/\\\\n/g, '\\n').replace(/\\\\r/g, '\\r').replace(/\\\\\"/g, '\"');\r\n                            allResponses += responseValue;\r\n                            matchCount++;\r\n                        }\r\n                    }\r\n                    \r\n                    if (allResponses.length > 0) {\r\n                        this.logger.debug(`正则提取成功，找到${matchCount}个匹配，提取长度: ${allResponses.length}`);\r\n                        completionText = allResponses;\r\n                    } else {\r\n                        this.logger.debug('正则表达式没有找到匹配');\r\n                    }\r\n                } catch (error) {\r\n                    this.logger.debug(`正则提取失败: ${error.message}`);\r\n                }\r\n            }\r\n            \r\n            // 如果提取内容还是为空，尝试直接从响应文本中提取\r\n            if (!completionText || completionText.trim().length === 0) {\r\n                // 尝试直接提取\r\n                this.logger.debug('尝试直接从响应文本中提取内容');\r\n                const directExtract = this.extractCompletionDirectly(responseText);\r\n                if (directExtract) {\r\n                    completionText = directExtract;\r\n                    this.logger.debug(`直接提取成功，提取长度: ${completionText.length}`);\r\n                } else {\r\n                    this.logger.debug('直接提取失败');\r\n                }\r\n            }\r\n            \r\n            // 去除Markdown代码块标记\r\n            if (completionText.startsWith('```')) {\r\n                const firstLineBreak = completionText.indexOf('\\n');\r\n                if (firstLineBreak !== -1) {\r\n                    // 移除开头的```python或```等标记\r\n                    completionText = completionText.substring(firstLineBreak + 1);\r\n                } else {\r\n                    completionText = '';\r\n                }\r\n                \r\n                // 移除结尾的```\r\n                const lastCodeBlockEnd = completionText.lastIndexOf('```');\r\n                if (lastCodeBlockEnd !== -1) {\r\n                    completionText = completionText.substring(0, lastCodeBlockEnd).trim();\r\n                }\r\n                this.logger.debug('已移除Markdown代码块标记');\r\n            }\r\n            \r\n            // 记录最终的补全结果\r\n            if (completionText) {\r\n                this.logger.debug(`最终补全结果长度: ${completionText.length}`);\r\n                if (this.configManager.isDebugEnabled()) {\r\n                    this.logger.debug(`最终补全结果前200字符: ${completionText.substring(0, 200)}${completionText.length > 200 ? '...' : ''}`);\r\n                }\r\n            } else {\r\n                this.logger.debug(`没有有效的补全结果`);\r\n            }\r\n            \r\n            return completionText;\r\n        } catch (error) {\r\n            // 检查是否被中止\r\n            if (signal?.aborted) {\r\n                this.logger.debug('请求被中止');\r\n                return null;\r\n            }\r\n            \r\n            this.logger.error(`生成补全时出错: ${error.message}`, error);\r\n            throw error;\r\n        }\r\n    }\r\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst regex_js_1 = require(\"./regex.js\");\nfunction validate(uuid) {\n    return typeof uuid === 'string' && regex_js_1.default.test(uuid);\n}\nexports.default = validate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parse_js_1 = require(\"./parse.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nfunction v1ToV6(uuid) {\n    const v1Bytes = typeof uuid === 'string' ? (0, parse_js_1.default)(uuid) : uuid;\n    const v6Bytes = _v1ToV6(v1Bytes);\n    return typeof uuid === 'string' ? (0, stringify_js_1.unsafeStringify)(v6Bytes) : v6Bytes;\n}\nexports.default = v1ToV6;\nfunction _v1ToV6(v1Bytes) {\n    return Uint8Array.of(((v1Bytes[6] & 0x0f) << 4) | ((v1Bytes[7] >> 4) & 0x0f), ((v1Bytes[7] & 0x0f) << 4) | ((v1Bytes[4] & 0xf0) >> 4), ((v1Bytes[4] & 0x0f) << 4) | ((v1Bytes[5] & 0xf0) >> 4), ((v1Bytes[5] & 0x0f) << 4) | ((v1Bytes[0] & 0xf0) >> 4), ((v1Bytes[0] & 0x0f) << 4) | ((v1Bytes[1] & 0xf0) >> 4), ((v1Bytes[1] & 0x0f) << 4) | ((v1Bytes[2] & 0xf0) >> 4), 0x60 | (v1Bytes[2] & 0x0f), v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);\n}\n","import * as vscode from 'vscode';\r\nimport { ConfigManager } from '../config/configManager';\r\nimport { CacheManager } from '../cache/cacheManager';\r\nimport { Logger } from '../utils/logger';\r\nimport { CompletionProvider } from '../providers/completionProvider';\r\nimport { ClientFactory } from '../api/clientFactory';\r\nimport { ModelConfig, ModelProvider } from '../api/baseClient';\r\n\r\n/**\r\n * 命令管理器\r\n * 负责注册和处理插件命令\r\n */\r\nexport class CommandManager implements vscode.Disposable {\r\n    private disposables: vscode.Disposable[] = [];\r\n    private logger: Logger;\r\n    private clientFactory: ClientFactory;\r\n\r\n    constructor(\r\n        private configManager: ConfigManager,\r\n        private cacheManager: CacheManager,\r\n        private completionProvider: CompletionProvider,\r\n        private context: vscode.ExtensionContext\r\n    ) {\r\n        this.logger = Logger.getInstance();\r\n        this.clientFactory = new ClientFactory(configManager);\r\n        \r\n        // 注册命令\r\n        this.registerCommands();\r\n    }\r\n    \r\n    /**\r\n     * 注册命令\r\n     */\r\n    private registerCommands(): void {\r\n        const commands: { [key: string]: (...args: any[]) => any } = {\r\n            'tabAutoComplete.enable': this.enableExtension.bind(this),\r\n            'tabAutoComplete.disable': this.disableExtension.bind(this),\r\n            'tabAutoComplete.selectModel': this.selectModel.bind(this),\r\n            'tabAutoComplete.clearCache': this.clearCache.bind(this),\r\n            'tabAutoComplete.testConnection': this.testConnection.bind(this),\r\n            'tabAutoComplete.showConfig': this.showConfig.bind(this),\r\n            'tabAutoComplete.applyCompletion': this.applyCompletion.bind(this),\r\n            'tabAutoComplete.handleEscape': this.handleEscape.bind(this),\r\n            'tabAutoComplete.manageModels': this.manageModels.bind(this),\r\n            'tabAutoComplete.toggleEnabled': this.toggleEnabled.bind(this)\r\n        };\r\n        \r\n        // 注册每个命令\r\n        for (const [commandId, handler] of Object.entries(commands)) {\r\n            const disposable = vscode.commands.registerCommand(commandId, handler);\r\n            this.disposables.push(disposable);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 启用代码补全\r\n     */\r\n    private async enableExtension(): Promise<void> {\r\n        await this.configManager.setEnabled(true);\r\n        vscode.window.showInformationMessage('Ollama 代码补全已启用');\r\n    }\r\n    \r\n    /**\r\n     * 禁用代码补全\r\n     */\r\n    private async disableExtension(): Promise<void> {\r\n        await this.configManager.setEnabled(false);\r\n        vscode.window.showInformationMessage('Ollama 代码补全已禁用');\r\n    }\r\n    \r\n    /**\r\n     * 切换启用状态\r\n     */\r\n    private async toggleEnabled(): Promise<void> {\r\n        const isCurrentlyEnabled = this.configManager.isEnabled();\r\n        await this.configManager.setEnabled(!isCurrentlyEnabled);\r\n        \r\n        // 显示通知\r\n        vscode.window.showInformationMessage(\r\n            isCurrentlyEnabled \r\n                ? 'TabAutoComplete已禁用' \r\n                : 'TabAutoComplete已启用'\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * 选择模型\r\n     */\r\n    private async selectModel(): Promise<void> {\r\n        // 获取可用模型列表\r\n        const models = this.configManager.getAvailableModels();\r\n        const logger = Logger.getInstance();\r\n        \r\n        if (models.length === 0) {\r\n            logger.warn('没有可用的模型配置，请先添加模型');\r\n            vscode.window.showInformationMessage('没有可用的模型配置，请先添加模型');\r\n            this.manageModels();\r\n            return;\r\n        }\r\n        \r\n        // 获取当前选择的模型名称\r\n        const currentModelName = this.configManager.getSelectedModelName();\r\n        logger.debug(`当前选择的模型: ${currentModelName}`);\r\n        \r\n        // 创建QuickPick选项\r\n        const items = models.map((model, index) => ({\r\n            label: model.title,\r\n            description: `${model.provider} - ${model.model}`,\r\n            detail: `API地址: ${model.apiBase || '默认'}${model.apiKey ? ', API密钥: 已设置' : ''}`,\r\n            index: index,\r\n            model: model,\r\n            picked: model.title === currentModelName\r\n        }));\r\n        \r\n        // 显示QuickPick\r\n        const selected = await vscode.window.showQuickPick(items, {\r\n            placeHolder: '选择要使用的模型'\r\n        });\r\n        \r\n        if (selected) {\r\n            // 更新选择的模型名称\r\n            logger.info(`用户选择了模型: ${selected.label} (${selected.description})`);\r\n            await this.configManager.setSelectedModelName(selected.label);\r\n            \r\n            // 显示更详细的信息\r\n            const message = `已选择模型: ${selected.label}\\n提供商: ${selected.model.provider}\\n模型: ${selected.model.model}\\nAPI地址: ${selected.model.apiBase || '默认'}`;\r\n            vscode.window.showInformationMessage(message, '测试连接').then(selection => {\r\n                if (selection === '测试连接') {\r\n                    this.testConnection();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 清除代码补全缓存\r\n     */\r\n    private async clearCache(): Promise<void> {\r\n        const confirm = await vscode.window.showWarningMessage(\r\n            '确定要清除所有代码补全缓存吗？',\r\n            { modal: true },\r\n            '确定'\r\n        );\r\n        \r\n        if (confirm === '确定') {\r\n            this.cacheManager.clearCache();\r\n            vscode.window.showInformationMessage('代码补全缓存已清除');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 测试连接\r\n     */\r\n    private async testConnection(): Promise<void> {\r\n        vscode.window.withProgress({\r\n            location: vscode.ProgressLocation.Notification,\r\n            title: '测试AI模型连接',\r\n            cancellable: false\r\n        }, async (progress) => {\r\n            progress.report({ message: '正在连接...' });\r\n            \r\n            try {\r\n                // 获取当前选择的模型配置\r\n                const modelConfig = this.configManager.getSelectedModelConfig();\r\n                \r\n                // 创建客户端\r\n                const client = this.clientFactory.createClient(modelConfig);\r\n                \r\n                // 测试连接\r\n                const result = await client.testConnection();\r\n                \r\n                if (result.success) {\r\n                    let message = `连接成功: ${modelConfig.provider} - ${modelConfig.model}`;\r\n                    if (result.models && result.models.length > 0) {\r\n                        message += `\\n可用模型: ${result.models.slice(0, 5).join(', ')}${result.models.length > 5 ? '...' : ''}`;\r\n                    }\r\n                    vscode.window.showInformationMessage(message);\r\n                } else {\r\n                    vscode.window.showErrorMessage(`连接失败: ${result.message}`);\r\n                }\r\n            } catch (error) {\r\n                vscode.window.showErrorMessage(`连接测试出错: ${error.message}`);\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * 显示当前配置\r\n     */\r\n    private showConfig(): void {\r\n        const config = this.configManager.getFullConfig();\r\n        const selectedModel = this.configManager.getSelectedModelConfig();\r\n        \r\n        // 格式化配置为Markdown\r\n        const configMarkdown = [\r\n            '# TabAutoComplete 配置',\r\n            '',\r\n            '## 当前选择的模型',\r\n            `- 标题: ${selectedModel.title}`,\r\n            `- 提供商: ${selectedModel.provider}`,\r\n            `- 模型名称: ${selectedModel.model}`,\r\n            `- API地址: ${selectedModel.apiBase || '默认'}`,\r\n            selectedModel.apiKey ? '- API密钥: ******（已设置）' : '',\r\n            '',\r\n            '## 常规设置',\r\n            `- 启用状态: ${config.enabled ? '✅ 启用' : '❌ 禁用'}`,\r\n            `- 触发延迟: ${config.triggerDelay}毫秒`,\r\n            '',\r\n            '## 上下文设置',\r\n            `- 最大上下文行数: ${config.maxContextLines}`,\r\n            `- 包含导入语句: ${config.includeImports ? '是' : '否'}`,\r\n            `- 包含注释: ${config.includeComments ? '是' : '否'}`,\r\n            '',\r\n            '## 缓存设置',\r\n            `- 启用缓存: ${config.cacheEnabled ? '是' : '否'}`,\r\n            `- 保留时间: ${config.retentionPeriodHours}小时`,\r\n            `- 最大缓存条目: ${config.maxSnippets}`,\r\n            '',\r\n            '## 文件类型设置',\r\n            `- 启用的文件类型: ${Array.isArray(config.enabledFileTypes) ? config.enabledFileTypes.join(', ') : config.enabledFileTypes}`,\r\n            `- 禁用的文件类型: ${Array.isArray(config.disabledFileTypes) ? config.disabledFileTypes.join(', ') : config.disabledFileTypes}`\r\n        ].join('\\n');\r\n        \r\n        // 创建并显示Markdown预览\r\n        const panel = vscode.window.createWebviewPanel(\r\n            'tabAutoCompleteConfig',\r\n            'TabAutoComplete 配置',\r\n            vscode.ViewColumn.One,\r\n            {}\r\n        );\r\n        \r\n        panel.webview.html = `<!DOCTYPE html>\r\n<html lang=\"zh-CN\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>TabAutoComplete 配置</title>\r\n    <style>\r\n        body {\r\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif;\r\n            padding: 0 20px;\r\n            line-height: 1.5;\r\n        }\r\n        h1 { color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px; }\r\n        h2 { color: #0078d7; margin-top: 20px; }\r\n        ul { padding-left: 20px; }\r\n        li { margin-bottom: 5px; }\r\n    </style>\r\n</head>\r\n<body>\r\n    ${this.markdownToHtml(configMarkdown)}\r\n</body>\r\n</html>`;\r\n    }\r\n    \r\n    /**\r\n     * 简单的Markdown转HTML工具\r\n     */\r\n    private markdownToHtml(markdown: string): string {\r\n        return markdown\r\n            .replace(/^# (.*$)/gm, '<h1>$1</h1>')\r\n            .replace(/^## (.*$)/gm, '<h2>$1</h2>')\r\n            .replace(/^- (.*$)/gm, '<ul><li>$1</li></ul>')\r\n            .replace(/<\\/ul><ul>/g, '')\r\n            .replace(/\\n\\n/g, '<br><br>');\r\n    }\r\n\r\n    /**\r\n     * 应用补全\r\n     */\r\n    private applyCompletion(): void {\r\n        // 获取活动编辑器\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor) {\r\n            return;\r\n        }\r\n        \r\n        // 检查是否有活动预览\r\n        if (this.completionProvider.hasActivePreview()) {\r\n            // 应用补全\r\n            this.completionProvider.accept();\r\n        } else {\r\n            // 如果没有活动预览，执行默认的Tab行为\r\n            vscode.commands.executeCommand('tab');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理ESC键\r\n     */\r\n    private handleEscape(): void {\r\n        // 获取活动编辑器\r\n        const editor = vscode.window.activeTextEditor;\r\n        if (!editor) {\r\n            return;\r\n        }\r\n        \r\n        // 检查是否有活动预览\r\n        if (this.completionProvider.hasActivePreview()) {\r\n            // 清除预览\r\n            this.completionProvider.clearPreview();\r\n        } else {\r\n            // 如果没有活动预览，执行默认的ESC行为\r\n            vscode.commands.executeCommand('escape');\r\n        }\r\n\r\n        // 取消请求\r\n        this.completionProvider.cancel();\r\n    }\r\n    \r\n    /**\r\n     * 管理模型\r\n     */\r\n    private async manageModels(): Promise<void> {\r\n        // 显示模型管理选项\r\n        const options = [\r\n            '查看所有模型',\r\n            '添加新模型',\r\n            '编辑模型',\r\n            '删除模型'\r\n        ];\r\n        \r\n        const selected = await vscode.window.showQuickPick(options, {\r\n            placeHolder: '选择操作'\r\n        });\r\n        \r\n        if (!selected) {\r\n            return;\r\n        }\r\n        \r\n        switch (selected) {\r\n            case '查看所有模型':\r\n                this.viewAllModels();\r\n                break;\r\n                \r\n            case '添加新模型':\r\n                this.addNewModel();\r\n                break;\r\n                \r\n            case '编辑模型':\r\n                this.editModel();\r\n                break;\r\n                \r\n            case '删除模型':\r\n                this.deleteModel();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 查看所有模型\r\n     */\r\n    private viewAllModels(): void {\r\n        const models = this.configManager.getAvailableModels();\r\n        \r\n        if (models.length === 0) {\r\n            vscode.window.showInformationMessage('没有可用的模型配置');\r\n            return;\r\n        }\r\n        \r\n        // 创建模型信息面板\r\n        const panel = vscode.window.createWebviewPanel(\r\n            'tabAutoCompleteModels',\r\n            'TabAutoComplete 模型',\r\n            vscode.ViewColumn.One,\r\n            {}\r\n        );\r\n        \r\n        // 构建HTML内容\r\n        let modelsHtml = '';\r\n        models.forEach((model, _index) => {\r\n            modelsHtml += `\r\n                <div class=\"model-item\">\r\n                    <h3>${model.title}</h3>\r\n                    <div class=\"model-detail\">\r\n                        <span class=\"key\">提供商:</span> \r\n                        <span class=\"value\">${model.provider}</span>\r\n                    </div>\r\n                    <div class=\"model-detail\">\r\n                        <span class=\"key\">模型:</span> \r\n                        <span class=\"value\">${model.model}</span>\r\n                    </div>\r\n                    <div class=\"model-detail\">\r\n                        <span class=\"key\">API基础URL:</span> \r\n                        <span class=\"value\">${model.apiBase || '默认'}</span>\r\n                    </div>\r\n                    ${model.apiKey ? '<div class=\"model-detail\"><span class=\"key\">API密钥:</span> <span class=\"value\">已设置</span></div>' : ''}\r\n                    ${model.contextLength ? `<div class=\"model-detail\"><span class=\"key\">上下文长度:</span> <span class=\"value\">${model.contextLength}</span></div>` : ''}\r\n                    ${model.temperature ? `<div class=\"model-detail\"><span class=\"key\">温度:</span> <span class=\"value\">${model.temperature}</span></div>` : ''}\r\n                    ${model.maxTokens ? `<div class=\"model-detail\"><span class=\"key\">最大Token数:</span> <span class=\"value\">${model.maxTokens}</span></div>` : ''}\r\n                </div>\r\n            `;\r\n        });\r\n        \r\n        panel.webview.html = `\r\n            <!DOCTYPE html>\r\n            <html>\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                <title>TabAutoComplete 模型</title>\r\n                <style>\r\n                    body { font-family: Arial, sans-serif; padding: 20px; }\r\n                    h1 { color: #333; }\r\n                    h3 { color: #0077cc; margin-bottom: 10px; }\r\n                    .model-item { \r\n                        margin-bottom: 30px; \r\n                        padding: 15px;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 5px;\r\n                    }\r\n                    .model-detail { margin: 5px 0; }\r\n                    .key { font-weight: bold; }\r\n                    .value { color: #333; }\r\n                </style>\r\n            </head>\r\n            <body>\r\n                <h1>可用的AI模型 (${models.length})</h1>\r\n                ${modelsHtml}\r\n            </body>\r\n            </html>\r\n        `;\r\n    }\r\n    \r\n    /**\r\n     * 添加新模型\r\n     */\r\n    private async addNewModel(): Promise<void> {\r\n        // 选择模型提供商\r\n        const providerOptions = [\r\n            { label: 'Ollama (本地)', value: ModelProvider.OLLAMA },\r\n            { label: 'DeepSeek', value: ModelProvider.DEEPSEEK },\r\n            { label: 'OpenAI', value: ModelProvider.OPENAI },\r\n            { label: 'SiliconFlow', value: ModelProvider.SILICONFLOW }\r\n        ];\r\n        \r\n        const selectedProvider = await vscode.window.showQuickPick(providerOptions, {\r\n            placeHolder: '选择模型提供商'\r\n        });\r\n        \r\n        if (!selectedProvider) {\r\n            return;\r\n        }\r\n        \r\n        // 创建新的模型配置\r\n        const newModel: ModelConfig = {\r\n            title: '',\r\n            model: '',\r\n            provider: selectedProvider.value\r\n        };\r\n        \r\n        // 输入模型标题\r\n        const title = await vscode.window.showInputBox({\r\n            prompt: '输入模型显示名称',\r\n            placeHolder: '例如: GPT-4, DeepSeek Coder, qwen2.5-coder:7b'\r\n        });\r\n        \r\n        if (!title) {\r\n            return;\r\n        }\r\n        \r\n        newModel.title = title;\r\n        \r\n        // 输入模型名称\r\n        const model = await vscode.window.showInputBox({\r\n            prompt: '输入模型名称',\r\n            placeHolder: '例如: gpt-4, deepseek-coder, qwen2.5-coder:7b'\r\n        });\r\n        \r\n        if (!model) {\r\n            return;\r\n        }\r\n        \r\n        newModel.model = model;\r\n        \r\n        // 如果不是Ollama，需要API密钥\r\n        if (selectedProvider.value !== ModelProvider.OLLAMA) {\r\n            const apiKey = await vscode.window.showInputBox({\r\n                prompt: `输入${selectedProvider.label} API密钥`,\r\n                password: true\r\n            });\r\n            \r\n            if (!apiKey) {\r\n                return;\r\n            }\r\n            \r\n            newModel.apiKey = apiKey;\r\n        }\r\n        \r\n        // 输入API基础URL（可选）\r\n        const apiBase = await vscode.window.showInputBox({\r\n            prompt: `输入API基础URL（可选，留空使用默认值）`,\r\n            placeHolder: selectedProvider.value === ModelProvider.OLLAMA ? 'http://localhost:11434' : ''\r\n        });\r\n        \r\n        if (apiBase) {\r\n            newModel.apiBase = apiBase;\r\n        } else if (selectedProvider.value === ModelProvider.OLLAMA) {\r\n            newModel.apiBase = 'http://localhost:11434';\r\n        }\r\n        \r\n        // 输入上下文长度（可选）\r\n        const contextLengthStr = await vscode.window.showInputBox({\r\n            prompt: '输入上下文长度（可选，留空使用默认值）',\r\n            placeHolder: '例如: 8192, 32768, 128000'\r\n        });\r\n        \r\n        if (contextLengthStr) {\r\n            const contextLength = parseInt(contextLengthStr);\r\n            if (!isNaN(contextLength)) {\r\n                newModel.contextLength = contextLength;\r\n            }\r\n        }\r\n        \r\n        // 输入温度（可选）\r\n        const temperatureStr = await vscode.window.showInputBox({\r\n            prompt: '输入生成温度（可选，留空使用默认值）',\r\n            placeHolder: '例如: 0.3, 0.7, 1.0'\r\n        });\r\n        \r\n        if (temperatureStr) {\r\n            const temperature = parseFloat(temperatureStr);\r\n            if (!isNaN(temperature)) {\r\n                newModel.temperature = temperature;\r\n            }\r\n        }\r\n        \r\n        // 输入最大Token数（可选）\r\n        const maxTokensStr = await vscode.window.showInputBox({\r\n            prompt: '输入最大生成Token数（可选，留空使用默认值）',\r\n            placeHolder: '例如: 1000, 2000, 4000'\r\n        });\r\n        \r\n        if (maxTokensStr) {\r\n            const maxTokens = parseInt(maxTokensStr);\r\n            if (!isNaN(maxTokens)) {\r\n                newModel.maxTokens = maxTokens;\r\n            }\r\n        }\r\n        \r\n        // 添加模型配置\r\n        await this.configManager.addModelConfig(newModel);\r\n        \r\n        vscode.window.showInformationMessage(`已添加模型: ${newModel.title}`);\r\n        \r\n        // 询问是否设置为当前模型\r\n        const setAsCurrent = await vscode.window.showQuickPick(['是', '否'], {\r\n            placeHolder: '是否将此模型设置为当前使用的模型？'\r\n        });\r\n        \r\n        if (setAsCurrent === '是') {\r\n            // 获取新添加的模型索引\r\n            const models = this.configManager.getAvailableModels();\r\n            const newIndex = models.length - 1;\r\n            await this.configManager.setSelectedModelIndex(newIndex);\r\n            vscode.window.showInformationMessage(`已将 ${newModel.title} 设置为当前模型`);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 编辑模型\r\n     */\r\n    private async editModel(): Promise<void> {\r\n        const models = this.configManager.getAvailableModels();\r\n        \r\n        if (models.length === 0) {\r\n            vscode.window.showInformationMessage('没有可用的模型配置');\r\n            return;\r\n        }\r\n        \r\n        // 选择要编辑的模型\r\n        const modelItems = models.map((model, index) => ({\r\n            label: model.title,\r\n            description: `${model.provider} - ${model.model}`,\r\n            index: index,\r\n            model: model\r\n        }));\r\n        \r\n        const selectedModel = await vscode.window.showQuickPick(modelItems, {\r\n            placeHolder: '选择要编辑的模型'\r\n        });\r\n        \r\n        if (!selectedModel) {\r\n            return;\r\n        }\r\n        \r\n        // 创建模型配置副本\r\n        const editedModel: ModelConfig = { ...selectedModel.model };\r\n        \r\n        // 编辑模型标题\r\n        const title = await vscode.window.showInputBox({\r\n            prompt: '输入模型显示名称',\r\n            value: editedModel.title\r\n        });\r\n        \r\n        if (title) {\r\n            editedModel.title = title;\r\n        }\r\n        \r\n        // 编辑模型名称\r\n        const model = await vscode.window.showInputBox({\r\n            prompt: '输入模型名称',\r\n            value: editedModel.model\r\n        });\r\n        \r\n        if (model) {\r\n            editedModel.model = model;\r\n        }\r\n        \r\n        // 如果不是Ollama，可以编辑API密钥\r\n        if (editedModel.provider !== ModelProvider.OLLAMA) {\r\n            const apiKey = await vscode.window.showInputBox({\r\n                prompt: `输入API密钥（留空保持不变）`,\r\n                password: true,\r\n                placeHolder: editedModel.apiKey ? '******' : '未设置'\r\n            });\r\n            \r\n            if (apiKey) {\r\n                editedModel.apiKey = apiKey;\r\n            }\r\n        }\r\n        \r\n        // 编辑API基础URL\r\n        const apiBase = await vscode.window.showInputBox({\r\n            prompt: '输入API基础URL（留空保持不变）',\r\n            value: editedModel.apiBase || ''\r\n        });\r\n        \r\n        if (apiBase) {\r\n            editedModel.apiBase = apiBase;\r\n        }\r\n        \r\n        // 编辑上下文长度\r\n        const contextLengthStr = await vscode.window.showInputBox({\r\n            prompt: '输入上下文长度（留空保持不变）',\r\n            value: editedModel.contextLength ? editedModel.contextLength.toString() : ''\r\n        });\r\n        \r\n        if (contextLengthStr) {\r\n            const contextLength = parseInt(contextLengthStr);\r\n            if (!isNaN(contextLength)) {\r\n                editedModel.contextLength = contextLength;\r\n            }\r\n        }\r\n        \r\n        // 编辑温度\r\n        const temperatureStr = await vscode.window.showInputBox({\r\n            prompt: '输入生成温度（留空保持不变）',\r\n            value: editedModel.temperature ? editedModel.temperature.toString() : ''\r\n        });\r\n        \r\n        if (temperatureStr) {\r\n            const temperature = parseFloat(temperatureStr);\r\n            if (!isNaN(temperature)) {\r\n                editedModel.temperature = temperature;\r\n            }\r\n        }\r\n        \r\n        // 编辑最大Token数\r\n        const maxTokensStr = await vscode.window.showInputBox({\r\n            prompt: '输入最大生成Token数（留空保持不变）',\r\n            value: editedModel.maxTokens ? editedModel.maxTokens.toString() : ''\r\n        });\r\n        \r\n        if (maxTokensStr) {\r\n            const maxTokens = parseInt(maxTokensStr);\r\n            if (!isNaN(maxTokens)) {\r\n                editedModel.maxTokens = maxTokens;\r\n            }\r\n        }\r\n        \r\n        // 更新模型配置\r\n        await this.configManager.updateModelConfig(selectedModel.index, editedModel);\r\n        \r\n        vscode.window.showInformationMessage(`已更新模型: ${editedModel.title}`);\r\n        \r\n        // 如果编辑的是当前选择的模型，更新当前模型\r\n        const currentModel = this.configManager.getSelectedModelConfig();\r\n        const currentModelIndex = models.findIndex(m => \r\n            m.title === currentModel.title && \r\n            m.model === currentModel.model && \r\n            m.provider === currentModel.provider\r\n        );\r\n        \r\n        if (currentModelIndex === selectedModel.index) {\r\n            // 不需要额外操作，因为我们直接更新了models数组中的对象\r\n            vscode.window.showInformationMessage(`当前选择的模型已更新`);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 删除模型\r\n     */\r\n    private async deleteModel(): Promise<void> {\r\n        const models = this.configManager.getAvailableModels();\r\n        \r\n        if (models.length === 0) {\r\n            vscode.window.showInformationMessage('没有可用的模型配置');\r\n            return;\r\n        }\r\n        \r\n        // 选择要删除的模型\r\n        const modelItems = models.map((model, index) => ({\r\n            label: model.title,\r\n            description: `${model.provider} - ${model.model}`,\r\n            index: index,\r\n            model: model\r\n        }));\r\n        \r\n        const selectedModel = await vscode.window.showQuickPick(modelItems, {\r\n            placeHolder: '选择要删除的模型'\r\n        });\r\n        \r\n        if (!selectedModel) {\r\n            return;\r\n        }\r\n        \r\n        // 确认删除\r\n        const confirm = await vscode.window.showQuickPick(['是', '否'], {\r\n            placeHolder: `确定要删除模型 ${selectedModel.label} 吗？`\r\n        });\r\n        \r\n        if (confirm !== '是') {\r\n            return;\r\n        }\r\n        \r\n        // 删除模型配置\r\n        await this.configManager.deleteModelConfig(selectedModel.index);\r\n        \r\n        vscode.window.showInformationMessage(`已删除模型: ${selectedModel.label}`);\r\n    }\r\n\r\n    /**\r\n     * 释放资源\r\n     */\r\n    public dispose(): void {\r\n        this.disposables.forEach(d => d.dispose());\r\n    }\r\n} ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"crypto\");\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        (0, crypto_1.randomFillSync)(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\nexports.default = rng;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parse_js_1 = require(\"./parse.js\");\nconst stringify_js_1 = require(\"./stringify.js\");\nfunction v6ToV1(uuid) {\n    const v6Bytes = typeof uuid === 'string' ? (0, parse_js_1.default)(uuid) : uuid;\n    const v1Bytes = _v6ToV1(v6Bytes);\n    return typeof uuid === 'string' ? (0, stringify_js_1.unsafeStringify)(v1Bytes) : v1Bytes;\n}\nexports.default = v6ToV1;\nfunction _v6ToV1(v6Bytes) {\n    return Uint8Array.of(((v6Bytes[3] & 0x0f) << 4) | ((v6Bytes[4] >> 4) & 0x0f), ((v6Bytes[4] & 0x0f) << 4) | ((v6Bytes[5] & 0xf0) >> 4), ((v6Bytes[5] & 0x0f) << 4) | (v6Bytes[6] & 0x0f), v6Bytes[7], ((v6Bytes[1] & 0x0f) << 4) | ((v6Bytes[2] & 0xf0) >> 4), ((v6Bytes[2] & 0x0f) << 4) | ((v6Bytes[3] & 0xf0) >> 4), 0x10 | ((v6Bytes[0] & 0xf0) >> 4), ((v6Bytes[0] & 0x0f) << 4) | ((v6Bytes[1] & 0xf0) >> 4), v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stringify_js_1 = require(\"./stringify.js\");\nconst v1_js_1 = require(\"./v1.js\");\nconst v1ToV6_js_1 = require(\"./v1ToV6.js\");\nfunction v6(options, buf, offset) {\n    options ??= {};\n    offset ??= 0;\n    let bytes = (0, v1_js_1.default)({ ...options, _v6: true }, new Uint8Array(16));\n    bytes = (0, v1ToV6_js_1.default)(bytes);\n    if (buf) {\n        for (let i = 0; i < 16; i++) {\n            buf[offset + i] = bytes[i];\n        }\n        return buf;\n    }\n    return (0, stringify_js_1.unsafeStringify)(bytes);\n}\nexports.default = v6;\n","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["Object","defineProperty","exports","value","URL","DNS","md5_js_1","v35_js_1","v35_js_2","v3","namespace","buf","offset","default","enumerable","get","constructor","configManager","this","logger","Logger","getInstance","createClient","modelConfig","debug","provider","model","ModelProvider","OLLAMA","OllamaClient","DEEPSEEK","DeepSeekClient","OPENAI","OpenAIClient","error","Error","fn","delay","timer","args","Promise","resolve","clearTimeout","setTimeout","async","result","limit","lastResult","lastCall","now","Date","apply","code","_language","trim","str1","str2","m","length","n","dist","i","j","cost","Math","min","toString","random","substr","text","defaultValue","JSON","parse","e","filePath","match","crypto_1","randomUUID","stringToBytes","parse_js_1","stringify_js_1","str","unescape","encodeURIComponent","bytes","Uint8Array","charCodeAt","version","hash","valueBytes","namespaceBytes","TypeError","set","unsafeStringify","validate_js_1","byteToHex","push","slice","arr","toLowerCase","uuid","module","Yallist","prototype","Symbol","iterator","walker","head","next","context","showLogsCommand","vscode","commands","registerCommand","showOutputChannel","subscriptions","ConfigManager","setLogLevel","getLogLevel","info","selectedModel","getSelectedModelConfig","window","showErrorMessage","cacheManager","CacheManager","globalState","clientFactory","ClientFactory","client","connectionTest","testConnection","success","showWarningMessage","message","statusBar","StatusBarManager","diagnosticsCollection","languages","createDiagnosticCollection","completionProvider","CompletionProvider","getStatusBarItem","supportedLanguages","language","selector","scheme","registerCompletionItemProvider","getTriggerCharacters","commandManager","CommandManager","debounceTimer","isProcessingCompletion","lastChangeTime","keyPressListener","editor","activeTextEditor","executeCommand","inputChar","isValidInputChar","isEnabled","cancel","clearPreview","getDebounceDelay","isFileTypeSupported","document","position","selection","active","cancellationTokenSource","CancellationTokenSource","completionItems","provideCompletionItems","token","triggerKind","CompletionTriggerKind","TriggerCharacter","triggerCharacter","items","Array","isArray","item","insertText","setPreview","char","isPrintable","isChineseChar","isCommonPunctuation","includes","isSpecialTrigger","selectionChangeListener","onDidChangeTextEditorSelection","event","hasActivePreview","activeEditor","textEditor","kind","TextEditorSelectionChangeKind","Keyboard","lastShownCompletion","documentChangeListener","workspace","onDidChangeTextDocument","fileName","enabledTypes","getEnabledFileTypes","disabledTypes","getDisabledFileTypes","fileExt","substring","lastIndexOf","shouldCacheChanges","cacheDocumentChanges","setRegistered","err","configPrefix","cachedConfig","enabled","triggerDelay","temperature","maxTokens","maxContextLines","includeImports","includeComments","cacheEnabled","retentionPeriodHours","maxSnippets","enabledFileTypes","disabledFileTypes","logLevel","LogLevel","ERROR","adaptToProjectSize","models","selectedModelIndex","selectedModelName","loadConfiguration","configChangeListener","onDidChangeConfiguration","affectsConfiguration","config","getConfiguration","parseLogLevel","title","apiBase","index","modelIndex","findIndex","warn","level","DEBUG","INFO","WARN","NONE","levelStr","updateConfigValue","reloadConfig","key","global","update","setEnabled","getTriggerDelay","getApiUrl","getModelName","setModelName","modelName","setSelectedModelIndex","getTemperature","baseTemperature","shouldAdaptToProjectSize","projectSize","estimateProjectSize","max","getMaxTokens","baseMaxTokens","getMaxContextLines","shouldIncludeImports","shouldIncludeComments","isCacheEnabled","getRetentionPeriodHours","getMaxSnippets","types","split","map","t","isFileExtApplicableForLanguage","matchesFileTypePatterns","fileType","patterns","some","pattern","endsWith","startsWith","getFullConfig","isDebugEnabled","openedFileCount","textDocuments","isAdaptToProjectSizeEnabled","setAdaptToProjectSize","getPromptTemplate","getSelectedModelName","setSelectedModelName","getAvailableModels","addModelConfig","updateModelConfig","deleteModelConfig","filter","_","dispose","setSelectedModelConfig","statusBarItem","_context","isRegisteredFlag","lastCompletionResult","lastContext","lastPosition","errorsShown","Set","abortControllers","Map","undefined","lastDecorator","lastInsertText","lastPreviewPosition","temporaryLines","originalPosition","updateClient","onError","has","add","options","then","val","env","openExternal","Uri","startOllama","command","process","platform","terminal","createTerminal","sendText","show","showInformationMessage","forEach","controller","abort","clear","createAbortController","completionId","AbortController","deleteAbortController","delete","accept","lines","endPosition","Position","line","character","range","Range","textToInsert","edit","editBuilder","insert","isDirty","save","put","String","newPosition","Selection","markDisplayed","outcome","completion","cacheHit","applyCompletion","processedText","langMatch","insertedLines","lastLineLength","revealRange","languageId","uri","selections","signal","onCancellationRequested","tooltip","startTime","contextData","collectContext","prefix","suffix","cachedCompletion","processCompletionResult","prompt","preparePrompt","selectedModelConfig","generateCompletion","aborted","time","modelProvider","filepath","numLines","timestamp","CompletionItem","CompletionItemKind","Snippet","detail","documentation","MarkdownString","sortText","replace","processedTextlines","currentLine","pop","currentWords","lastWord","trimStart","maxOverlap","textlines","textlinesset","currentIndent","newLines","join","getText","offsetAt","imports","getImportStatements","lineCount","importRegex","test","commonLanguages","disabledTypesArr","enabledTypesArr","stringify","isRegistered","setLastDecorator","decorator","setLastInsertText","setLastPosition","setLastPreviewPosition","getLastInsertText","getLastPosition","hasDecorator","hasInsertText","hasPosition","hasPreviewPosition","createTextEditorDecorationType","opacity","setDecorations","getLastDecorator","getLastPreviewPosition","storage","codeSnippets","lruCache","maxAge","loadCache","cachedData","CACHE_KEY","snippet","id","cleanExpiredCache","retentionPeriod","expiredCount","isExpired","del","saveCache","isSignificantChange","contentChanges","change","extractContext","tags","extractTags","metadata","frequency","addSnippet","changes","contextStart","start","contextEnd","end","contextRange","lineAt","extractJavaScriptTags","extractPythonTags","extractGenericTags","_code","functionMatch","classMatch","constMatch","letMatch","exec","identifierMatch","identifiers","isCommonKeyword","word","similarSnippet","findSimilarSnippet","tag","existing","calculateSimilarity","code1","code2","distance","calculateLevenshteinDistance","maxLength","findRelevantCode","currentCode","maxResults","scoredSnippets","s","score","calculateRelevanceScore","sort","a","b","duration","toFixed","currentTags","ageInHours","clearCache","reset","getStats","languageStats","snippetCount","hashString","cachedSnippet","existingIndex","abs","Buffer","from","createHash","digest","require","createStatusBarItem","StatusBarAlignment","Right","updateStatus","showTemporaryMessage","timeout","originalText","originalTooltip","originalBackground","backgroundColor","showRequestInProgress","showError","errorMessage","ThemeColor","toggleEnabled","isCurrentlyEnabled","updateV1State","rng_js_1","_state","state","rnds","msecs","nsecs","node","clockseq","v1Bytes","RangeError","tl","tmh","isV6","_v6","optionsKeys","keys","rng","DEFAULT_API_BASE","apiKey","getCompletion","buildPrompt","requestData","messages","role","content","max_tokens","response","fetch","method","headers","body","ok","errorText","status","statusText","responseData","json","completionText","choices","data","requestSignal","name","cleanedText","sha1_js_1","v5","updateV7State","seq","v7Bytes","v","of","parseInt","native_js_1","debugEnabled","outputChannel","createOutputChannel","instance","log","shouldLog","formatMessage","formattedMessage","toISOString","padEnd","stack","appendLine","console","setDebugEnabled","MAX","LENGTH","LENGTH_CALCULATOR","ALLOW_STALE","MAX_AGE","DISPOSE","NO_DISPOSE_ON_SET","LRU_LIST","CACHE","UPDATE_AGE_ON_GET","naiveLength","self","doUse","hit","isStale","unshiftNode","diff","tail","prev","removeNode","Entry","forEachStep","thisp","call","Infinity","lc","stale","noDisposeOnSet","updateAgeOnGet","mL","allowStale","mA","lengthCalculator","lC","itemCount","rforEach","toArray","k","values","dump","h","dumpLru","len","unshift","peek","load","l","expiresAt","prune","list","arguments","Node","create","pushNode","res","shift","forEachReverse","getReverse","mapReverse","reduce","initial","acc","reduceReverse","toArrayReverse","to","ret","sliceReverse","splice","deleteCount","nodes","inserted","reverse","p","er","validate","v7","v6ToV1","v6","v4","v1ToV6","v1","NIL","max_js_1","nil_js_1","v1_js_1","v1ToV6_js_1","v3_js_1","v4_js_1","v5_js_1","v6_js_1","v6ToV1_js_1","v7_js_1","version_js_1","apiUrl","num_predict","prompt_length","responseText","openBraces","closeBraces","hasResponse","jsonObj","parseError","allResponses","regex","directExtract","extractCompletionDirectly","cleanedJson","cleanJsonResponse","extractAnyContent","firstLineBreak","indexOf","codeBlockHeader","lastCodeBlockEnd","processedCompletion","postProcessCompletion","cleaned","firstLine","combinedJson","validJson","firstObjEnd","matches","contentMatch","openBracesCount","closeBracesCount","repeat","lastValidIndex","lastBraceIndex","firstBrace","lastBrace","jsonStart","jsonEnd","textMatch","template","hasChineseContent","textBeforeCursor","commentMode","isInComment","documentText","maxContextLength","previousCompletion","relevantCachedCode","cleanJsonWrappedCode","processedLines","trimmedText","objAccessPattern","multilineObjPattern","objMatch","specificPatternRegex","specificMatch","isInMultilineComment","openTripleQuotes","openTripleDoubleQuotes","cwd","jsonError","responseError","parts","lastPart","contentPatterns","colonIndex","fetchOptions","matchCount","regex_js_1","v6Bytes","disposables","registerCommands","enableExtension","bind","disableExtension","selectModel","showConfig","handleEscape","manageModels","commandId","handler","entries","disposable","currentModelName","label","description","picked","selected","showQuickPick","placeHolder","modal","withProgress","location","ProgressLocation","Notification","cancellable","progress","report","configMarkdown","createWebviewPanel","ViewColumn","One","webview","html","markdownToHtml","markdown","viewAllModels","addNewModel","editModel","deleteModel","panel","modelsHtml","_index","contextLength","providerOptions","SILICONFLOW","selectedProvider","newModel","showInputBox","password","contextLengthStr","isNaN","temperatureStr","parseFloat","maxTokensStr","newIndex","modelItems","editedModel","currentModel","d","rnds8Pool","poolPtr","randomFillSync","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}